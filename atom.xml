<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jemoii&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://g.hijkl.mn/"/>
  <updated>2017-09-20T02:46:04.792Z</updated>
  <id>https://g.hijkl.mn/</id>
  
  <author>
    <name>Jemoii</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring学习之AOP</title>
    <link href="https://g.hijkl.mn/aop/"/>
    <id>https://g.hijkl.mn/aop/</id>
    <published>2017-02-21T16:00:00.000Z</published>
    <updated>2017-09-20T02:46:04.792Z</updated>
    
    <content type="html"><![CDATA[<p><code>AnnotationAwareAspectJAutoProxyCreator</code>帮助我们基于注解实现AOP，它实现了<code>BeanPostProcessor</code>接口，那就从其实现的postProcessAfterInitialization方法（AbstractAutoProxyCreator#postProcessAfterInitialization）跟踪AOP是如何实现的。</p><p>跟踪源码来到AbstractAutoProxyCreator#wrapIfNecessary中的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="comment">// Create proxy if we have advice.</span></div><div class="line">Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, <span class="keyword">null</span>);</div><div class="line"><span class="keyword">if</span> (specificInterceptors != DO_NOT_PROXY) &#123;</div><div class="line"><span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.TRUE);</div><div class="line">Object proxy = createProxy(</div><div class="line">bean.getClass(), beanName, specificInterceptors, <span class="keyword">new</span> SingletonTargetSource(bean));</div><div class="line"><span class="keyword">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</div><div class="line"><span class="keyword">return</span> proxy;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</div><div class="line"><span class="keyword">return</span> bean;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在看一下具体每一步做了什么。</p><ul><li><p>getAdvicesAndAdvisorsForBean</p><ul><li>findCandidateAdvisors</li></ul></li></ul><p>首先使用BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean)获取所有的<code>Advisor</code>并使用BeanFactory#getBean(String, Class)实例化。</p><p>接着遍历所有的<code>Object</code>，通过AbstractAspectJAdvisorFactory#isAspect获取具有<code>@Aspect</code>注解的bean；再遍历bean，获取bean中不具有<code>@Pointcut</code>注解的方法，先按具有<code>@Around</code>、<code>@Before</code>、<code>@After</code>、<code>@AfterReturning</code>、<code>@AfterThrowing</code>排序，再按方法名排序；获取注解中表达式对应的<code>AspectJExpressionPointcut</code>；最后得到该bean相关的<code>InstantiationModelAwarePointcutAdvisorImpl</code>列表。使用BeanFactoryAspectJAdvisorsBuilder#advisorsCache保存beanName与其Advisor列表的对应关系。</p><ul><li><ul><li>findAdvisorsThatCanApply</li></ul></li></ul><p>上一步是获取所有切面，这一步是获取应用于当前bean的切面（AopUtils#canApply(Pointcut, Class, boolean)）。</p><p><em>TODO</em></p><p>org.aspectj.util.PartialOrder#sort</p><ul><li>createProxy</li></ul><p>DefaultAdvisorAdapterRegistry#wrap将获取的切面都包装为<code>Advisor</code>实例，实例化<code>ProxyFactory</code>，由ProxyFactory#getProxy(ClassLoader)继续跟踪代码到JdkDynamicAopProxy#getProxy(ClassLoader)，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> Proxy.newProxyInstance(classLoader, proxiedInterfaces, <span class="keyword">this</span>);</div></pre></td></tr></table></figure><p>返回代理之前会将<code>Advised</code>接口添加到proxiedInterfaces末尾。</p><p><code>JdkDynamicAopProxy</code>实现了<code>InvocationHandler</code>，那下面就看一下它是如何实现invoke方法的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Get the interception chain for this method.</span></div><div class="line">List&lt;Object&gt; chain = <span class="keyword">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</div><div class="line"></div><div class="line"><span class="comment">// Check whether we have any advice. If we don't, we can fallback on direct</span></div><div class="line"><span class="comment">// reflective invocation of the target, and avoid creating a MethodInvocation.</span></div><div class="line"><span class="keyword">if</span> (chain.isEmpty()) &#123;</div><div class="line"><span class="comment">// We can skip creating a MethodInvocation: just invoke the target directly</span></div><div class="line"><span class="comment">// Note that the final invoker must be an InvokerInterceptor so we know it does</span></div><div class="line"><span class="comment">// nothing but a reflective operation on the target, and no hot swapping or fancy proxying.</span></div><div class="line">Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);</div><div class="line">retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">// We need to create a method invocation...</span></div><div class="line">invocation = <span class="keyword">new</span> ReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain);</div><div class="line"><span class="comment">// Proceed to the joinpoint through the interceptor chain.</span></div><div class="line">retVal = invocation.proceed();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Massage return value if necessary.</span></div><div class="line">Class&lt;?&gt; returnType = method.getReturnType();</div><div class="line"><span class="keyword">if</span> (retVal != <span class="keyword">null</span> &amp;&amp; retVal == target &amp;&amp; returnType.isInstance(proxy) &amp;&amp;</div><div class="line">!RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) &#123;</div><div class="line"><span class="comment">// Special case: it returned "this" and the return type of the method</span></div><div class="line"><span class="comment">// is type-compatible. Note that we can't help if the target sets</span></div><div class="line"><span class="comment">// a reference to itself in another returned object.</span></div><div class="line">retVal = proxy;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (retVal == <span class="keyword">null</span> &amp;&amp; returnType != Void.TYPE &amp;&amp; returnType.isPrimitive()) &#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AopInvocationException(</div><div class="line"><span class="string">"Null return value from advice does not match primitive return type for: "</span> + method);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> retVal;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;AnnotationAwareAspectJAutoProxyCreator&lt;/code&gt;帮助我们基于注解实现AOP，它实现了&lt;code&gt;BeanPostProcessor&lt;/code&gt;接口，那就从其实现的postProcessAfterInitializati
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Spring" scheme="https://g.hijkl.mn/categories/Java/Spring/"/>
    
      <category term="Note" scheme="https://g.hijkl.mn/categories/Java/Spring/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring学习之从getBean接着说</title>
    <link href="https://g.hijkl.mn/preinstantiatesingletons/"/>
    <id>https://g.hijkl.mn/preinstantiatesingletons/</id>
    <published>2017-02-21T16:00:00.000Z</published>
    <updated>2017-09-20T04:35:38.765Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇留了一个<a href="/blog/abstractapplicationcontext-refresh/#todo">TODO</a>，这里从DefaultListableBeanFactory#preInstantiateSingletons开始继续跟踪源码。</p><p><code>loadBeanDefinitions</code>结束之后，DefaultListableBeanFactory#beanDefinitionNames中保存了beanName。这里通过预调用AbstractBeanFactory#getBean(String)实例化所有的bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Create bean instance.</span></div><div class="line"><span class="keyword">if</span> (mbd.isSingleton()) &#123;</div><div class="line">sharedInstance = getSingleton(beanName, <span class="keyword">new</span> ObjectFactory&lt;Object&gt;() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="keyword">return</span> createBean(beanName, mbd, args);</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> (BeansException ex) &#123;</div><div class="line">destroySingleton(beanName);</div><div class="line"><span class="keyword">throw</span> ex;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>继续跟踪源码来到AbstractAutowireCapableBeanFactory#createBean(String, RootBeanDefinition, Object[])中的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span></div><div class="line">Object bean = resolveBeforeInstantiation(beanName, mbdToUse);</div><div class="line"><span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="keyword">return</span> bean;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbdToUse.getResourceDescription(), beanName,</div><div class="line"><span class="string">"BeanPostProcessor before instantiation of bean failed"</span>, ex);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Object beanInstance = doCreateBean(beanName, mbdToUse, args);</div><div class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">logger.debug(<span class="string">"Finished creating instance of bean '"</span> + beanName + <span class="string">"'"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> beanInstance;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上一篇提到<a href="#registerBeanPostProcessors">注册BeanPostProcessor</a>，这里的resolveBeforeInstantiation即检查注册的<code>BeanPostProcessor</code>是否实现了<code>InstantiationAwareBeanPostProcessor</code>接口，如果是，这里会调用实现的postProcessBeforeInstantiation方法。</p><p><img src="https://moetu.fastmirror.org/images/2017/09/20/instantiationaware_uml89f7b1a4df59dfaa.jpg" alt=""></p><p>接着AbstractAutowireCapableBeanFactory#createBeanInstance实例化bean并包装为<code>BeanWrapper</code>；AbstractAutowireCapableBeanFactory#populateBean会检查注册的<code>BeanPostProcessor</code>是否实现了<code>InstantiationAwareBeanPostProcessor</code>接口，如果是，这里会调用实现的postProcessAfterInstantiation、postProcessPropertyValues方法。AbstractAutowireCapableBeanFactory#applyPropertyValues会尝试使用<code>BeanWrapper</code>注册的<code>PropertyEditor</code>修改property。</p><p>后面的过程和<code>BeanFactory</code> javadoc中的描述一致，会依次调用</p><ol><li>postProcessBeforeInitialization methods of BeanPostProcessors </li><li>InitializingBean’s afterPropertiesSet </li><li>a custom init-method definition </li><li>postProcessAfterInitialization methods of BeanPostProcessors</li></ol><p><code>createBean</code>占了大半篇幅，这里重新回到开头，createBean方法调用结束后得到sharedInstance，接着检查sharedInstance是否为<code>FactoryBean</code>实例，如果是，会调用FactoryBean#getObject方法，方法的返回值作为最后的返回结果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一篇留了一个&lt;a href=&quot;/blog/abstractapplicationcontext-refresh/#todo&quot;&gt;TODO&lt;/a&gt;，这里从DefaultListableBeanFactory#preInstantiateSingletons开始继续跟踪源码。&lt;
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Spring" scheme="https://g.hijkl.mn/categories/Java/Spring/"/>
    
      <category term="Note" scheme="https://g.hijkl.mn/categories/Java/Spring/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring学习之从refresh说起</title>
    <link href="https://g.hijkl.mn/abstractapplicationcontext-refresh/"/>
    <id>https://g.hijkl.mn/abstractapplicationcontext-refresh/</id>
    <published>2017-02-21T16:00:00.000Z</published>
    <updated>2017-09-20T04:35:14.621Z</updated>
    
    <content type="html"><![CDATA[<p>这里我们以<code>ClassPathXmlApplicationContext</code>为例，跟踪Spring的启动过程，其实主要是跟踪AbstractApplicationContext.refresh。</p><p>#####1</p><p>跟踪源码来到AbstractApplicationContext#prepareRefresh中的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Validate that all properties marked as required are resolvable</span></div><div class="line"><span class="comment">// see ConfigurablePropertyResolver#setRequiredProperties</span></div><div class="line">getEnvironment().validateRequiredProperties();</div></pre></td></tr></table></figure><p>那我们就先来看一下<code>Environment</code>相关的内容。</p><p><code>AbstractApplicationContext</code>内置了<code>environment</code>变量，getEnvironment通过createEnvironment方法，将<code>environment</code>实例化为<code>StandardEnvironment</code>。下面的代码算是一个概括性描述，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ConfigurableEnvironment environment = <span class="keyword">new</span> StandardEnvironment();</div></pre></td></tr></table></figure><p><code>StandardEnvironment</code>重写了customizePropertySources方法，目的是在实例化时将System.getProperties()获取的系统属性以及System.getenv()获取的系统环境变量添加到<code>propertySources</code>中。<code>propertySources</code>是基于<code>CopyOnWriteArrayList&lt;PropertySource&lt;?&gt;&gt;</code>实现的<code>MutablePropertySources</code>实例。</p><p><img src="https://moetu.fastmirror.org/images/2017/09/20/standardenvironment_umlfb0c0742875b9d39.jpg" alt=""></p><p>除了重写customizePropertySources方法，其他的方法仍由<code>AbstractEnvironment</code>来实现，<code>propertySources</code>即内置于<code>AbstractEnvironment</code>。从上图可以看出<code>AbstractEnvironment</code>同时实现了<code>Environment</code>和<code>ConfigurablePropertyResolver</code>接口，<code>AbstractEnvironment</code>基于<code>LinkedHashSet</code>实现了<code>Environment</code>（profile）相关的方法，而<code>ConfigurablePropertyResolver</code>相关的方法则由其内置的一个<code>PropertySourcesPropertyResolver</code>实例来实现。比如，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validateRequiredProperties</span><span class="params">()</span> <span class="keyword">throws</span> MissingRequiredPropertiesException </span>&#123;</div><div class="line"><span class="keyword">this</span>.propertyResolver.validateRequiredProperties();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>#####2</p><p>接着来到AbstractApplicationContext#obtainFreshBeanFactory中的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">refreshBeanFactory();</div></pre></td></tr></table></figure><p>上述方法由AbstractRefreshableApplicationContext#refreshBeanFactory实现，销毁相关的bean（清理bean相关的对象），关闭BeanFactory，重新实例化BeanFactory。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DefaultListableBeanFactory beanFactory = <span class="keyword">new</span> DefaultListableBeanFactory(<span class="keyword">null</span>);</div></pre></td></tr></table></figure><p>beanFactory通过内置的<code>serializableFactories</code>保存<code>serializationId</code>与其自身弱引用的对应关系。在下面提到的<code>loadBeanDefinitions</code>结束之后，将beanFactory赋给<code>AbstractApplicationContext</code>内置的<code>beanFactory</code>。</p><p><code>loadBeanDefinitions</code>方法被多次重载，最终到AbstractBeanDefinitionReader#loadBeanDefinitions(String, Set)可以分为两部分，第一部分是获取资源文件，第二部分是从资源文件中获取BeanDefinition。</p><ul><li>getResources</li></ul><p>beanFactory自身作为<code>XmlBeanDefinitionReader</code>内置的<code>resourceLoader</code>，得到<code>XmlBeanDefinitionReader</code>实例，同时将其<code>environment</code>赋值给<code>XmlBeanDefinitionReader</code>内置的<code>environment</code>。</p><p>reader将getResources的任务交给其实例化时的<code>resourceLoader</code>，即beanFactory；beanFactory又将getResources的任务交给其内置的<code>resourcePatternResolver</code>（<code>PathMatchingResourcePatternResolver</code>实例）。</p><ul><li>loadBeanDefinitions</li></ul><p>继续跟踪源码来到DefaultBeanDefinitionDocumentReader#doRegisterBeanDefinitions中的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.delegate.isDefaultNamespace(root)) &#123;</div><div class="line">String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);</div><div class="line"><span class="keyword">if</span> (StringUtils.hasText(profileSpec)) &#123;</div><div class="line">String[] specifiedProfiles = StringUtils.tokenizeToStringArray(</div><div class="line">profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</div><div class="line"><span class="keyword">if</span> (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里如果元素配置了profile属性，则会通过前面的<code>environment</code>检查配置的profile是否符合，如果不符合则跳过当前资源文件。</p><p>接着来到DefaultBeanDefinitionDocumentReader#processBeanDefinition中的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);</div><div class="line">...</div><div class="line"><span class="comment">// Register the final decorated instance.</span></div><div class="line">BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</div></pre></td></tr></table></figure><p>BeanDefinitionReaderUtils#createBeanDefinition返回<code>GenericBeanDefinition</code>实例，设置其相应的属性，包装成<code>BeanDefinitionHolder</code>实例。</p><p>这里getRegistry返回的是实例化<code>XmlBeanDefinitionReader</code>时传入的beanFactory，所以回到DefaultListableBeanFactory#registerBeanDefinition。</p><p>关于设置<code>GenericBeanDefinition</code>实例的属性，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanClassName</span><span class="params">(String beanClassName)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.beanClass = beanClassName;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBeanClassName</span><span class="params">()</span> </span>&#123;</div><div class="line">Object beanClassObject = <span class="keyword">this</span>.beanClass;</div><div class="line"><span class="keyword">if</span> (beanClassObject <span class="keyword">instanceof</span> Class) &#123;</div><div class="line"><span class="keyword">return</span> ((Class&lt;?&gt;) beanClassObject).getName();</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span> (String) beanClassObject;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>#####3</p><p>接着跟踪源码来到AbstractApplicationContext#prepareBeanFactory中的，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Configure the bean factory with context callbacks.</span></div><div class="line">beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationContextAwareProcessor(<span class="keyword">this</span>));</div></pre></td></tr></table></figure><p>看一下<code>ApplicationContextAwareProcessor</code>重写的postProcessBeforeInitialization方法，该方法会调用ApplicationContextAwareProcessor#invokeAwareInterfaces</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeAwareInterfaces</span><span class="params">(Object bean)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> Aware) &#123;</div><div class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> EnvironmentAware) &#123;</div><div class="line">((EnvironmentAware) bean).setEnvironment(<span class="keyword">this</span>.applicationContext.getEnvironment());</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> EmbeddedValueResolverAware) &#123;</div><div class="line">((EmbeddedValueResolverAware) bean).setEmbeddedValueResolver(</div><div class="line"><span class="keyword">new</span> EmbeddedValueResolver(<span class="keyword">this</span>.applicationContext.getBeanFactory()));</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ResourceLoaderAware) &#123;</div><div class="line">((ResourceLoaderAware) bean).setResourceLoader(<span class="keyword">this</span>.applicationContext);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ApplicationEventPublisherAware) &#123;</div><div class="line">((ApplicationEventPublisherAware) bean).setApplicationEventPublisher(<span class="keyword">this</span>.applicationContext);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> MessageSourceAware) &#123;</div><div class="line">((MessageSourceAware) bean).setMessageSource(<span class="keyword">this</span>.applicationContext);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ApplicationContextAware) &#123;</div><div class="line">((ApplicationContextAware) bean).setApplicationContext(<span class="keyword">this</span>.applicationContext);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果bean实现了以下接口，包括<code>EnvironmentAware</code>、<code>EmbeddedValueResolverAware</code>、<code>ResourceLoaderAware</code>、<code>ApplicationEventPublisherAware</code>、<code>MessageSourceAware</code>、<code>ApplicationContextAware</code>，则bean在初始化之前，相应的实现方法将被调用。</p><p>#####4</p><p>跟踪源码来到AbstractApplicationContext#invokeBeanFactoryPostProcessors，获取beanFactory中已经注册的<code>BeanFactoryPostProcessor</code>，调用其中的postProcessBeanFactory方法。调用之前会判断处理器是否实现了<code>BeanDefinitionRegistryPostProcessor</code>接口，如果实现了，则先调用其中的postProcessBeanDefinitionRegistry方法，不再调用postProcessBeanFactory方法。</p><p><img src="https://moetu.fastmirror.org/images/2017/09/20/beanfactorypostprocessor_umle966b2defa9d4585.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String[] postProcessorNames =</div><div class="line">beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</div></pre></td></tr></table></figure><p>再使用DefaultListableBeanFactory#getBeanNamesForType获取未注册的<code>BeanFactoryPostProcessor</code>，重复上述过程。</p><p>#####<a href="#registerBeanPostProcessors">5</a></p><p>接着跟踪源码来到AbstractApplicationContext#registerBeanPostProcessors，注册尚未注册的<code>BeanPostProcessor</code>，最后会重新注册实现了<code>MergedBeanDefinitionPostProcessor</code>接口的处理器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// First, register the BeanPostProcessors that implement PriorityOrdered.</span></div><div class="line">sortPostProcessors(beanFactory, priorityOrderedPostProcessors);</div><div class="line">registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);</div><div class="line"></div><div class="line"><span class="comment">// Next, register the BeanPostProcessors that implement Ordered.</span></div><div class="line">...</div><div class="line">sortPostProcessors(beanFactory, orderedPostProcessors);</div><div class="line">registerBeanPostProcessors(beanFactory, orderedPostProcessors);</div><div class="line"></div><div class="line"><span class="comment">// Now, register all regular BeanPostProcessors.</span></div><div class="line">...</div><div class="line">registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);</div><div class="line"></div><div class="line"><span class="comment">// Finally, re-register all internal BeanPostProcessors.</span></div><div class="line">sortPostProcessors(beanFactory, internalPostProcessors);</div><div class="line">registerBeanPostProcessors(beanFactory, internalPostProcessors);</div></pre></td></tr></table></figure><p><img src="https://moetu.fastmirror.org/images/2017/09/20/beanpostprocessor_uml046fb3f461390697.jpg" alt=""></p><p>#####6</p><p>接着初始化<code>MessageSource</code>、<code>ApplicationEventMulticaster</code>，注册监听者并广播早期的<code>ApplicationEvents</code>。</p><p><a href="#todo"><em>TODO</em></a></p><ul><li>DefaultListableBeanFactory#preInstantiateSingletons</li><li>AbstractBeanFactory#doGetBean</li></ul><p>最后初始化<code>LifecycleProcessor</code>。</p><p>#####7</p><p><a href="http://blog.163.com/axuandebin@126/blog/static/118777042009410248557/" target="_blank" rel="external">Spring容器-ApplicationContext的启动过程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里我们以&lt;code&gt;ClassPathXmlApplicationContext&lt;/code&gt;为例，跟踪Spring的启动过程，其实主要是跟踪AbstractApplicationContext.refresh。&lt;/p&gt;
&lt;p&gt;#####1&lt;/p&gt;
&lt;p&gt;跟踪源码来到Ab
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Spring" scheme="https://g.hijkl.mn/categories/Java/Spring/"/>
    
      <category term="Note" scheme="https://g.hijkl.mn/categories/Java/Spring/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>反序列化时的readResolve</title>
    <link href="https://g.hijkl.mn/class-defined-readresolve/"/>
    <id>https://g.hijkl.mn/class-defined-readresolve/</id>
    <published>2017-01-22T16:00:00.000Z</published>
    <updated>2017-09-20T02:46:04.786Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.aop;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Canonical Pointcut instance that always matches.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Rod Johnson</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TruePointcut</span> <span class="keyword">implements</span> <span class="title">Pointcut</span>, <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> TruePointcut INSTANCE = <span class="keyword">new</span> TruePointcut();</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Enforce Singleton pattern.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">TruePointcut</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> ClassFilter <span class="title">getClassFilter</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> ClassFilter.TRUE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> MethodMatcher <span class="title">getMethodMatcher</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> MethodMatcher.TRUE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Required to support serialization. Replaces with canonical</span></div><div class="line"><span class="comment"> * instance on deserialization, protecting Singleton pattern.</span></div><div class="line"><span class="comment"> * Alternative to overriding &#123;<span class="doctag">@code</span> equals()&#125;.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> INSTANCE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="string">"Pointcut.TRUE"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里直接给出<code>TruePointcut</code>的源码，可以看出其使用了单例模式。但是这里定义了一个<code>private Object readResolve()</code>，javadoc中还写着<code>在反序列化时保护单例模式</code>，那它是如何起到保护作用的呢？</p><p>联想到我们可以在序列化、反序列化时自定义<code>writeObject</code>、<code>readObject</code>方法，那<code>readResolve</code>是不是与其类似呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></div><div class="line"><span class="function"><span class="keyword">throws</span> IOException</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></div><div class="line"><span class="function"><span class="keyword">throws</span> IOException, ClassNotFoundException</span>;</div></pre></td></tr></table></figure><p>ObjectInputStream#readOrdinaryObject中的部分源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">      <span class="keyword">if</span> (desc.isExternalizable()) &#123;</div><div class="line">          readExternalData((Externalizable) obj, desc);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">          readSerialData(obj, desc);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      handles.finish(passHandle);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (obj != <span class="keyword">null</span> &amp;&amp;</div><div class="line">          handles.lookupException(passHandle) == <span class="keyword">null</span> &amp;&amp;</div><div class="line">          desc.hasReadResolveMethod())</div><div class="line">      &#123;</div><div class="line">          Object rep = desc.invokeReadResolve(obj);</div><div class="line">          <span class="keyword">if</span> (unshared &amp;&amp; rep.getClass().isArray()) &#123;</div><div class="line">              rep = cloneArray(rep);</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">if</span> (rep != obj) &#123;</div><div class="line">              handles.setObject(passHandle, obj = rep);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> obj;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>从源码可以看出，如果自定义了<code>readResolve</code>方法，反序列化的最终结果将取决于该方法的返回值。所以这里可以<code>在反序列时保护单例模式</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>关于IntegerCache</title>
    <link href="https://g.hijkl.mn/about-integercache/"/>
    <id>https://g.hijkl.mn/about-integercache/</id>
    <published>2017-01-09T16:00:00.000Z</published>
    <updated>2017-09-20T04:33:42.277Z</updated>
    
    <content type="html"><![CDATA[<p>很久没有写文章了，今天以一段代码重新开始，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Integer a = <span class="number">127</span>;</div><div class="line">Integer b = <span class="number">127</span>;</div><div class="line"><span class="keyword">int</span> c = <span class="number">127</span>;</div><div class="line">System.out.println(a == b);</div><div class="line">System.out.println(a == c);</div><div class="line"></div><div class="line">a = <span class="number">128</span>;</div><div class="line">b = <span class="number">128</span>;</div><div class="line">c = <span class="number">128</span>;</div><div class="line">System.out.println(a == b);</div><div class="line">System.out.println(a == c);</div><div class="line"></div><div class="line">a = <span class="keyword">new</span> Integer(<span class="number">127</span>);</div><div class="line">b = <span class="keyword">new</span> Integer(<span class="number">127</span>);</div><div class="line">System.out.println(a == b);</div></pre></td></tr></table></figure></p><p><img src="https://moetu.fastmirror.org/images/2017/09/20/about_Integerb0879f6e12659e70.jpg" alt=""></p><p>这里还给出了代码截图，可以看到这段代码在IDE中有多处warning提示，包括</p><blockquote><p>Condition ‘a == c’ is always ‘true’<br><br>Unnecessary boxing ‘new Integer(127)’<br><br>Number objects are compared using ‘==’, not ‘equals()’</p></blockquote><p>实际编码时应该按照提示修改warning。这里直接给出执行结果</p><blockquote><p>true<br><br>true<br><br>false<br><br>true<br><br>false</p></blockquote><p>了解自动拆箱的知识后，<code>a == c</code>的结果很好理解，包装类型a与原始类型c进行比较时，自动拆箱，相当于<code>127 == 127</code>以及<code>128 == 128</code>，所以c相关的结果都是true。再看一下最后一个<code>a == b</code>，了解equals与==的区别后，结果是false也好理解，这里还提示我们应该使用equals来比较包装类型a和b。本文主要关注前两个<code>a == b</code>，127时结果是true，128时结果是false。</p><p>了解自动装箱的知识后，明白这里<code>Integer a = 127</code>等价于<code>Integer a = Integer.valueOf(127)</code>。那现在就看一下<code>valueOf</code>这个方法做了什么。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</div><div class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</div><div class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>原来<code>valueOf</code>与<code>IntegerCache</code>这个类相关，那再看一下<code>IntegerCache</code>这个类做了什么。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        <span class="comment">// high value may be configured by property</span></div><div class="line">        <span class="keyword">int</span> h = <span class="number">127</span>;</div><div class="line">        String integerCacheHighPropValue =</div><div class="line">            sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</div><div class="line">        <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</div><div class="line">            i = Math.max(i, <span class="number">127</span>);</div><div class="line">            <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></div><div class="line">            h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        high = h;</div><div class="line"></div><div class="line">        cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</div><div class="line">        <span class="keyword">int</span> j = low;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</div><div class="line">            cache[k] = <span class="keyword">new</span> Integer(j++);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>IntegerCache</code>中定义了一个Integer数组，初始化时，这个数组预先保存了<code>[-128, high]</code>之间的Integer实例。<code>valueOf</code>方法在自动装箱时会判断需要装箱的数是否在这个区间内，如果在则返回预先保存的实例，不在则新实例化。默认的区间范围是<code>[-128, 127]</code>，第一次装箱127时，返回的是预先保存的同一个实例，所以结果为true；第二次装箱128时，返回的是新实例化的对象，所以结果为false。</p><p>除了Integer内建了IntegerCache，Byte、Short、Long也内建了相应的类。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很久没有写文章了，今天以一段代码重新开始，&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Could not get the value for parameter compilerId for plugin execution</title>
    <link href="https://g.hijkl.mn/update-maven-project/"/>
    <id>https://g.hijkl.mn/update-maven-project/</id>
    <published>2016-04-15T16:00:00.000Z</published>
    <updated>2017-09-20T04:33:11.069Z</updated>
    
    <content type="html"><![CDATA[<p>最近Eclipse下的很多Maven工程报错，导入其他的Maven工程时也同样报错，报错的日志类似如下，</p><blockquote><p>CoreException: Could not get the value for parameter compilerId for plugin execution default-compile: PluginResolutionException: Plugin org.apache.maven.plugins:maven-compiler-plugin:3.1 or one of its dependencies could not be resolved: The following artifacts could not be resolved: org.apache.maven:maven-core:jar:2.0.9, org.apache.maven:maven-settings:jar:2.0.9, org.apache.maven:maven-plugin-parameter-documenter:jar:2.0.9, org.apache.maven:maven-profile:jar:2.0.9, org.apache.maven:maven-model:jar:2.0.9, org.apache.maven:maven-repository-metadata:jar:2.0.9, org.apache.maven:maven-error-diagnostics:jar:2.0.9, org.apache.maven:maven-project:jar:2.0.9, org.apache.maven:maven-plugin-registry:jar:2.0.9, org.apache.maven:maven-plugin-descriptor:jar:2.0.9, org.apache.maven:maven-artifact-manager:jar:2.0.9, org.apache.maven:maven-monitor:jar:2.0.9, org.apache.maven:maven-toolchain:jar:1.0, org.apache.maven.shared:maven-shared-utils:jar:0.1, com.google.code.findbugs:jsr305:jar:2.0.1, org.apache.maven.shared:maven-shared-incremental:jar:1.1, org.codehaus.plexus:plexus-component-annotations:jar:1.5.5, org.codehaus.plexus:plexus-compiler-api:jar:2.2, org.codehaus.plexus:plexus-compiler-manager:jar:2.2, org.codehaus.plexus:plexus-compiler-javac:jar:2.2, org.codehaus.plexus:plexus-container-default:jar:1.5.5, org.codehaus.plexus:plexus-classworlds:jar:2.2.2, org.apache.xbean:xbean-reflect:jar:3.4, log4j:log4j:jar:1.2.12, commons-logging:commons-logging-api:jar:1.1, com.google.collections:google-collections:jar:1.0: Failure to transfer org.apache.maven:maven-core:jar:2.0.9 from <a href="https://repo.maven.apache.org/maven2" target="_blank" rel="external">https://repo.maven.apache.org/maven2</a> was cached in the local repository, resolution will not be reattempted until the update interval of central has elapsed or updates are forced. Original error: Could not transfer artifact org.apache.maven:maven-core:jar:2.0.9 from/to central (<a href="https://repo.maven.apache.org/maven2" target="_blank" rel="external">https://repo.maven.apache.org/maven2</a>): The operation was cancelled.</p></blockquote><p>开始认为是<code>org.apache.maven.plugins:maven-compiler-plugin:3.1</code>插件下载失败，检查本地仓库时，发现该插件已下载成功。今天参考 <a href="http://blog.csdn.net/testcs_dn/article/details/38818581" target="_blank" rel="external">CoreException: Could not get the value for parameter compilerId for plugin execution default-compile</a> 继续向下看日志，关键的错误日志应该是，</p><blockquote><p>Failure to transfer org.apache.maven:maven-core:jar:2.0.9 from <a href="https://repo.maven.apache.org/maven2" target="_blank" rel="external">https://repo.maven.apache.org/maven2</a> was cached in the local repository, resolution will not be reattempted until the update interval of central has elapsed or updates are forced.</p></blockquote><p>确认本地仓库中的<code>org.apache.maven:maven-core:jar:2.0.9</code>已下载成功，仍然报错的原因是，</p><blockquote><p>resolution will not be reattempted until the update interval of central has elapsed or updates are forced.</p></blockquote><p>参考 <a href="http://stackoverflow.com/questions/21721357/error-in-pom-xml-maven-build" target="_blank" rel="external">Error in pom.xml Maven build</a>，在Eclipse中使用<code>Alt+F5</code>快捷键，在弹出的Update Maven Project对话框中选择报错的Maven工程，勾选下图中的<code>Force Update of Snapshots/Releases</code>，更新结束后，问题解决。</p><p><img src="https://moetu.fastmirror.org/images/2017/09/20/alt_f55a5571a2d9a8ed9b.png" alt="alt + F5"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近Eclipse下的很多Maven工程报错，导入其他的Maven工程时也同样报错，报错的日志类似如下，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CoreException: Could not get the value for parameter compilerId 
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Maven" scheme="https://g.hijkl.mn/categories/Java/Maven/"/>
    
    
  </entry>
  
  <entry>
    <title>利用后缀数组解决问题</title>
    <link href="https://g.hijkl.mn/about-suffix-array-and-else/"/>
    <id>https://g.hijkl.mn/about-suffix-array-and-else/</id>
    <published>2016-04-02T16:00:00.000Z</published>
    <updated>2017-09-20T02:46:04.778Z</updated>
    
    <content type="html"><![CDATA[<p>在介绍后缀数组之前，以字符串<code>&quot;aabaaaab&quot;</code>为例建立两个字符串数组，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String[] before = <span class="keyword">new</span> String[s.length()];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; before.length; i++) &#123;</div><div class="line">before[i] = s.substring(i);</div><div class="line">&#125;</div><div class="line">java.util.Arrays.sort(before);</div><div class="line">String[] after = before;</div></pre></td></tr></table></figure><p>before数组的内容为，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="string">"aabaaaab"</span>, <span class="string">"abaaaab"</span>, <span class="string">"baaaab"</span>, <span class="string">"aaaab"</span>, <span class="string">"aaab"</span>, <span class="string">"aab"</span>, <span class="string">"ab"</span>, <span class="string">"b"</span> &#125;</div></pre></td></tr></table></figure><p>对before数组元素按字典序进行排序，得到after数组，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="string">"aaaab"</span>, <span class="string">"aaab"</span>, <span class="string">"aab"</span>, <span class="string">"aabaaaab"</span>, <span class="string">"ab"</span>, <span class="string">"abaaaab"</span>, <span class="string">"b"</span>, <span class="string">"baaaab"</span> &#125;</div></pre></td></tr></table></figure><p>后缀数组suffix的定义为，<code>after[i]=before[suffix[i]-1]</code>，即排第几的元素是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">3</span> &#125;</div></pre></td></tr></table></figure><p>名次数组rank的定义为，<code>before[i]=after[rank[i]-1]</code>，即该元素排第几？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span> &#125;</div></pre></td></tr></table></figure><p>height数组保存after数组中相邻元素之间的最长前缀，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">String[] height = <span class="keyword">new</span> String[after.length];</div><div class="line">height[<span class="number">0</span>] = <span class="string">""</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; height.length; i++) &#123;</div><div class="line"><span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(; x &lt; after[i - <span class="number">1</span>].length() &amp;&amp; y &lt; after[i].length(); x++, y++) &#123;</div><div class="line">    <span class="keyword">if</span>(after[i - <span class="number">1</span>].charAt(x) != after[i].charAt(y)) &#123;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">height[i] = after[i - <span class="number">1</span>].substring(<span class="number">0</span>, x);</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="string">""</span>, <span class="string">"aaa"</span>, <span class="string">"aa"</span>, <span class="string">"aab"</span>, <span class="string">"a"</span>, <span class="string">"ab"</span>, <span class="string">""</span>, <span class="string">"b"</span> &#125;</div></pre></td></tr></table></figure><p>#####可重叠最长重复子串</p><p>即为height数组中length最大的元素，<code>&quot;aaa&quot;</code>、<code>&quot;aab&quot;</code></p><p>#####最长回文子串</p><p>将原字符串翻转后拼接到原字符串末尾，中间用特殊字符（如<code>$</code>）隔开，得到新的字符串<code>&quot;aabaaaab$baaaabaa&quot;</code>，新字符串的height数组为，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="string">""</span>, <span class="string">""</span>, <span class="string">"a"</span>, <span class="string">"aa"</span>, <span class="string">"aaaab"</span>, <span class="string">"aaa"</span>, <span class="string">"aaab"</span>, <span class="string">"aa"</span>, <span class="string">"aab"</span>, <span class="string">"aabaa"</span>, <span class="string">"a"</span>, <span class="string">"ab"</span>, <span class="string">"abaa"</span>, <span class="string">""</span>, <span class="string">"b"</span>, <span class="string">"baa"</span>, <span class="string">"baaaab"</span> &#125;</div></pre></td></tr></table></figure><p>最长回文子串即为height数组中length最大的元素，<code>&quot;baaaab&quot;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在介绍后缀数组之前，以字符串&lt;code&gt;&amp;quot;aabaaaab&amp;quot;&lt;/code&gt;为例建立两个字符串数组，&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div cl
      
    
    </summary>
    
      <category term="Coding Interview" scheme="https://g.hijkl.mn/categories/Coding-Interview/"/>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Coding-Interview/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>最近公共祖先问题</title>
    <link href="https://g.hijkl.mn/least-common-ancestor/"/>
    <id>https://g.hijkl.mn/least-common-ancestor/</id>
    <published>2016-03-27T16:00:00.000Z</published>
    <updated>2017-09-20T02:46:04.775Z</updated>
    
    <content type="html"><![CDATA[<p>#####从git merge说起</p><p>接着 <a href="http://jemoii.github.io/blog/working-with-git/" target="_blank" rel="external">使用Git协同工作</a> 中的内容，使用伪代码描述<code>git merge</code>的原理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">找到目标分支current和被合并分支merge的共同祖先分支ancestor；</div><div class="line">// 在fix_bug分支上执行git merge master</div><div class="line">// master为目标分支，fix_bug为被合并分支</div><div class="line">if(ancestor == merge) &#123;</div><div class="line">return;</div><div class="line">&#125; else if(ancestor == current) &#123;</div><div class="line">fast forward merge，分支current指向merge</div><div class="line">&#125; else &#123;</div><div class="line">确定ancestor与merge的差异</div><div class="line">try &#123;</div><div class="line">    将差异合并到current</div><div class="line">    &#125; catch(合并出现矛盾) &#123;</div><div class="line">    添加矛盾标记，通知用户解决矛盾</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    根据current、merge创建新的子分支</div><div class="line">    分支current指向新的子分支</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Git的分支结构为树形结构，这里找到两个分支的共同祖先分支，即<code>求树中两个节点的最近公共祖先</code>。</p><p>如果每个分支可以确定其父分支，即树中节点具有指向其父亲的parent指针，那问题可以转化为<code>求两个链表的公共节点</code>。两个节点分别使用parent指针遍历到根节点root，遍历步数之差即两节点到公共节点的步数之差，由步数较大的节点先遍历步数之差对应的步数，接着两节点同时使用parent指针遍历，当parent指针的指向一致时，其指向即所求的公共节点。可以进一步参考 <a href="http://zhedahht.blog.163.com/blog/static/254111742008053169567/" target="_blank" rel="external">两链表的第一个公共结点</a> 。</p><p>如果树为平衡二叉树，根据BST的性质，从根节点root开始遍历，如果当前节点的值同时大于两节点的值，说明两节点都位于当前节点的左子树，接下来向左子树遍历；如果当前节点的值同时小于两节点的值，说明两节点都位于当前节点的右子树，接下来向右子树遍历；如果当前节点的值位于两节点的值之间，那当前节点即所求的公共节点。</p><p>下面介绍使用<code>Tarjan离线算法</code>解决上述问题，Tarjan算法基于深度遍历和<code>并查集</code>，先介绍并查集相关的内容。</p><p>#####并查集</p><p><a href="http://blog.csdn.net/dellaserss/article/details/7724401" target="_blank" rel="external">并查集详解 (转)</a> 非常生动地介绍了并查集相关的内容，这里给出并查集的Java实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFindSet</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] set;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INIT_SET_SIZE = <span class="number">8</span>;</div><div class="line"><span class="comment">/** 参数超出并查集下标范围，返回ERROR_INDEX */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ERROR_INDEX = -<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">UnionFindSet</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>(INIT_SET_SIZE);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">UnionFindSet</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">set = <span class="keyword">new</span> <span class="keyword">int</span>[size];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; set.length; i++) &#123;</div><div class="line">set[i] = i;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 等价于find(x, true)</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (outOfLength(x)) &#123;</div><div class="line"><span class="keyword">return</span> ERROR_INDEX;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (set[x] != x) &#123;</div><div class="line">set[x] = find(set[x]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> set[x];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> compress</span></div><div class="line"><span class="comment"> *            是否压缩路径</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> x超出并查集下标范围，返回ERROR_INDEX；否则返回x的根元素</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">boolean</span> compress)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (outOfLength(x)) &#123;</div><div class="line"><span class="keyword">return</span> ERROR_INDEX;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (compress) &#123;</div><div class="line"><span class="keyword">return</span> find(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> temp = x;</div><div class="line"><span class="keyword">while</span> (set[temp] != temp) &#123;</div><div class="line">temp = set[temp];</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> y</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> x、y的根元素是否相等</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (outOfLength(x) || outOfLength(y)) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> find(x) == find(y);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 将x、y合并到同一根元素下</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> y</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> prex = find(x);</div><div class="line"><span class="keyword">int</span> prey = find(y);</div><div class="line"><span class="keyword">if</span> (prex != ERROR_INDEX &amp;&amp; prey != ERROR_INDEX &amp;&amp; prex != prey) &#123;</div><div class="line">set[prex] = prey;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">outOfLength</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> index &lt; <span class="number">0</span> || index &gt;= set.length;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>#####Tanjar离线算法</p><p>理解并查集之后，Tanjar算法即将并查集与深度遍历有效结合，伪代码描述原理为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Tarjan(u) &#123;</div><div class="line">begin</div><div class="line">设置u号节点的祖先为u</div><div class="line">        深度遍历u的子树</div><div class="line">        访问每一条与u相关的询问u和v</div><div class="line">        -若v已经被访问过，则输出v当前的祖先t</div><div class="line">        标记u为已被访问，将所有u的子节点包括u本身的祖先改为u的父节点</div><div class="line">    end</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>具体的Java实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> node</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> queryList</span></div><div class="line"><span class="comment"> *            LCA查询条件列表，Query类的u、v属性为查询条件，即已知的两节点；ancestor属性保存查询结果，即公共节点</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(TreeNode node, ArrayList&lt;Query&gt; queryList)</span> </span>&#123;</div><div class="line">node.ancestor = node;<span class="comment">// 初始标记node的祖先为自己</span></div><div class="line"><span class="keyword">for</span> (TreeNode child : node.children) &#123;</div><div class="line">tarjan(child, queryList);<span class="comment">// 深度遍历</span></div><div class="line">join(child, node);<span class="comment">// 将子节点的祖先修改为node</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">node.searched = <span class="keyword">true</span>;<span class="comment">// 标记node已被访问</span></div><div class="line"><span class="comment">// 遍历查询条件，如果查询条件与node相关且两节点已被访问，基于并查集查找公共节点</span></div><div class="line"><span class="keyword">for</span> (Query query : queryList) &#123;</div><div class="line"><span class="keyword">if</span> (query.u == node) &#123;</div><div class="line"><span class="keyword">if</span> (query.v.searched) &#123;</div><div class="line">query.ancestor = find(query.v);</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (query.v == node) &#123;</div><div class="line"><span class="keyword">if</span> (query.u.searched) &#123;</div><div class="line">query.ancestor = find(query.u);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#####从git merge说起&lt;/p&gt;
&lt;p&gt;接着 &lt;a href=&quot;http://jemoii.github.io/blog/working-with-git/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用Git协同工作&lt;/a&gt; 中的内容，使用
      
    
    </summary>
    
      <category term="Coding Interview" scheme="https://g.hijkl.mn/categories/Coding-Interview/"/>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Coding-Interview/Java/"/>
    
      <category term="Note" scheme="https://g.hijkl.mn/categories/Coding-Interview/Java/Note/"/>
    
      <category term="Web" scheme="https://g.hijkl.mn/categories/Coding-Interview/Java/Note/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>对ConcurrentHashMap的解释</title>
    <link href="https://g.hijkl.mn/explanation-for-concurrenthashmap/"/>
    <id>https://g.hijkl.mn/explanation-for-concurrenthashmap/</id>
    <published>2016-02-26T16:00:00.000Z</published>
    <updated>2017-09-20T02:46:04.773Z</updated>
    
    <content type="html"><![CDATA[<p><code>java.util.concurrent.ConcurrentHashMap</code>整体为Segment数组，<code>concurrentLevel</code>为初始化参数，2^(sshift-1)^ &lt; concurrentLevel &lt;= 2^sshift^，Segment数组的大小ssize = 2^sshift^，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> sshift = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> ssize = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span> (ssize &lt; concurrencyLevel) &#123;</div><div class="line">++sshift;</div><div class="line">ssize &lt;&lt;= <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>ssize * (c - 1) &lt; initialCapacity &lt;= ssize * c</code>，每个数组元素Segment的容量cap与c的大小关系，和ssize与concurrentLevel的大小关系一致，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> c = initialCapacity / ssize;</div><div class="line"><span class="keyword">if</span> (c * ssize &lt; initialCapacity)</div><div class="line">++c;</div><div class="line"><span class="keyword">int</span> cap = MIN_SEGMENT_TABLE_CAPACITY;</div><div class="line"><span class="keyword">while</span> (cap &lt; c)</div><div class="line">cap &lt;&lt;= <span class="number">1</span>;</div></pre></td></tr></table></figure><p>初始化时，使用<code>UNsafe.putOrderedObject</code>将新建Segment存入数组的<code>0</code>下标处，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Class sc = Segment[].class;</div><div class="line">SBASE = UNSAFE.arrayBaseOffset(sc);</div><div class="line">ss = UNSAFE.arrayIndexScale(sc);</div><div class="line">SSHIFT = <span class="number">31</span> - Integer.numberOfLeadingZeros(ss);</div><div class="line"><span class="comment">// create segments and segments[0]</span></div><div class="line">Segment&lt;K,V&gt; s0 =</div><div class="line"><span class="keyword">new</span> Segment&lt;K,V&gt;(loadFactor, (<span class="keyword">int</span>)(cap * loadFactor),</div><div class="line">(HashEntry&lt;K,V&gt;[])<span class="keyword">new</span> HashEntry[cap]);</div><div class="line">Segment&lt;K,V&gt;[] ss = (Segment&lt;K,V&gt;[])<span class="keyword">new</span> Segment[ssize];</div><div class="line">UNSAFE.putOrderedObject(ss, SBASE, s0); <span class="comment">// ordered write of segments[0]</span></div></pre></td></tr></table></figure><p>使用<code>put</code>方法添加新的键值对时，仍然先计算key的哈希值，<code>hash</code>方法与<code>HashMap</code>中的<code>hash</code>方法类似，添加了<strong>再哈希</strong>步骤，其目的是为了减少哈希冲突，使元素能够均匀的分布在不同的Segment上，从而提高容器的存取效率，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> h = hashSeed;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((<span class="number">0</span> != h) &amp;&amp; (k <span class="keyword">instanceof</span> String)) &#123;</div><div class="line">    <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    h ^= k.hashCode();</div><div class="line"></div><div class="line">    <span class="comment">// Spread bits to regularize both segment and index locations,</span></div><div class="line">    <span class="comment">// using variant of single-word Wang/Jenkins hash.</span></div><div class="line">    h += (h &lt;&lt;  <span class="number">15</span>) ^ <span class="number">0xffffcd7d</span>;</div><div class="line">    h ^= (h &gt;&gt;&gt; <span class="number">10</span>);</div><div class="line">    h += (h &lt;&lt;   <span class="number">3</span>);</div><div class="line">    h ^= (h &gt;&gt;&gt;  <span class="number">6</span>);</div><div class="line">    h += (h &lt;&lt;   <span class="number">2</span>) + (h &lt;&lt; <span class="number">14</span>);</div><div class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>接着根据哈希值确定数组下标，这里的<code>segmentShift</code>和<code>segmentMask</code>是初始化时根据<code>sshift</code>和<code>ssize</code>确定的，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.segmentShift = <span class="number">32</span> - sshift;</div><div class="line"><span class="keyword">this</span>.segmentMask = ssize - <span class="number">1</span>;</div><div class="line"><span class="keyword">int</span> j = (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;</div></pre></td></tr></table></figure><p>反复确认<code>j</code>下标处的Segment是否为空，为空则依照<code>0</code>下标处的Segment新建Segment，使用<code>UNSAFE.compareAndSwapObject</code>更新<code>null</code>为新建Segment，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u))</div><div class="line">== <span class="keyword">null</span>) &#123;</div><div class="line"><span class="keyword">if</span> (UNSAFE.compareAndSwapObject(ss, u, <span class="keyword">null</span>, seg = s))</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>接下来的操作之前会尝试对该Segment加锁，Segment整体为HashEntry数组，每个数组元素为HashEntry链表，继续根据哈希值确定数组下标，遍历<code>index</code>下标处的HashEntry链表，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">HashEntry&lt;K,V&gt;[] tab = table;</div><div class="line"><span class="keyword">int</span> index = (tab.length - <span class="number">1</span>) &amp; hash;</div><div class="line">HashEntry&lt;K,V&gt; first = entryAt(tab, index);</div></pre></td></tr></table></figure><p>与HashMap中的比较逻辑一致，确定key是否存在，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ((k = e.key) == key || (e.hash == hash &amp;&amp; key.equals(k))) &#123;</div><div class="line"><span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>如果已存在，更新其对应的value；如果未存在，根据键值对新建HashEntry对象，使用<code>UNsafe.putOrderedObject</code>将新建HashEntry存入数组的<code>index</code>下标处。使用<code>get</code>方法获取键对应的值时，不需要对当前Segment加锁，类似地先确定Segment数组下标，再确定HashEntry数组下标，遍历链表，比较确定key是否存在，如果存在返回对应的value；不存在返回<code>null</code>。</p><p>文章中表述不清的地方可以进一步参考<a href="http://www.infoq.com/cn/articles/ConcurrentHashMap" target="_blank" rel="external">聊聊并发（四）——深入分析ConcurrentHashMap</a>，对于UNsafe类中的方法，可以参考<a href="http://www.cnblogs.com/mickole/articles/3757278.html" target="_blank" rel="external">Java中Unsafe类详解</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;java.util.concurrent.ConcurrentHashMap&lt;/code&gt;整体为Segment数组，&lt;code&gt;concurrentLevel&lt;/code&gt;为初始化参数，2^(sshift-1)^ &amp;lt; concurrentLevel &amp;lt
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Note" scheme="https://g.hijkl.mn/categories/Java/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>对Hashtable和HashMap的补充解释</title>
    <link href="https://g.hijkl.mn/explanation-for-hashtable-and-hashmap/"/>
    <id>https://g.hijkl.mn/explanation-for-hashtable-and-hashmap/</id>
    <published>2016-02-25T16:00:00.000Z</published>
    <updated>2017-09-20T02:46:04.770Z</updated>
    
    <content type="html"><![CDATA[<p><code>java.util.Hashtable</code>使用<code>synchronized</code>关键字实现线程安全，value不可以为空，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>key也不可为空，计算key的哈希值时会调用它的<code>hashCode</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</div><div class="line"><span class="comment">// hashSeed will be zero if alternative hashing is disabled.</span></div><div class="line">    <span class="keyword">return</span> hashSeed ^ k.hashCode();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>默认情况下<code>hashSeed</code>为0，即不使用<code>alternative hashing</code>，可以设置容量达到特定阀值时开始使用<code>alternative hashing</code>，这时，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hashSeed = sun.misc.Hashing.randomHashSeed(<span class="keyword">this</span>);</div></pre></td></tr></table></figure><p><code>Hashtable</code>整体为数组<code>tab</code>，每个数组元素为Entry链表，使用<code>put</code>方法添加新的键值对时，首先计算key的哈希值，根据哈希值确定数组下标，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</div></pre></td></tr></table></figure><p>接着遍历<code>index</code>处的Entry链表，通过下面的比较逻辑确定key是否存在，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</div><div class="line"><span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果已存在，更新其对应的value；如果未存在，根据键值对新建Entry对象，插入到当前Entry链表的首位。使用<code>get</code>方法获取键对应的值时，类似地确定数组下标，遍历链表，比较确定key是否存在，如果存在返回对应的value；不存在返回<code>null</code>。</p><p>容量大于设定的阀值时会调用<code>rehash</code>方法扩容，这时会重新计算每个键值对的数组下标及位置。</p><p><code>java.util.HashMap</code>与<code>Hashtable</code>类似，区别在于无<code>synchronized</code>关键字，<code>HashMap</code>中key、value可以为空，key为<code>null</code>的键值对保存在数组的<code>0</code>下标处。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> h = hashSeed;</div><div class="line"><span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;</div><div class="line"><span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</div><div class="line">&#125;</div><div class="line"></div><div class="line">h ^= k.hashCode();</div><div class="line"></div><div class="line"><span class="comment">// This function ensures that hashCodes that differ only by</span></div><div class="line"><span class="comment">// constant multiples at each bit position have a bounded</span></div><div class="line"><span class="comment">// number of collisions (approximately 8 at default load factor).</span></div><div class="line">h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</div><div class="line"><span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>HashMap</code>中确定key是否存在的比较逻辑，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (e.hash == hash &amp;&amp; </div><div class="line">((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</div><div class="line"><span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;java.util.Hashtable&lt;/code&gt;使用&lt;code&gt;synchronized&lt;/code&gt;关键字实现线程安全，value不可以为空，&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Note" scheme="https://g.hijkl.mn/categories/Java/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Git协同工作</title>
    <link href="https://g.hijkl.mn/working-with-git/"/>
    <id>https://g.hijkl.mn/working-with-git/</id>
    <published>2016-02-17T16:00:00.000Z</published>
    <updated>2017-09-20T02:46:04.767Z</updated>
    
    <content type="html"><![CDATA[<p>本文没有深层次的分析<strong>Git</strong>的工作原理，而是从实用角度，关注常用命令，简单分析了执行命令时发生的具体动作。</p><p>####建立本地仓库</p><p>从远端仓库克隆数据到本地仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/jemoii/Koenigspress.git Koenigspress</div></pre></td></tr></table></figure><p>执行<code>git clone</code>命令，默认将远端仓库命名为<code>origin</code>，</p><ul><li>拉取远端仓库的所有数据；</li><li>创建一个指向远端仓库<code>master</code>分支的指针，并在本地将其命名为<code>origin/master</code>；</li><li>创建一个跟踪<code>origin/master</code>的本地<code>master</code>分支。</li></ul><p>添加<code>-o away</code>选项，即执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone -o away https://github.com/jemoii/Koenigspress.git Koenigspress</div></pre></td></tr></table></figure><p>远端仓库被命名为<code>away</code>，相应的本地指向远端仓库<code>master</code>分支的指针被命名为<code>away/master</code></p><p>回到上一步，可以通过<code>git remote show origin</code>查看远端仓库的相关信息，这里的<code>origin</code>即远端仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ git remote</div><div class="line">origin</div><div class="line"></div><div class="line">$ git remote show origin</div><div class="line">* remote origin</div><div class="line">  Fetch URL: https://github.com/jemoii/Koenigspress.git</div><div class="line">  Push  URL: https://github.com/jemoii/Koenigspress.git</div><div class="line">  HEAD branch: master</div><div class="line">  Remote branch:</div><div class="line">    master tracked</div><div class="line">  Local branch configured for &apos;git pull&apos;:</div><div class="line">    master merges with remote master</div><div class="line">  Local ref configured for &apos;git push&apos;:</div><div class="line">    master pushes to master (up to date)</div></pre></td></tr></table></figure><p>####管理本地分支</p><p>现在执行<code>git branch optimize_theme</code>在<code>master</code>上新建<code>optimize_theme</code>分支，执行<code>git checkout optimize_theme</code>切换到<code>optimize_theme</code>分支上。</p><p>可以使用<code>git checkout -b optimize_theme</code>合并上述两步操作，执行<code>git branch</code>显示本地仓库分支列表，<code>*</code>标识当前位于<code>optimize_theme</code>分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b optimize_theme</div><div class="line">Switched to a new branch &apos;optimize_theme&apos;</div><div class="line"></div><div class="line">$ git branch</div><div class="line">  master</div><div class="line">* optimize_theme</div></pre></td></tr></table></figure><p>####提交更新</p><p>修改文件后，执行<code>git add .</code>将修改内容添加到<code>暂存区</code>，接着执行<code>git commit -m &#39;提交主题优化&#39;</code>将修改内容提交到<code>本地仓库</code>。</p><p>可以使用<code>git commit -a -m &#39;提交主题优化&#39;</code>合并上述两步操作。</p><p>现在使用<code>git push origin optimize_theme</code>将修改内容推送到远端仓库，远端仓库新建分支<code>optimize</code>保存修改内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git push origin optimize_theme</div><div class="line">Username for &apos;https://github.com&apos;: jemoii</div><div class="line">Password for &apos;https://jemoii@github.com&apos;:</div><div class="line">Total 0 (delta 0), reused 0 (delta 0)</div><div class="line">To https://github.com/jemoii/Koenigspress.git</div><div class="line"> * [new branch]      optimize_theme -&gt; optimize_theme</div></pre></td></tr></table></figure><p>现在执行<code>git remote show origin</code>查看远端仓库信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ git remote show origin</div><div class="line">* remote origin</div><div class="line">  Fetch URL: https://github.com/jemoii/Koenigspress.git</div><div class="line">  Push  URL: https://github.com/jemoii/Koenigspress.git</div><div class="line">  HEAD branch: master</div><div class="line">  Remote branches:</div><div class="line">    master         tracked</div><div class="line">    optimize_theme tracked</div><div class="line">  Local branch configured for &apos;git pull&apos;:</div><div class="line">    master merges with remote master</div><div class="line">  Local refs configured for &apos;git push&apos;:</div><div class="line">    master         pushes to master         (up to date)</div><div class="line">    optimize_theme pushes to optimize_theme (up to date)</div></pre></td></tr></table></figure><p>可以看到除了<code>master</code>分支，现在本地分支<code>optimize_theme</code>跟踪<code>origin/optimize_theme</code>。</p><p>####更新本地仓库</p><p>如果有另外一个<code>协同者</code>与我们一样克隆了远端仓库的数据到他的本地仓库，新建<code>fix_bug</code>分支，类似的将修改内容推送到远端仓库，且在我们执行<code>git push</code>前将修改内容合并到远端仓库的<code>master</code>分支，现在远端仓库<code>master</code>分支上的内容与我们执行<code>git clone</code>时相比发生了变化，我们再执行<code>git push</code>时会提示需要先将<code>协同者</code>的修改内容合并到我们的分支上。</p><p>首先执行<code>git checkout master</code>切换到<code>master</code>分支，执行<code>git fetch origin</code>，</p><ul><li>从远端仓库获取本地仓库没有的数据，移动<code>origin/master</code>指针指向更新后的位置；</li><li>创建一个指向远端仓库<code>fix_bug</code>分支的指针，并在本地将其命名为<code>origin/fix_bug</code>，本地不会新建<code>fix_bug</code>分支，只创建不可编辑的<code>origin/fix_bug</code>指针；</li></ul><p>现在执行<code>git merge origin/master</code>将更新的数据合并到本地仓库的<code>master</code>分支，接着执行<code>git checkout optimize_theme</code>重新切换到<code>optimize_theme</code>分支，执行<code>git merge master</code>将更新的数据合并到本地仓库的<code>optimize_theme</code>分支。</p><p>现在执行<code>git push origin optimize_theme</code>可以将我们的修改内容推送到远端仓库。</p><p>回到上一步，在<code>master</code>分支上使用<code>git pull</code>可以合并<code>git fetch origin</code>、<code>git merge origin/master</code>两步操作。</p><p><em>关于<code>git merge</code></em></p><p>####附</p><p>协同开发中创建工作分支的两种方式，第一种是前面提到的在本地仓库新建工作分支，执行<code>git push</code>时在远端仓库创建对应的工作分支；另一种是在远端仓库新建工作分支，执行<code>新建/更新</code>时在本地仓库创建指向远端仓库工作分支的指针，接着执行类似如下的命令，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b fix_bug origin/fix_bug</div></pre></td></tr></table></figure><p>在本地仓库创建<code>fix_bug</code>分支，跟踪<code>origin/fix_bug</code>，执行结束后切换到<code>fix_bug</code>分支。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文没有深层次的分析&lt;strong&gt;Git&lt;/strong&gt;的工作原理，而是从实用角度，关注常用命令，简单分析了执行命令时发生的具体动作。&lt;/p&gt;
&lt;p&gt;####建立本地仓库&lt;/p&gt;
&lt;p&gt;从远端仓库克隆数据到本地仓库&lt;/p&gt;
&lt;figure class=&quot;highligh
      
    
    </summary>
    
      <category term="Web" scheme="https://g.hijkl.mn/categories/Web/"/>
    
      <category term="Note" scheme="https://g.hijkl.mn/categories/Web/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>让CAS服务端跑起来</title>
    <link href="https://g.hijkl.mn/cas-server/"/>
    <id>https://g.hijkl.mn/cas-server/</id>
    <published>2015-12-10T16:00:00.000Z</published>
    <updated>2017-09-20T02:46:04.764Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料：<a href="http://my.oschina.net/huangyong/blog/198109" target="_blank" rel="external">安装 CAS 服务器</a></p><p>####注释</p><p>#####1、下载方式</p><p>在<a href="http://central.maven.org/maven2/org/jasig/cas/cas-server-webapp/" target="_blank" rel="external">http://central.maven.org/maven2/org/jasig/cas/cas-server-webapp/</a>页面选择合适的版本，下载对应目录下的cas-server-webapp-version.war。</p><p>#####2、初始登录</p><p>在/WEB-INF/deployerConfigContext.xml中的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"primaryAuthenticationHandler"</span> <span class="attr">class</span>=<span class="string">"org.jasig.cas.authentication.AcceptUsersAuthenticationHandler"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"users"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"casuser"</span> <span class="attr">value</span>=<span class="string">"Mellon"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p><p>配置了初始认证方式，这里的username/password即casuser/Mellon。</p><p>#####修改认证方式</p><p>######配置CAS服务端通过查询数据库的方式认证用户。</p><p>首先与Spring应用一样配置数据库，这里使用的是PostgreSQL数据库。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"casDataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"org.postgresql.Driver"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:postgresql://localhost:5432/jemoii"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"postgres"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"-1"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure><p>######建立新的认证方式jdbcAuthenticationHandler，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcAuthenticationHandler"</span> <span class="attr">class</span>=<span class="string">"org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"casDataSource"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sql"</span> <span class="attr">value</span>=<span class="string">"select password from user_info where email = ?"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"passwordEncoder"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"me.voler.cas.AddSaltPasswordEncoder"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>dataSource属性即前面配置的数据库；</li><li>sql属性是一条SQL语句，功能即根据登录使用的username查询password，根据实际的table做相应的修改；</li><li>passwordEncoder属性是实现了org.jasig.cas.authentication.handler.PasswordEncoder接口的Bean。</li></ul><p>CAS本身提供了org.jasig.cas.authentication.handler.DefaultPasswordEncoder、org.jasig.cas.authentication.handler.PlainTextPasswordEncoder两种实现，这里根据实际的加密方式新建了me.voler.cas.AddSaltPasswordEncoder，即在rawPassword后面拼接自定义PASSWORD_SALT后再使用MD5加密。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> me.voler.cas;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.jasig.cas.authentication.handler.DefaultPasswordEncoder;</div><div class="line"><span class="keyword">import</span> org.jasig.cas.authentication.handler.PasswordEncoder;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddSaltPasswordEncoder</span> <span class="keyword">implements</span> <span class="title">PasswordEncoder</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD_SALT = <span class="string">"xx"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        DefaultPasswordEncoder encoder = <span class="keyword">new</span> DefaultPasswordEncoder(<span class="string">"MD5"</span>);</div><div class="line">        <span class="keyword">return</span> encoder.encode(password + PASSWORD_SALT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>######应用新的认证方式jdbcAuthenticationHandler</p><p>将deployerConfigContext.xml中id为authenticationManager的Bean的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key-ref</span>=<span class="string">"proxyAuthenticationHandler"</span> <span class="attr">value-ref</span>=<span class="string">"proxyPrincipalResolver"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key-ref</span>=<span class="string">"primaryAuthenticationHandler"</span> <span class="attr">value-ref</span>=<span class="string">"primaryPrincipalResolver"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div></pre></td></tr></table></figure></p><p>修改为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key-ref</span>=<span class="string">"proxyAuthenticationHandler"</span> <span class="attr">value-ref</span>=<span class="string">"proxyPrincipalResolver"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key-ref</span>=<span class="string">"jdbcAuthenticationHandler"</span> <span class="attr">value-ref</span>=<span class="string">"primaryPrincipalResolver"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div></pre></td></tr></table></figure><p>添加修改认证方式依赖的jar，在/WEB-INF/lib目录下添加</p><ul><li>commons-pool-version.jar</li><li>commons-dbcp-version.jar</li><li>cas-server-support-jdbc-version.jar</li></ul><p>现在可以使用数据库中的username/password登录CAS服务端。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考资料：&lt;a href=&quot;http://my.oschina.net/huangyong/blog/198109&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;安装 CAS 服务器&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;####注释&lt;/p&gt;
&lt;p&gt;#####1、下载方式
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Web" scheme="https://g.hijkl.mn/categories/Java/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>Apache POI使用示例</title>
    <link href="https://g.hijkl.mn/apache-poi-examples/"/>
    <id>https://g.hijkl.mn/apache-poi-examples/</id>
    <published>2015-12-04T16:00:00.000Z</published>
    <updated>2017-09-20T02:46:04.761Z</updated>
    
    <content type="html"><![CDATA[<p>读取记事本（txt）中的内容时，一直出现乱码，原因在于记事本的默认编码是<code>GBK</code>，不是<code>UTF-8</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> me.voler.jechat.core;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.HSSFWorkbook;</div><div class="line"><span class="keyword">import</span> org.apache.poi.hwpf.extractor.WordExtractor;</div><div class="line"><span class="keyword">import</span> org.apache.poi.openxml4j.exceptions.InvalidFormatException;</div><div class="line"><span class="keyword">import</span> org.apache.poi.openxml4j.exceptions.OpenXML4JException;</div><div class="line"><span class="keyword">import</span> org.apache.poi.openxml4j.opc.OPCPackage;</div><div class="line"><span class="keyword">import</span> org.apache.poi.poifs.filesystem.POIFSFileSystem;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.extractor.ExcelExtractor;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.extractor.XSSFExcelExtractor;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xwpf.extractor.XWPFWordExtractor;</div><div class="line"><span class="keyword">import</span> org.apache.xmlbeans.XmlException;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 支持取.txt、.doc、.docx、.xls、.xlsx，5种格式文档的内容，以字符串的形式返回。</span></div><div class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> http://poi.apache.org&#125;</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocumentExtraction</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 取微软记事本中的内容，以字符串的形式返回。记事本中内容的编码为GBK</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">txt2String</span><span class="params">(File file)</span> </span>&#123;</div><div class="line">        StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            InputStreamReader input = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(file), <span class="string">"GBK"</span>);</div><div class="line">            BufferedReader reader = <span class="keyword">new</span> BufferedReader(input);</div><div class="line"></div><div class="line">            String line = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">                buffer.append(line).append(<span class="string">'\n'</span>);</div><div class="line">            &#125;</div><div class="line">            reader.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> buffer.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 取Excel xlsx中的内容，以字符串的形式返回。&#123;<span class="doctag">@link</span> http://poi.apache.org&#125;</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"resource"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">xlsx2String</span><span class="params">(File file)</span> </span>&#123;</div><div class="line"></div><div class="line">        XSSFWorkbook xlsxwb = <span class="keyword">new</span> XSSFWorkbook();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            OPCPackage pkg = OPCPackage.open(<span class="keyword">new</span> FileInputStream(file));</div><div class="line">            xlsxwb = <span class="keyword">new</span> XSSFWorkbook(pkg);</div><div class="line">        &#125; <span class="keyword">catch</span> (InvalidFormatException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ExcelExtractor extractor = <span class="keyword">new</span> XSSFExcelExtractor(xlsxwb);</div><div class="line">        extractor.setFormulasNotResults(<span class="keyword">true</span>);</div><div class="line">        extractor.setIncludeSheetNames(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> extractor.getText();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 取Excel xls中的内容，以字符串的形式返回。&#123;<span class="doctag">@link</span> http://poi.apache.org&#125;</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"resource"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">xls2String</span><span class="params">(File file)</span> </span>&#123;</div><div class="line"></div><div class="line">        HSSFWorkbook xlswb = <span class="keyword">new</span> HSSFWorkbook();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            POIFSFileSystem fileSystem = <span class="keyword">new</span> POIFSFileSystem(<span class="keyword">new</span> FileInputStream(file));</div><div class="line">            xlswb = <span class="keyword">new</span> HSSFWorkbook(fileSystem);</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ExcelExtractor extractor = <span class="keyword">new</span> org.apache.poi.hssf.extractor.ExcelExtractor(xlswb);</div><div class="line">        extractor.setFormulasNotResults(<span class="keyword">true</span>);</div><div class="line">        extractor.setIncludeSheetNames(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> extractor.getText();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 取Word doc中的内容，以字符串的形式返回。&#123;<span class="doctag">@link</span> http://poi.apache.org&#125;</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">doc2String</span><span class="params">(File file)</span> </span>&#123;</div><div class="line">        StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</div><div class="line"></div><div class="line">        WordExtractor extractor = <span class="keyword">null</span>;</div><div class="line">        POIFSFileSystem fileSystem;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            fileSystem = <span class="keyword">new</span> POIFSFileSystem(<span class="keyword">new</span> FileInputStream(file));</div><div class="line">            extractor = <span class="keyword">new</span> WordExtractor(fileSystem);</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        String[] paragraphText = extractor.getParagraphText();</div><div class="line">        <span class="keyword">for</span> (String paragraph : paragraphText) &#123;</div><div class="line">            buffer.append(paragraph);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> buffer.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 取Word docx中的内容，以字符串的形式返回。&#123;<span class="doctag">@link</span> http://poi.apache.org&#125;</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">docx2String</span><span class="params">(File file)</span> </span>&#123;</div><div class="line"></div><div class="line">        XWPFWordExtractor extractor = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            OPCPackage pkg = OPCPackage.open(<span class="keyword">new</span> FileInputStream(file));</div><div class="line">            extractor = <span class="keyword">new</span> XWPFWordExtractor(pkg);</div><div class="line">        &#125; <span class="keyword">catch</span> (InvalidFormatException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (XmlException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (OpenXML4JException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> extractor.getText();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>pom.xml中的依赖包配置，<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="comment">&lt;!-- xls --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- doc --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-scratchpad<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- xlsx docx --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;读取记事本（txt）中的内容时，一直出现乱码，原因在于记事本的默认编码是&lt;code&gt;GBK&lt;/code&gt;，不是&lt;code&gt;UTF-8&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="POI" scheme="https://g.hijkl.mn/categories/Java/POI/"/>
    
      <category term="Note" scheme="https://g.hijkl.mn/categories/Java/POI/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Commons Email发送邮件以及与Spring的结合</title>
    <link href="https://g.hijkl.mn/commons-email-and-spring/"/>
    <id>https://g.hijkl.mn/commons-email-and-spring/</id>
    <published>2015-12-03T16:00:00.000Z</published>
    <updated>2017-09-20T02:46:04.758Z</updated>
    
    <content type="html"><![CDATA[<p>使用Maven构建项目，在pom.xml中添加依赖包，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-email<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure><p>参考<a href="http://commons.apache.org/proper/commons-email/userguide.html" target="_blank" rel="external">User guide</a>，基于QQ邮箱发送文本邮件，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    Email email = <span class="keyword">new</span> SimpleEmail();</div><div class="line">    <span class="comment">// 连接参数配置</span></div><div class="line">    email.setHostName(<span class="string">"smtp.qq.com"</span>);</div><div class="line">    email.setSmtpPort(<span class="number">465</span>);</div><div class="line">    email.setAuthenticator(<span class="keyword">new</span> DefaultAuthenticator(<span class="string">"QQ No"</span>, <span class="string">"QQ Password"</span>);</div><div class="line">    email.setSSLOnConnect(<span class="keyword">true</span>);</div><div class="line">    <span class="comment">// 邮件相关内容</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        email.setFrom(<span class="string">"from@qq.com"</span>);</div><div class="line">        email.setMsg(<span class="string">"Hello, world!"</span>);</div><div class="line">        email.addTo(<span class="string">"to@example.com"</span>);</div><div class="line">        email.send();</div><div class="line">    &#125; <span class="keyword">catch</span> (EmailException e) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>与使用JDBC连接数据库一样，前面的代码包含大量的模板操作，所以结合Spring，与JdbcTemplate类似，构建MailTemplate。在applicationContext-mail.xml中声明Bean，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans...</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span></span></div><div class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:mail.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"simpleMail"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.mail.SimpleEmail"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hostName"</span> <span class="attr">value</span>=<span class="string">"$&#123;me.mail.hostName&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"smtpPort"</span> <span class="attr">value</span>=<span class="string">"$&#123;me.mail.smtpPort&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"from"</span> <span class="attr">value</span>=<span class="string">"$&#123;me.mail.from&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticator"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.mail.DefaultAuthenticator"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"$&#123;me.mail.authenticator.userName&#125;"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"$&#123;me.mail.authenticator.password&#125;"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mailTemplate"</span> <span class="attr">class</span>=<span class="string">"me.voler.jechat.core.MailTemplate"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"simpleMail"</span> <span class="attr">ref</span>=<span class="string">"simpleMail"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure><p>将连接参数添加到mail.properties，me.voler.jechat.core.MailTemplate即构建的MailTemplate，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> me.voler.jechat.core;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.mail.EmailException;</div><div class="line"><span class="keyword">import</span> org.apache.commons.mail.SimpleEmail;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailTemplate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> SimpleEmail simpleMail;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg, String to)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.send(<span class="string">"【邮件】"</span>, msg, to);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> subject 邮件主题</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> msg 邮件正文</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> toList 收件人列表</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String subject, String msg, String... toList)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            simpleMail.setSubject(subject);</div><div class="line">            simpleMail.setMsg(msg);</div><div class="line">            simpleMail.addTo(toList);</div><div class="line"></div><div class="line">            simpleMail.setSSLOnConnect(<span class="keyword">true</span>);</div><div class="line">            simpleMail.send();</div><div class="line">        &#125; <span class="keyword">catch</span> (EmailException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> SimpleEmail <span class="title">getSimpleMail</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> simpleMail;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSimpleMail</span><span class="params">(SimpleEmail simpleMail)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.simpleMail = simpleMail;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用构建的MailTemplate发送文本邮件，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="meta">@Qualifier</span>(<span class="string">"mailTemplate"</span>)</div><div class="line"><span class="keyword">private</span> MailTemplate mailTemplate;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendEmptyMail</span><span class="params">()</span> </span>&#123;</div><div class="line">    mailTemplate.send(<span class="string">"中文测试，English Test."</span>, <span class="string">"to@example.com"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>SimpleEmail的父类的属性sslOnConnect的set方法名为setSSLOnConnect，如果直接在applicationContext-mail.xml的<code>simpleMail</code>Bean下配置<code>&lt;property name=&quot;sslOnConnect&quot; value=&quot;${me.mail.sslOnConnect}&quot; /&gt;</code>会提示</p><blockquote><p>   Bean property is not writable or has an invalid setter method</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用Maven构建项目，在pom.xml中添加依赖包，&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;lin
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Spring" scheme="https://g.hijkl.mn/categories/Java/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>使用DWR实现消息推送</title>
    <link href="https://g.hijkl.mn/reverse-ajax/"/>
    <id>https://g.hijkl.mn/reverse-ajax/</id>
    <published>2015-11-20T16:00:00.000Z</published>
    <updated>2017-09-20T04:32:42.637Z</updated>
    
    <content type="html"><![CDATA[<p>dwr支持如下3种模式的消息推送：</p><ul><li>Polling，浏览器每隔一段时间向服务器发出请求，查看是否有更新的内容；</li><li>Comet，</li><li>Piggyback，服务器等待浏览器下一次发出请求时，将更新的内容合并到响应一起返回。</li></ul><p>默认使用Piggyback模式，使用Polling/Comet模式需要额外的配置。</p><blockquote><p>   <a href="http://jemoii.github.io/blog/getting-started-with-dwr/" target="_blank" rel="external">DWR简单入门</a>介绍了基于DWR构建项目。</p></blockquote><p>使用Maven构建项目，在pom.xml中添加如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- Please consider setting up your own on-site repository proxy such </span></div><div class="line"><span class="comment">as with Nexus and pointing the url element below at that instead --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>oss-sonatype-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>OSS Sonatype Snapshots Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://oss.sonatype.org/content/repositories/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">releases</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.directwebremoting<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dwr<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 使用Tomcat需要额外添加的依赖包 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>catalina<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.44<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure><p>使用的容器是Tomcat（与使用Jetty的配置不同），在web.xml中添加如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dwr-invoker<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.directwebremoting.server.tomcat.DwrCometProcessor<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 2.0 RC3之前的参数名为pollAndCometEnabled --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>activeReverseAjaxEnabled<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>maxWaitAfterWrite<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dwr-invoker<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/dwr/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure><p>dwr.xml中的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE dwr PUBLIC</span></div><div class="line"><span class="meta">    "-//GetAhead Limited//DTD Direct Web Remoting 3.0//EN"</span></div><div class="line"><span class="meta">    "http://getahead.org/dwr/dwr30.dtd"&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dwr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">allow</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">create</span> <span class="attr">creator</span>=<span class="string">"new"</span> <span class="attr">javascript</span>=<span class="string">"messagePush"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"class"</span> <span class="attr">value</span>=<span class="string">"me.util.MessagePushUtil"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">create</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">allow</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dwr</span>&gt;</span></div></pre></td></tr></table></figure><p>采用的调试方式是，打开接收页面（receiver.jsp）和发送页面（sender.jsp），在发送页面将消息发送至服务端，由服务端将消息推送至接受页面。JSP文件中使用<code>JQuery</code>替代了dwr提供的<code>&lt;script type=&#39;text/javascript&#39; src=&#39;/dwr/util.js&#39;&gt;&lt;/script&gt;</code>。</p><p>接收页面（receiver.jsp）<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></div><div class="line">pageEncoding=<span class="string">"UTF-8"</span>%&gt;</div><div class="line">&lt;%@ page isELIgnored=<span class="string">"false"</span>%&gt;</div><div class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</div><div class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"/css/easyui.css"</span>&gt;</div><div class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"/css/demo.css"</span>&gt;</div><div class="line">&lt;script type="text/javascript" src="/js/jquery.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script type="text/javascript" src="/js/jquery.easyui.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script type='text/javascript' src='/dwr/engine.js'&gt;&lt;/script&gt;</div><div class="line">&lt;script type='text/javascript' src='/dwr/interface/messagePush.js'&gt;&lt;/script&gt;</div><div class="line">&lt;title&gt;消息推送&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h2&gt;接受消息推送&lt;/h2&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;script&gt;</div><div class="line">$(function() &#123;</div><div class="line">dwr.engine.setActiveReverseAjax(<span class="keyword">true</span>);</div><div class="line">        dwr.engine.setNotifyServerOnPageUnload(<span class="keyword">true</span>);</div><div class="line">        messagePush.onPageLoad(<span class="string">'&#123;sessionScope.uid&#125;'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">    <span class="function">function <span class="title">showMessage</span><span class="params">(autoMessage)</span> </span>&#123;</div><div class="line">$.messager.show(&#123;</div><div class="line">title : <span class="string">"消息推送"</span>,</div><div class="line">msg : autoMessage,</div><div class="line">showType : <span class="string">'slide'</span>,</div><div class="line">timeout : <span class="number">5000</span></div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p><p>发送页面（sender.jsp）<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></div><div class="line">pageEncoding=<span class="string">"UTF-8"</span>%&gt;</div><div class="line">&lt;%@ page isELIgnored=<span class="string">"false"</span>%&gt;</div><div class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</div><div class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"./css/easyui.css"</span>&gt;</div><div class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"./css/demo.css"</span>&gt;</div><div class="line">&lt;script type="text/javascript" src="./js/jquery.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script type="text/javascript" src="./js/jquery.easyui.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script type='text/javascript' src='/dwr/engine.js'&gt;&lt;/script&gt;</div><div class="line">&lt;script type='text/javascript' src='/dwr/interface/messagePush.js'&gt;&lt;/script&gt;</div><div class="line">&lt;title&gt;消息推送&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h2&gt;发送消息推送&lt;/h2&gt;</div><div class="line">&lt;div id=<span class="string">"p"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"easyui-panel"</span></div><div class="line">style=<span class="string">"width: 400px; height: 100x; padding: 10px;"</span>&gt;</div><div class="line">&lt;div&gt;</div><div class="line">ID：&lt;input id=<span class="string">"uid"</span> style=<span class="string">"width: 40%; height: 25px"</span>&gt;消息：&lt;input</div><div class="line">id=<span class="string">"msg"</span> style=<span class="string">"width: 40%; height: 25px"</span>&gt;&lt;br&gt; &lt;br&gt; &lt;a</div><div class="line">href=<span class="string">"javascript:void(0)"</span> style=<span class="string">"width: 30%; height: 25px"</span></div><div class="line">onclick="sendMsg()"&gt;发送&lt;/a&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;script&gt;</div><div class="line"><span class="function">function <span class="title">sendMsg</span><span class="params">()</span> </span>&#123;</div><div class="line">messagePush.sendMessageAuto($(<span class="string">'#uid'</span>).val(), $(<span class="string">'#msg'</span>).val());</div><div class="line">$(<span class="string">'#uid'</span>).val(<span class="string">''</span>);</div><div class="line">$(<span class="string">'#msg'</span>).val(<span class="string">''</span>);</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p><p>me/util/MessagePushUtil.java中的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> me.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Collection;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</div><div class="line"><span class="keyword">import</span> org.directwebremoting.Browser;</div><div class="line"><span class="keyword">import</span> org.directwebremoting.ScriptBuffer;</div><div class="line"><span class="keyword">import</span> org.directwebremoting.ScriptSession;</div><div class="line"><span class="keyword">import</span> org.directwebremoting.ScriptSessionFilter;</div><div class="line"><span class="keyword">import</span> org.directwebremoting.WebContextFactory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> me.message.MessagePushServlet;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessagePushUtil</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = Logger.getLogger(MessagePushUtil.class);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageLoad</span><span class="params">(String userID)</span> </span>&#123;</div><div class="line"></div><div class="line">ScriptSession scriptSession = WebContextFactory.get().getScriptSession();</div><div class="line"><span class="comment">// 工厂方法get()返回WebContext实例，通过WebContext获取servlet参数</span></div><div class="line"><span class="comment">// ScriptSession与HttpSession类似</span></div><div class="line">scriptSession.setAttribute(<span class="string">"uid"</span>, userID);</div><div class="line"></div><div class="line">MessagePushServlet mpServlet = <span class="keyword">new</span> MessagePushServlet();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">mpServlet.init();</div><div class="line">LOGGER.info(String.format(<span class="string">"消息推送初始化成功，uid：%s"</span>, userID));</div><div class="line">&#125; <span class="keyword">catch</span> (ServletException e) &#123;</div><div class="line">LOGGER.error(String.format(<span class="string">"消息推送初始化错误，uid：%s"</span>, userID));</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 根据userID向指定用户推送消息</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> userID</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> autoMessage</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageAuto</span><span class="params">(String userID, String autoMessage)</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">final</span> String uid = userID;</div><div class="line"><span class="keyword">final</span> String message = autoMessage;</div><div class="line"></div><div class="line">Browser.withAllSessionsFiltered(<span class="keyword">new</span> ScriptSessionFilter() &#123;</div><div class="line"><span class="comment">// 实现过滤器中的match()方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(ScriptSession session)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (session.getAttribute(<span class="string">"uid"</span>) == <span class="keyword">null</span>)</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="keyword">return</span> (session.getAttribute(<span class="string">"uid"</span>)).equals(uid);</div><div class="line">&#125;</div><div class="line">&#125;, <span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> ScriptBuffer script = <span class="keyword">new</span> ScriptBuffer();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">// 调用JSP中定义的showMessage()方法，实现消息的前端显示</span></div><div class="line">script.appendCall(<span class="string">"showMessage"</span>, message);</div><div class="line">Collection&lt;ScriptSession&gt; sessions = Browser.getTargetSessions();</div><div class="line"><span class="keyword">for</span> (ScriptSession scriptSession : sessions) &#123;</div><div class="line">scriptSession.addScript(script);</div><div class="line">&#125;</div><div class="line">LOGGER.info(String.format(<span class="string">"向用户推送消息，uid：%s，message：%s"</span>, uid, message));</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>me/message/MessagePushServlet.java中的内容，覆盖DwrServlet中的init()方法实现ScriptSession监听器，在页面中加入engine.js时，ScriptSession创建，默认由org.directwebremoting.impl.DefaultScriptSessionManager管理，当发生unload事件时，DefaultScriptSessionManager会被通知销毁ScriptSession。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> me.message;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</div><div class="line"><span class="keyword">import</span> org.directwebremoting.Container;</div><div class="line"><span class="keyword">import</span> org.directwebremoting.ServerContextFactory;</div><div class="line"><span class="keyword">import</span> org.directwebremoting.WebContextFactory;</div><div class="line"><span class="keyword">import</span> org.directwebremoting.event.ScriptSessionEvent;</div><div class="line"><span class="keyword">import</span> org.directwebremoting.event.ScriptSessionListener;</div><div class="line"><span class="keyword">import</span> org.directwebremoting.extend.ScriptSessionManager;</div><div class="line"><span class="keyword">import</span> org.directwebremoting.servlet.DwrServlet;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessagePushServlet</span> <span class="keyword">extends</span> <span class="title">DwrServlet</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4298890285665323894L</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = Logger.getLogger(MessagePushServlet.class);</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line"></div><div class="line">Container container = ServerContextFactory.get().getContainer();</div><div class="line"><span class="comment">// 工厂方法get()返回ServerContext实例</span></div><div class="line">ScriptSessionManager manager = container.getBean(ScriptSessionManager.class);</div><div class="line">ScriptSessionListener listener = <span class="keyword">new</span> ScriptSessionListener() &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(ScriptSessionEvent ev)</span> </span>&#123;</div><div class="line">HttpSession session = WebContextFactory.get().getSession();</div><div class="line"></div><div class="line">String userID = (String) session.getAttribute(<span class="string">"uid"</span>);</div><div class="line">LOGGER.info(<span class="string">"a ScriptSession is created"</span>);</div><div class="line">ev.getSession().setAttribute(<span class="string">"uid"</span>, userID);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(ScriptSessionEvent ev)</span> </span>&#123;</div><div class="line">LOGGER.info(<span class="string">"a ScriptSession is distroyed"</span>);</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">manager.addScriptSessionListener(listener);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行前还要修改Tomcat下的server.xml中的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line"><span class="comment">&lt;Connector connectionTimeout="20000" port="8080" </span></div><div class="line"><span class="comment">protocol="HTTP/1.1" redirectPort="8443"/&gt;</span></div><div class="line"><span class="comment">--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">port</span>=<span class="string">"8080"</span></span></div><div class="line"><span class="tag"><span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span>/&gt;</span></div></pre></td></tr></table></figure><p>运行项目，打开<a href="http://localhost:8080/receiver.jsp" target="_blank" rel="external">http://localhost:8080/receiver.jsp</a>，页面加载时，调用</p><blockquote><p>   messagePush.onPageLoad(‘&lt;%=session.getAttribute(“uid”)%&gt;’);</p></blockquote><p>调用服务端的me.util.MessagePushUtil.onPageLoad(String userID)方法，初始化成功（可以使用字符串，如”123456789”,替换’&lt;%=session.getAttribute(“uid”)%&gt;’）。打开<a href="http://localhost:8080/sender.jsp" target="_blank" rel="external">http://localhost:8080/sender.jsp</a>，填写刚才的uid（123456789）和消息内容，点击发送，调用</p><blockquote><p>   messagePush.sendMessageAuto($(‘#uid’).val(), $(‘#msg’).val());</p></blockquote><p>调用服务端的me.util.MessagePushUtil.sendMessageAuto(String userID, String autoMessage)方法，调用receiver.jsp的showMessage(autoMessage)方法，可以在接收页面看到来自服务端推送的消息。</p><p>页面预览如下，</p><p><img src="https://moetu.fastmirror.org/images/2017/09/20/dwr-sender9ad2850a84ecc3bf.png" alt="发送页面"><br><img src="https://moetu.fastmirror.org/images/2017/09/20/dwr-receivercd5d8338dff261be.png" alt="接收页面"></p><p>除此之外，在log4j.properties中添加类似的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">log4j.rootCategory=INFO, console</div><div class="line">log4j.category.org.directwebremoting.log=INFO, dwr, console</div><div class="line"></div><div class="line">log4j.appender.console=org.apache.log4j.ConsoleAppender</div><div class="line">log4j.appender.console.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.console.layout.ConversionPattern=[%5p] %d&#123;yyyy-MM-dd HH:mm:ss&#125; %l - %m%n</div><div class="line"></div><div class="line">log4j.appender.dwr=org.apache.log4j.RollingFileAppender</div><div class="line">log4j.appender.dwr.File=../logs/dwr.log</div><div class="line">log4j.appender.dwr.MaxFileSize=100KB</div><div class="line">log4j.appender.dwr.MaxBackupIndex=1</div><div class="line">log4j.appender.dwr.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.dwr.layout.ConversionPattern=[%5p] %d&#123;yyyy-MM-dd HH:mm:ss&#125; %l - %m%n</div></pre></td></tr></table></figure><p>#####参考资料</p><p><a href="http://wang371134086.iteye.com/blog/1849716" target="_blank" rel="external">DWR3实现服务器端向客户端精确推送消息</a></p><p><a href="http://jemoii.github.io/blog/getting-started-with-dwr/" target="_blank" rel="external">DWR简单入门</a></p><p><a href="http://directwebremoting.org/dwr/documentation/reverse-ajax/index.html" target="_blank" rel="external">Reverse Ajax</a></p><p><a href="http://directwebremoting.org/dwr/documentation/server/logging.html" target="_blank" rel="external">Logging</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;dwr支持如下3种模式的消息推送：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Polling，浏览器每隔一段时间向服务器发出请求，查看是否有更新的内容；&lt;/li&gt;
&lt;li&gt;Comet，&lt;/li&gt;
&lt;li&gt;Piggyback，服务器等待浏览器下一次发出请求时，将更新的内容合并到响应一起返回。
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Ajax" scheme="https://g.hijkl.mn/categories/Java/Ajax/"/>
    
    
  </entry>
  
  <entry>
    <title>对Struts文档的注释 （三）</title>
    <link href="https://g.hijkl.mn/annotation-for-struts2-tags/"/>
    <id>https://g.hijkl.mn/annotation-for-struts2-tags/</id>
    <published>2015-05-28T05:16:00.000Z</published>
    <updated>2017-09-20T02:46:04.748Z</updated>
    
    <content type="html"><![CDATA[<p>本文是依照参考文档学习时的总结，参考文档原文：<a href="http://struts.apache.org/docs/using-struts-2-tags.html" target="_blank" rel="external">Using Struts 2 Tags</a>、<a href="http://struts.apache.org/docs/coding-struts-2-actions.html" target="_blank" rel="external">Coding Struts 2 Actions</a></p><p>#####Struts 2 url Tag</p><p>前面使用的<code>servlet-api-2.5</code>，而2.5中默认不支持EL，所以需要在index.jsp中添加，</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page isELIgnored=<span class="string">"false"</span>%&gt;</div></pre></td></tr></table></figure><p>为了方便与JSTL标签对比，在pom.xml中添加，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p><code>.jsp</code>中taglib指令，</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span>%&gt;</div><div class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</div></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;s:url action=<span class="string">"hello"</span> var=<span class="string">"helloLink"</span>&gt;</div><div class="line">&lt;s:param name="userName"&gt;Bruce Phillips&lt;/s:param&gt;</div><div class="line">&lt;/s:url&gt;</div><div class="line"></div><div class="line">&lt;c:url value=<span class="string">"hello.action"</span> var=<span class="string">"hello"</span>&gt;</div><div class="line">&lt;c:param name=<span class="string">"userName"</span> value=<span class="string">"Bruce Phillips"</span> /&gt;</div><div class="line">&lt;/c:url&gt;</div></pre></td></tr></table></figure><p>两者都会对URL编码，访问链接<code>${helloLink}</code>和<code>${hello}</code>均为<code>.../hello.action?userName=Bruce+Phillips</code>。</p><p>#####Struts 2 property tag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;s:property value=&quot;messageStore&quot; /&gt;</div></pre></td></tr></table></figure><p>如上使用property标签，返回MessageStore对象，默认调用其toString()方法，可以覆盖Object的toString()方法。</p><p>#####Processing Form Input In The Action Class</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;s:form action=<span class="string">"hello"</span>&gt;</div><div class="line">    &lt;s:textfield name=<span class="string">"userName"</span> label=<span class="string">"Your name"</span> /&gt;</div><div class="line">    &lt;s:submit value=<span class="string">"Submit"</span> /&gt;</div><div class="line">&lt;/s:form&gt;</div></pre></td></tr></table></figure><p>form标签得到的HTML源码为</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;form id=<span class="string">"hello"</span> name=<span class="string">"hello"</span> action=<span class="string">"/.../hello.action"</span> method=<span class="string">"post"</span>&gt;</div><div class="line">&lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">"wwFormTable"</span>&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td class="tdLabel"&gt;&lt;label for="hello_userName" class="label"&gt;Your name:&lt;/label&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;&lt;input type="text" name="userName" value="" id="hello_userName"/&gt;&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td colspan=<span class="string">"2"</span>&gt;&lt;div align=<span class="string">"right"</span>&gt;</div><div class="line">&lt;input type=<span class="string">"submit"</span> id=<span class="string">"hello_0"</span> value=<span class="string">"Submit"</span>/&gt;</div><div class="line">&lt;/div&gt;&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;/table&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure><p>在HelloWorldAction.java中添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> String userName;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> userName;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.userName = userName;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用<code>setUserName(String userName)</code>方法获得userName参数，类似于Servlet中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String userName = request.getParameter(<span class="string">"userName"</span>);</div></pre></td></tr></table></figure><p>如果未添加会提示类似错误，</p><blockquote><p>com.opensymphony.xwork2.util.logging.jdk.JdkLogger error<br>严重: Developer Notification (set struts.devMode to false to disable this message):<br>Unexpected Exception caught setting ‘userName’ on ‘class me.struts.ex.helloworld.action.HelloWorldAction: Error setting expression ‘userName’ with value [‘Bruce Phillips ‘, ]</p></blockquote><p>在HelloWorld.jsp中使用，</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;s:property value=<span class="string">"userName"</span> /&gt;</div></pre></td></tr></table></figure><p>可以直接获得userName参数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文是依照参考文档学习时的总结，参考文档原文：&lt;a href=&quot;http://struts.apache.org/docs/using-struts-2-tags.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using Struts 2 Tag
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Struts" scheme="https://g.hijkl.mn/categories/Java/Struts/"/>
    
    
  </entry>
  
  <entry>
    <title>Servlet3.0引入的注解</title>
    <link href="https://g.hijkl.mn/annotation-since-servlet3.0/"/>
    <id>https://g.hijkl.mn/annotation-since-servlet3.0/</id>
    <published>2015-05-27T16:00:00.000Z</published>
    <updated>2017-09-20T02:46:04.751Z</updated>
    
    <content type="html"><![CDATA[<p>Servlet3.0开始引入<code>annotation</code>用于部署，</p><ul><li>@WebServlet用于定义servlet，</li><li>@WebListener用于定义监听器（对于不同类型的监听器又有细分），</li><li>@WebFilter用于定义过滤器，</li><li>@initParams用于定义初始化参数，</li><li>……</li></ul><p>这里给出一个使用@WebServlet的例子，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebInitParam;</div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/annotation.do"</span>, initParams = &#123;</div><div class="line"><span class="meta">@WebInitParam</span>(name = <span class="string">"newPattern"</span>, value = <span class="string">"annotation"</span>),</div><div class="line"><span class="meta">@WebInitParam</span>(name = <span class="string">"oldPattern"</span>, value = <span class="string">"web.xml"</span>) &#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoreServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line"><span class="function"><span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">response.setContentType(<span class="string">"text/html"</span>);</div><div class="line">response.getWriter().print(</div><div class="line"><span class="string">"Using "</span> + getServletConfig().getInitParameter(<span class="string">"newPattern"</span>)</div><div class="line">+ <span class="string">" not "</span></div><div class="line">+ getServletConfig().getInitParameter(<span class="string">"oldPattern"</span>));</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>访问<code>...\annotation.do</code>，可以看到</p><blockquote><p>Using annotation not web.xml</p></blockquote><p>如果同时存在web.xml和注解，web.xml中指定的内容拥有更高的优先级。</p><p>前面@WebServlet指定了<code>me.annotation.web.CoreServlet</code>与<code>/annotation.do</code>的映射关系，相当于在web.xml中添加，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>me.annotation.web.CoreServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>me.annotation.web.CoreServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>newPattern<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>annotation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>oldPattern<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>web.xml<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>me.annotation.web.CoreServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/annotation.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure><p><code>&lt;servlet-name&gt;</code>值不同认定为不同的映射关系。</p><p>可以在web.xml添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">metadata-complete</span>&gt;</span>true<span class="tag">&lt;/<span class="name">metadata-complete</span>&gt;</span></div></pre></td></tr></table></figure><p>禁用注解，缺省或值为false即可以使用注解。</p><p>#####参考资料：</p><p><a href="https://www.jcp.org/en/jsr/detail?id=340" target="_blank" rel="external">JSR 340: Java Servlet 3.1 Specification</a></p><p><a href="http://docs.oracle.com/javaee/7/api/javax/servlet/annotation/package-summary.html" target="_blank" rel="external">Package javax.servlet.annotation</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Servlet3.0开始引入&lt;code&gt;annotation&lt;/code&gt;用于部署，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@WebServlet用于定义servlet，&lt;/li&gt;
&lt;li&gt;@WebListener用于定义监听器（对于不同类型的监听器又有细分），&lt;/li&gt;
&lt;li&gt;@W
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Servlet" scheme="https://g.hijkl.mn/categories/Java/Servlet/"/>
    
    
  </entry>
  
  <entry>
    <title>对Hibernate文档的注释（一）</title>
    <link href="https://g.hijkl.mn/annotation-for-hibernate-first-application/"/>
    <id>https://g.hijkl.mn/annotation-for-hibernate-first-application/</id>
    <published>2015-05-26T11:19:00.000Z</published>
    <updated>2017-09-20T04:31:59.678Z</updated>
    
    <content type="html"><![CDATA[<p>本文是依照参考文档学习时的总结，参考文档原文：<a href="http://docs.jboss.org/hibernate/orm/4.3/manual/en-US/html/ch01.html#tutorial-firstapp" target="_blank" rel="external">1.1. Part 1 - The first Hibernate Application</a></p><p>#####The mapping file</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></div><div class="line"><span class="meta">        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></div><div class="line"><span class="meta">        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"me.hibernate.ex.domain"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- all persistent entity classes need a mapping to a table in the SQL database --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Event"</span> <span class="attr">table</span>=<span class="string">"EVENTS"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- mapping the unique identifier property to the tables primary key --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"EVENT_ID"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"date"</span> <span class="attr">type</span>=<span class="string">"timestamp"</span> <span class="attr">column</span>=<span class="string">"EVENT_DATE"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- without the column attribute, Hibernate by default uses the property name as the column name --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"title"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></div></pre></td></tr></table></figure><p>映射文件<code>Event.hbm.xml</code>等同于<code>.sql</code>文件。</p><p>#####Hibernate configuration</p><p>文档中使用HSQLDB作为数据库，这里使用MySQL作为数据库，需要修改数据库连接设置，</p><pre><code class="xml">&lt;!-- Database connection settings --&gt;&lt;property name="connection.driver_class"&gt;com.mysql.jdbc.Driver&lt;/property&gt;&lt;property name="connection.url"&gt;jdbc:mysql://localhost/test&lt;/property&gt;&lt;!-- SQL dialect --&gt;&lt;property name="hibernate.dialect"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;</code></pre><p>同时添加依赖包<code>mysql-connector-java-bin.jar</code>。</p><p>#####Startup and helpers</p><p>文档中提供的代码与最新的<code>hibernate-core</code>不匹配，需要修改<code>buildSessionFactory()</code>方法中的try块为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">// Create the SessionFactory from hibernate.cfg.xml</span></div><div class="line">Configuration configuration = <span class="keyword">new</span> Configuration();</div><div class="line">configuration.configure();</div><div class="line">ServiceRegistry serviceRegistry = <span class="keyword">new</span> StandardServiceRegistryBuilder().applySettings(configuration.getProperties()).build();</div><div class="line"><span class="keyword">return</span> configuration.buildSessionFactory(serviceRegistry);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="http://www.journaldev.com/2897/solved-hibernateexception-access-to-dialectresolutioninfo-cannot-be-null-when-hibernate-dialect-not-set" target="_blank" rel="external">[Solved] HibernateException: Access to DialectResolutionInfo cannot be null when ‘hibernate.dialect’ not set</a>中给出了详细的说明。</p><p>#####Loading and storing objects</p><p>文档中提供的代码使用args参数，这里将main函数简化为，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">Session session = HibernateUtil.getSessionFactory().getCurrentSession();</div><div class="line">session.beginTransaction();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">Event theEvent = <span class="keyword">new</span> Event();</div><div class="line">theEvent.setTitle(<span class="string">"Event"</span>);</div><div class="line">theEvent.setDate(<span class="keyword">new</span> Date());</div><div class="line">session.save(theEvent);</div><div class="line"></div><div class="line">session.getTransaction().commit();</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="keyword">if</span> (session.beginTransaction() != <span class="keyword">null</span>)</div><div class="line">session.beginTransaction().rollback();</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line"><span class="comment">//session.close();</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用<code>getCurrentSession()</code>开始Session，在事务结束后，Hibernate会自动释放Session，如果使用<code>session.close();</code>会提示错误，</p><blockquote><p>Session was already closed</p></blockquote><p>如果使用文档中提供的代码，可以参考<a href="http://www.cnblogs.com/2010Freeze/articles/2345989.html" target="_blank" rel="external">Eclipse里如何给main函数里的args参数赋值</a>。</p><p>现在运行<code>EventManager.java</code>可以看到，</p><blockquote><p>Hibernate: insert into EVENTS (EVENT_DATE, title) values (?, ?)</p></blockquote><p>查询本地MySQL数据库，</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">mysql&gt; use test;</div><div class="line">Database changed</div><div class="line">mysql&gt; show tables;</div><div class="line">+<span class="comment">----------------+</span></div><div class="line">| Tables_in_test |</div><div class="line">+<span class="comment">----------------+</span></div><div class="line">| events         |</div><div class="line">+<span class="comment">----------------+</span></div><div class="line"></div><div class="line">mysql&gt; describe events;</div><div class="line">+<span class="comment">------------+--------------+------+-----+---------+----------------+</span></div><div class="line">| Field      | Type         | Null | Key | Default | Extra          |</div><div class="line">+<span class="comment">------------+--------------+------+-----+---------+----------------+</span></div><div class="line">| EVENT_ID   | bigint(20)   | NO   | PRI | NULL    | auto_increment |</div><div class="line">| EVENT_DATE | datetime     | YES  |     | NULL    |                |</div><div class="line">| title      | varchar(255) | YES  |     | NULL    |                |</div><div class="line">+<span class="comment">------------+--------------+------+-----+---------+----------------+</span></div><div class="line"></div><div class="line">mysql&gt;</div></pre></td></tr></table></figure><p>#####Class Configuration &amp; Interface SessionFactory（4.3）</p><p>创建<code>SessionFactory</code>时，<code>Configuration</code>实例允许应用指定即将使用的性质和映射文件，默认情况下使用<code>hibernate.properties</code>指定的性质。SessionFactry`是不可变的，不受Configuration变化的影响。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Configuration <span class="title">configure</span><span class="params">()</span> <span class="keyword">throws</span> HibernateException</span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 使用hibernate.cfg.xml指定的性质和映射关系</span></div></pre></td></tr></table></figure><p>应用一般创建单一的<code>Configuration</code>和<code>SessionFactory</code>实例，然后实例化多个会话线程服务客户端的请求。</p><p>#####Interface Session（4.3）</p><p><code>Session</code>是Java应用与Hibernate之间主要的运行时接口，<code>Session</code>的生命周期受到<code>逻辑事务</code>开始与结束的限制。<code>Session</code>的主要功能是对实体类的实例进行新建、读取和删除操作。</p><p>实例的三个阶段：</p><ol><li><em>transient</em>，未关联任何Session；</li><li><em>persistent</em>，与唯一Session关联；</li><li><em>detached</em>，位于<em>persistent</em>之后，未关联任何Session。</li></ol><p><img src="https://moetu.fastmirror.org/images/2017/09/20/hibernate_session0f225f6d3b608bb9.png" alt="实例的三个阶段"></p><p>Session抛出异常时，事务必须回滚。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文是依照参考文档学习时的总结，参考文档原文：&lt;a href=&quot;http://docs.jboss.org/hibernate/orm/4.3/manual/en-US/html/ch01.html#tutorial-firstapp&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Hibernate" scheme="https://g.hijkl.mn/categories/Java/Hibernate/"/>
    
    
  </entry>
  
  <entry>
    <title>正则表达式笔记（一）</title>
    <link href="https://g.hijkl.mn/regular-expressions1-10/"/>
    <id>https://g.hijkl.mn/regular-expressions1-10/</id>
    <published>2015-05-24T09:10:00.000Z</published>
    <updated>2017-09-20T02:46:04.742Z</updated>
    
    <content type="html"><![CDATA[<ul><li>正则表达式是大小写敏感的</li></ul><blockquote><p>Hello<br><br><code>Hello</code>, world!<br><br>hello, world!</p></blockquote><ul><li>空格、缩进或换行都会影响匹配结果</li></ul><blockquote><p>Hello, world!<br><br><code>Hello, world!</code><br><br>Hello,world!</p></blockquote><ul><li>^和$</li></ul><blockquote><p>^who<br><br><code>who</code> is who<br><br>who$<br><br>who is <code>who</code></p></blockquote><ul><li>^、$和\需要转义</li></ul><blockquote><p>^$<br><br>$12$ \\-\ $25$<br><br>\$<br><br><code>$</code>12<code>$</code> \\-\ <code>$</code>25<code>$</code><br><br>\$$<br><br>$12$ \\-\ $25<code>$</code><br><br>\\\\<br><br>$12$ <code>\</code>-<code>\</code> $25$</p></blockquote><ul><li><code>.</code>匹配任意一个字符</li></ul><blockquote><p>.<br><br><code>R</code>egular expressions are powerful!!!<br><br>……<br><br><code>Regula</code>r expressions are powerful!!!</p></blockquote><ul><li><code>.</code>同样需要转义</li></ul><blockquote><p>.<br><br><code>O</code>.K.<br><br>\\.<br><br>O<code>.</code>K<code>.</code><br><br>\\..\\.<br><br>O<code>.K.</code></p></blockquote><ul><li>一系列字符被[]包含</li></ul><blockquote><p>[oyu]<br><br>H<code>o</code>w d<code>o</code> <code>you</code> d<code>o</code>?<br><br>[dH].<br><br><code>Ho</code>w <code>do</code> you <code>do</code>?<br><br>[owy][yow]<br><br>H<code>ow</code> do <code>yo</code>u do?</p></blockquote><ul><li><p>[C-K]等价于[CDEFGHIJK]，[C-Ka-d2-6]等价于[CDEFGHIJKabcd23456]</p></li><li><p>[^CDghi45]与[CDghi45]匹配方式相反，[^W-Z]与[W-Z]匹配方式相反</p></li><li><p>一系列字符串被()包含，被|分隔</p></li></ul><blockquote><p>(on|ues|rida)<br><br>M<code>on</code>day T<code>ues</code>day F<code>rida</code>y<br><br>(Mon|Tues|Fri)day<br><br><code>Monday</code> <code>Tuesday</code> <code>Friday</code><br><br>..(id|esd|nd)ay<br><br><code>Monday</code> <code>Tuesday</code> <code>Friday</code></p></blockquote><p>#####参考资料</p><p><a href="http://www.zvon.org/comp/r/tut-Regexp.html#Pages~Contents" target="_blank" rel="external">Regular Expressions Tutorial</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;正则表达式是大小写敏感的&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Hello&lt;br&gt;&lt;br&gt;&lt;code&gt;Hello&lt;/code&gt;, world!&lt;br&gt;&lt;br&gt;hello, world!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;空格、
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Note" scheme="https://g.hijkl.mn/categories/Java/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>对Struts文档的注释 （二）</title>
    <link href="https://g.hijkl.mn/annotation-for-struts2-helloworld/"/>
    <id>https://g.hijkl.mn/annotation-for-struts2-helloworld/</id>
    <published>2015-05-23T07:14:00.000Z</published>
    <updated>2017-09-20T02:46:04.740Z</updated>
    
    <content type="html"><![CDATA[<p>本文是依照参考文档学习时的总结，参考文档原文：<a href="http://struts.apache.org/docs/hello-world-using-struts-2.html" target="_blank" rel="external">Hello World Using Struts 2</a></p><p>#####Create The Action Class HelloWorldAction</p><p>在Struts 2应用中，表单中输入的数据不是被提交给新的服务页面，而是提交给Java class来处理，这些Java class称为<code>Action</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//com.opensymphony.xwork2.ActionSupport</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">returns Action.SUCCESS</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>#####Create The View HelloWorld</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;s:property value=<span class="string">"messageStore.message"</span> /&gt;</div><div class="line">&lt;%--The message property of the MessageStore object in the Session context.--%&gt;</div></pre></td></tr></table></figure><p>可以类比JSP中的</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;jsp:useBean id=<span class="string">"messageStore"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"me.struts.ex.helloworld.model.MessageStore"</span> scope=<span class="string">"session"</span> /&gt;</div><div class="line">&lt;jsp:getProperty name=<span class="string">"messageStore"</span> property=<span class="string">"message"</span> /&gt;</div></pre></td></tr></table></figure><p>#####运行过程</p><p>在index.jsp中点击链接访问<code>/hello.action</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;a href="&lt;s:url action='hello'/&gt;"&gt;Hello World&lt;/a&gt;</div><div class="line">&lt;a href="hello.action"&gt;Hello World&lt;/a&gt;</div></pre></td></tr></table></figure><p>类似于web.xml中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure><p>建立了链接<code>/*</code>与<code>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</code>的映射关系；</p><p>struts.xml中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"me.struts.ex.helloworld.action.HelloWorldAction"</span> <span class="attr">method</span>=<span class="string">"execute"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/HelloWorld.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure><p>建立了<code>hello.action</code>与<code>me.struts.ex.helloworld.action.HelloWorldAction</code>的映射关系。</p><p>接下来调用Action的<code>execute</code>方法，创建MessageStore对象，返回<em>SUCCESS</em>。返回为SUCCESS，就将HelloWorld.jsp作为响应返回。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;s:property value=<span class="string">"messageStore.message"</span> /&gt;</div></pre></td></tr></table></figure><p>调用Action的<code>getMessageStore</code>方法返回MessageStore类的实例messageStore，显示messageStore的属性message。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文是依照参考文档学习时的总结，参考文档原文：&lt;a href=&quot;http://struts.apache.org/docs/hello-world-using-struts-2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hello World
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Struts" scheme="https://g.hijkl.mn/categories/Java/Struts/"/>
    
    
  </entry>
  
</feed>
