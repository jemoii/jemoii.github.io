<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jemoii&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://g.hijkl.mn/"/>
  <updated>2017-09-20T11:42:02.878Z</updated>
  <id>https://g.hijkl.mn/</id>
  
  <author>
    <name>Jemoii</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Tomcat启动之Connector启动</title>
    <link href="https://g.hijkl.mn/blog/tomcat-start4/"/>
    <id>https://g.hijkl.mn/blog/tomcat-start4/</id>
    <published>2017-08-31T07:40:00.000Z</published>
    <updated>2017-09-20T11:42:02.878Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="/blog/tomcat-start0">Tomcat启动之从脚本说起</a></li><li><a href="/blog/tomcat-start1">Tomcat启动之initInternal</a></li><li><a href="/blog/tomcat-start2">Tomcat启动之startInternal</a></li><li><a href="/blog/tomcat-start3">Tomcat启动之Context启动</a></li><li>Tomcat启动之Connector启动</li></ul><p><em>TODO 进一步整理</em></p><p>Connector中的startInternal调用ProtocolHandler#start，接着AbstractEndpoint#start会调用NioEndpoint#startInternal。初始化了<code>http-nio-8080-exec-*</code>线程池，corePoolSize为10，maximumPoolSize为200。初始化了连接计数器，最大连接数为10000。启动Poller线程<code>http-nio-8080-ClientPoller-*</code>。启动Acceptor线程<code>http-nio-8080-Acceptor-*</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">/**</span></div><div class="line"><span class="comment">    * Start the NIO endpoint, creating acceptor, poller threads.</span></div><div class="line"><span class="comment">    */</span></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (!running) &#123;</div><div class="line">           running = <span class="keyword">true</span>;</div><div class="line">           paused = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">           <span class="comment">// Create worker collection</span></div><div class="line">           <span class="keyword">if</span> ( getExecutor() == <span class="keyword">null</span> ) &#123;</div><div class="line">               createExecutor();</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           initializeConnectionLatch();</div><div class="line"></div><div class="line">           <span class="comment">// Start poller threads</span></div><div class="line">           pollers = <span class="keyword">new</span> Poller[getPollerThreadCount()];</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;pollers.length; i++) &#123;</div><div class="line">               pollers[i] = <span class="keyword">new</span> Poller();</div><div class="line">               Thread pollerThread = <span class="keyword">new</span> Thread(pollers[i], getName() + <span class="string">"-ClientPoller-"</span>+i);</div><div class="line">               pollerThread.setPriority(threadPriority);</div><div class="line">               pollerThread.setDaemon(<span class="keyword">true</span>);</div><div class="line">               pollerThread.start();</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           startAcceptorThreads();</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">       internalExecutor = <span class="keyword">true</span>;</div><div class="line">       TaskQueue taskqueue = <span class="keyword">new</span> TaskQueue();</div><div class="line">       TaskThreadFactory tf = <span class="keyword">new</span> TaskThreadFactory(getName() + <span class="string">"-exec-"</span>, daemon, getThreadPriority());</div><div class="line">       executor = <span class="keyword">new</span> ThreadPoolExecutor(getMinSpareThreads(), getMaxThreads(), <span class="number">60</span>, TimeUnit.SECONDS,taskqueue, tf);</div><div class="line">       taskqueue.setParent( (ThreadPoolExecutor) executor);</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> LimitLatch <span class="title">initializeConnectionLatch</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (maxConnections==-<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">       <span class="keyword">if</span> (connectionLimitLatch==<span class="keyword">null</span>) &#123;</div><div class="line">           connectionLimitLatch = <span class="keyword">new</span> LimitLatch(getMaxConnections());</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> connectionLimitLatch;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">startAcceptorThreads</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> count = getAcceptorThreadCount();</div><div class="line">       acceptors = <span class="keyword">new</span> Acceptor[count];</div><div class="line"></div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">           acceptors[i] = createAcceptor();</div><div class="line">           String threadName = getName() + <span class="string">"-Acceptor-"</span> + i;</div><div class="line">           acceptors[i].setThreadName(threadName);</div><div class="line">           Thread t = <span class="keyword">new</span> Thread(acceptors[i], threadName);</div><div class="line">           t.setPriority(getAcceptorThreadPriority());</div><div class="line">           t.setDaemon(getDaemon());</div><div class="line">           t.start();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>Acceptor接收连接成功后，接下来由Poller处理，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">                   <span class="comment">//if we have reached max connections, wait</span></div><div class="line">                   countUpOrAwaitConnection();</div><div class="line"></div><div class="line">                   SocketChannel socket = <span class="keyword">null</span>;</div><div class="line">                   <span class="keyword">try</span> &#123;</div><div class="line">                       <span class="comment">// Accept the next incoming connection from the server</span></div><div class="line">                       <span class="comment">// socket</span></div><div class="line">                       socket = serverSock.accept();</div><div class="line">                   &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</div><div class="line">                       <span class="comment">//we didn't get a socket</span></div><div class="line">                       countDownConnection();</div><div class="line">                       <span class="comment">// Introduce delay if necessary</span></div><div class="line">                       errorDelay = handleExceptionWithDelay(errorDelay);</div><div class="line">                       <span class="comment">// re-throw</span></div><div class="line">                       <span class="keyword">throw</span> ioe;</div><div class="line">                   &#125;</div><div class="line">                   <span class="comment">// Successful accept, reset the error delay</span></div><div class="line">                   errorDelay = <span class="number">0</span>;</div><div class="line"></div><div class="line">                   <span class="comment">// setSocketOptions() will add channel to the poller</span></div><div class="line">                   <span class="comment">// if successful</span></div><div class="line">                   <span class="keyword">if</span> (running &amp;&amp; !paused) &#123;</div><div class="line">                       <span class="keyword">if</span> (!setSocketOptions(socket)) &#123;</div><div class="line">                           countDownConnection();</div><div class="line">                           closeSocket(socket);</div><div class="line">                       &#125;</div><div class="line">                   &#125; <span class="keyword">else</span> &#123;</div><div class="line">                       countDownConnection();</div><div class="line">                       closeSocket(socket);</div><div class="line">                   &#125;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line"><span class="comment">    * Process the specified connection.</span></div><div class="line"><span class="comment">    */</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">setSocketOptions</span><span class="params">(SocketChannel socket)</span> </span>&#123;</div><div class="line">       <span class="comment">// Process the connection</span></div><div class="line">...</div><div class="line"></div><div class="line">           NioChannel channel = nioChannels.pop();</div><div class="line">           <span class="keyword">if</span> ( channel == <span class="keyword">null</span> ) &#123;</div><div class="line">...</div><div class="line">                   <span class="comment">// normal tcp setup</span></div><div class="line">                   NioBufferHandler bufhandler = <span class="keyword">new</span> NioBufferHandler(socketProperties.getAppReadBufSize(),</div><div class="line">                                                                      socketProperties.getAppWriteBufSize(),</div><div class="line">                                                                      socketProperties.getDirectBuffer());</div><div class="line"></div><div class="line">                   channel = <span class="keyword">new</span> NioChannel(socket, bufhandler);</div><div class="line">           &#125;</div><div class="line">...</div><div class="line">           getPoller0().register(channel);</div><div class="line">...</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">    * Return an available poller in true round robin fashion</span></div><div class="line"><span class="comment">    */</span></div><div class="line">   <span class="function"><span class="keyword">public</span> Poller <span class="title">getPoller0</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> idx = Math.abs(pollerRotater.incrementAndGet()) % pollers.length;</div><div class="line">       <span class="keyword">return</span> pollers[idx];</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>由下图可以看出，打开的Channel被包装为PollerEvent，添加到阻塞队列被循环处理，</p><p><img src="https://moetu.fastmirror.org/images/2017/09/20/pollerevent_umld811d2323c4c1b37.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">                   <span class="keyword">if</span> ( !close ) &#123;</div><div class="line">                       <span class="keyword">if</span> (wakeupCounter.getAndSet(-<span class="number">1</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">                           <span class="comment">//if we are here, means we have other stuff to do</span></div><div class="line">                           <span class="comment">//do a non blocking select</span></div><div class="line">                           keyCount = selector.selectNow();</div><div class="line">                       &#125; <span class="keyword">else</span> &#123;</div><div class="line">                           keyCount = selector.select(selectorTimeout);</div><div class="line">                       &#125;</div><div class="line">                       wakeupCounter.set(<span class="number">0</span>);</div><div class="line">                   &#125;</div><div class="line">...</div><div class="line"><span class="comment">//either we timed out or we woke up, process events first</span></div><div class="line">               <span class="keyword">if</span> ( keyCount == <span class="number">0</span> ) hasEvents = (hasEvents | events());</div><div class="line"></div><div class="line">               Iterator&lt;SelectionKey&gt; iterator =</div><div class="line">                   keyCount &gt; <span class="number">0</span> ? selector.selectedKeys().iterator() : <span class="keyword">null</span>;</div><div class="line">               <span class="comment">// Walk through the collection of ready keys and dispatch</span></div><div class="line">               <span class="comment">// any active event.</span></div><div class="line">               <span class="keyword">while</span> (iterator != <span class="keyword">null</span> &amp;&amp; iterator.hasNext()) &#123;</div><div class="line">                   SelectionKey sk = iterator.next();</div><div class="line">                   KeyAttachment attachment = (KeyAttachment)sk.attachment();</div><div class="line">                   <span class="comment">// Attachment may be null if another thread has called</span></div><div class="line">                   <span class="comment">// cancelledKey()</span></div><div class="line">                   <span class="keyword">if</span> (attachment == <span class="keyword">null</span>) &#123;</div><div class="line">                       iterator.remove();</div><div class="line">                   &#125; <span class="keyword">else</span> &#123;</div><div class="line">                       attachment.access();</div><div class="line">                       iterator.remove();</div><div class="line">                       processKey(sk, attachment);</div><div class="line">                   &#125;</div><div class="line">               &#125;<span class="comment">//while</span></div></pre></td></tr></table></figure><p><img src="https://moetu.fastmirror.org/images/2017/09/20/processor_umldb06e33b554a7439.jpg" alt=""></p><p>接着一步一步来到org.apache.catalina.connector.CoyoteAdapter#service(org.apache.coyote.Request, org.apache.coyote.Response)，所有的容器组件在实例化时，都关联了一个默认的Value，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * Create a new StandardEngine component with the default basic Valve.</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">StandardEngine</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">      <span class="keyword">super</span>();</div><div class="line">      pipeline.setBasic(<span class="keyword">new</span> StandardEngineValve());</div><div class="line">...</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">/**</span></div><div class="line"><span class="comment">    * Service method.</span></div><div class="line"><span class="comment">    */</span></div><div class="line">   <span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(org.apache.coyote.Request req,</span></span></div><div class="line"><span class="function"><span class="params">                       org.apache.coyote.Response res)</span></span></div><div class="line"><span class="function">       <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">       Request request = (Request) req.getNote(ADAPTER_NOTES);</div><div class="line">       Response response = (Response) res.getNote(ADAPTER_NOTES);</div><div class="line">...</div><div class="line">        <span class="comment">// Calling the container</span></div><div class="line">               connector.getService().getContainer().getPipeline().getFirst().invoke(request, response);</div><div class="line">...</div><div class="line">&#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Request request, Response response)</span></span></div><div class="line"><span class="function">       <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line"></div><div class="line">       <span class="comment">// Select the Host to be used for this Request</span></div><div class="line">       Host host = request.getHost();</div><div class="line">       ...</div><div class="line"></div><div class="line">       <span class="comment">// Ask this Host to process this request</span></div><div class="line">       host.getPipeline().getFirst().invoke(request, response);</div><div class="line"></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Request request, Response response)</span></span></div><div class="line"><span class="function">       <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line"></div><div class="line">       <span class="comment">// Select the Context to be used for this Request</span></div><div class="line">       Context context = request.getContext();</div><div class="line">...</div><div class="line">                   context.getPipeline().getFirst().invoke(request, response);</div><div class="line">...</div><div class="line">&#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Request request, Response response)</span></span></div><div class="line"><span class="function">       <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line"></div><div class="line">       ...</div><div class="line"></div><div class="line">       <span class="comment">// Select the Wrapper to be used for this Request</span></div><div class="line">       Wrapper wrapper = request.getWrapper();</div><div class="line">...</div><div class="line">       wrapper.getPipeline().getFirst().invoke(request, response);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Request request, Response response)</span></span></div><div class="line"><span class="function">       <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line"></div><div class="line">       <span class="comment">// Initialize local variables we may need</span></div><div class="line">       <span class="keyword">boolean</span> unavailable = <span class="keyword">false</span>;</div><div class="line">       Throwable throwable = <span class="keyword">null</span>;</div><div class="line">       <span class="comment">// This should be a Request attribute...</span></div><div class="line">       <span class="keyword">long</span> t1=System.currentTimeMillis();</div><div class="line">       requestCount.incrementAndGet();</div><div class="line">       StandardWrapper wrapper = (StandardWrapper) getContainer();</div><div class="line">       Servlet servlet = <span class="keyword">null</span>;</div><div class="line">       Context context = (Context) wrapper.getParent();</div><div class="line"></div><div class="line">       ...</div><div class="line"></div><div class="line">       <span class="comment">// Allocate a servlet instance to process this request</span></div><div class="line"></div><div class="line">           <span class="keyword">if</span> (!unavailable) &#123;</div><div class="line">               servlet = wrapper.allocate();</div><div class="line">           &#125;</div><div class="line">       ...</div><div class="line">       <span class="comment">// Create the filter chain for this request</span></div><div class="line">       ApplicationFilterChain filterChain =</div><div class="line">               ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);</div><div class="line"></div><div class="line">       <span class="comment">// Call the filter chain for this request</span></div><div class="line">       <span class="comment">// <span class="doctag">NOTE:</span> This also calls the servlet's service() method</span></div><div class="line">...</div><div class="line">                       filterChain.doFilter</div><div class="line">                           (request.getRequest(), response.getResponse());</div><div class="line">       ...</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/blog/tomcat-start0&quot;&gt;Tomcat启动之从脚本说起&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/tomcat-start1&quot;&gt;Tomcat启动之initInternal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Tomcat" scheme="https://g.hijkl.mn/categories/Java/Tomcat/"/>
    
    
  </entry>
  
  <entry>
    <title>Tomcat启动之Context启动</title>
    <link href="https://g.hijkl.mn/blog/tomcat-start3/"/>
    <id>https://g.hijkl.mn/blog/tomcat-start3/</id>
    <published>2017-08-30T11:23:00.000Z</published>
    <updated>2017-09-20T11:41:12.575Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="/blog/tomcat-start0">Tomcat启动之从脚本说起</a></li><li><a href="/blog/tomcat-start1">Tomcat启动之initInternal</a></li><li><a href="/blog/tomcat-start2">Tomcat启动之startInternal</a></li><li>Tomcat启动之Context启动</li><li><a href="/blog/tomcat-start4">Tomcat启动之Connector启动</a></li></ul><p>添加到StandardHost的StandardContext启动，看一下StandardContext中startInternal的实现，startInternal中的过程较多，这里仅说明以下过程，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * Start this component and implement the requirements</span></div><div class="line"><span class="comment">   * of &#123;<span class="doctag">@link</span> org.apache.catalina.util.LifecycleBase#startInternal()&#125;.</span></div><div class="line"><span class="comment">   *</span></div><div class="line"><span class="comment">   * <span class="doctag">@exception</span> LifecycleException if this component detects a fatal error</span></div><div class="line"><span class="comment">   *  that prevents this component from being used</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</div><div class="line">...</div><div class="line">      <span class="keyword">boolean</span> ok = <span class="keyword">true</span>;</div><div class="line">...</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (getLoader() == <span class="keyword">null</span>) &#123;</div><div class="line">          WebappLoader webappLoader = <span class="keyword">new</span> WebappLoader(getParentClassLoader());</div><div class="line">          webappLoader.setDelegate(getDelegate());</div><div class="line">          setLoader(webappLoader);</div><div class="line">      &#125;</div><div class="line">...</div><div class="line"></div><div class="line">          <span class="keyword">if</span> (ok) &#123;</div><div class="line">              <span class="comment">// Start our subordinate components, if any</span></div><div class="line">              Loader loader = getLoader();</div><div class="line">              <span class="keyword">if</span> ((loader != <span class="keyword">null</span>) &amp;&amp; (loader <span class="keyword">instanceof</span> Lifecycle))</div><div class="line">                  ((Lifecycle) loader).start();</div><div class="line">...</div><div class="line"></div><div class="line">              <span class="comment">// Notify our interested LifecycleListeners</span></div><div class="line">              fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">              <span class="comment">// Start our child containers, if not already started</span></div><div class="line">              <span class="keyword">for</span> (Container child : findChildren()) &#123;</div><div class="line">                  <span class="keyword">if</span> (!child.getState().isAvailable()) &#123;</div><div class="line">                      child.start();</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line"></div><div class="line">              <span class="comment">// Start the Valves in our pipeline (including the basic),</span></div><div class="line">              <span class="comment">// if any</span></div><div class="line">              <span class="keyword">if</span> (pipeline <span class="keyword">instanceof</span> Lifecycle) &#123;</div><div class="line">                  ((Lifecycle) pipeline).start();</div><div class="line">              &#125;</div><div class="line">...</div><div class="line">          &#125;</div><div class="line">...</div><div class="line"></div><div class="line">          <span class="comment">// Load and initialize all "load on startup" servlets</span></div><div class="line">          <span class="keyword">if</span> (ok) &#123;</div><div class="line">              <span class="keyword">if</span> (!loadOnStartup(findChildren()))&#123;</div><div class="line">                  log.error(sm.getString(<span class="string">"standardContext.servletFail"</span>));</div><div class="line">                  ok = <span class="keyword">false</span>;</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">...</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>默认情况下getParentClassLoader方法返回父Container即StandardHost的parentClassLoader，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Return the parent class loader (if any) for this web application.</span></div><div class="line"><span class="comment"> * This call is meaningful only &lt;strong&gt;after&lt;/strong&gt; a Loader has</span></div><div class="line"><span class="comment"> * been configured.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> ClassLoader <span class="title">getParentClassLoader</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (parentClassLoader != <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> (parentClassLoader);</div><div class="line">    <span class="keyword">if</span> (getPrivileged()) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getClass().getClassLoader();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> (parent.getParentClassLoader());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (ClassLoader.getSystemClassLoader());</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里需要重新回顾一下解析server.xml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// When the 'engine' is found, set the parentClassLoader.</span></div><div class="line">      digester.addRule(<span class="string">"Server/Service/Engine"</span>,</div><div class="line">                       <span class="keyword">new</span> SetParentClassLoaderRule(parentClassLoader));</div><div class="line"></div><div class="line"><span class="comment">// prefix=Server/Service/Engine</span></div><div class="line">digester.addRule(prefix + <span class="string">"Host"</span>,</div><div class="line">                       <span class="keyword">new</span> CopyParentClassLoaderRule());</div></pre></td></tr></table></figure><p>StandardEngine的parentClassLoader被设置为Catalina的parentClassLoader即最初的sharedLoader。StandardHost的parentClassLoader被设置为StandardEngine的parentClassLoader，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">/**</span></div><div class="line"><span class="comment">    * Start associated &#123;<span class="doctag">@link</span> ClassLoader&#125; and implement the requirements</span></div><div class="line"><span class="comment">    * of &#123;<span class="doctag">@link</span> org.apache.catalina.util.LifecycleBase#startInternal()&#125;.</span></div><div class="line"><span class="comment">    *</span></div><div class="line"><span class="comment">    * <span class="doctag">@exception</span> LifecycleException if this component detects a fatal error</span></div><div class="line"><span class="comment">    *  that prevents this component from being used</span></div><div class="line"><span class="comment">    */</span></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</div><div class="line">...</div><div class="line"></div><div class="line">       <span class="comment">// Construct a class loader based on our current repositories list</span></div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">           classLoader = createClassLoader();</div><div class="line">           classLoader.setResources(context.getResources());</div><div class="line">           classLoader.setDelegate(<span class="keyword">this</span>.delegate);</div><div class="line"></div><div class="line">           <span class="comment">// Configure our repositories</span></div><div class="line">           setClassPath();</div><div class="line"></div><div class="line">           setPermissions();</div><div class="line"></div><div class="line">           ((Lifecycle) classLoader).start();</div><div class="line"></div><div class="line">...</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">    * Create associated classLoader.</span></div><div class="line"><span class="comment">    */</span></div><div class="line">   <span class="function"><span class="keyword">private</span> WebappClassLoaderBase <span class="title">createClassLoader</span><span class="params">()</span></span></div><div class="line"><span class="function">       <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">       Class&lt;?&gt; clazz = Class.forName(loaderClass);</div><div class="line">       WebappClassLoaderBase classLoader = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (parentClassLoader == <span class="keyword">null</span>) &#123;</div><div class="line">           parentClassLoader = context.getParentClassLoader();</div><div class="line">       &#125;</div><div class="line">       Class&lt;?&gt;[] argTypes = &#123; ClassLoader.class &#125;;</div><div class="line">       Object[] args = &#123; parentClassLoader &#125;;</div><div class="line">       Constructor&lt;?&gt; constr = clazz.getConstructor(argTypes);</div><div class="line">       classLoader = (WebappClassLoaderBase) constr.newInstance(args);</div><div class="line"></div><div class="line">       <span class="keyword">return</span> classLoader;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><blockquote><p>When a request to load a class from the web application’s WebappX class loader is processed, this class loader will look in the local repositories <strong>first</strong>, instead of delegating before looking.</p></blockquote><p>org.apache.catalina.loader.WebappClassLoaderBase#loadClass(String, boolean)</p><blockquote><p>Load the class with the specified name, searching using the following algorithm until it finds and returns the class. If the class cannot be found, returns ClassNotFoundException.</p><ul><li>Call findLoadedClass(String) to check if the class has already been loaded. If it has, the same Class object is returned.</li><li>If the delegate property is set to true, call the loadClass() method of the parent class loader, if any.</li><li>Call findClass() to find this class in our locally defined repositories.</li><li>Call the loadClass() method of our parent class loader, if any.</li></ul><p>If the class was found using the above steps, and the resolve flag is true, this method will then call resolveClass(Class) on the resulting Class object.</p></blockquote><p>解析xml时为StandardContext绑定了监听器ContextConfig，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * Process events for an associated Context.</span></div><div class="line"><span class="comment">   *</span></div><div class="line"><span class="comment">   * <span class="doctag">@param</span> event The lifecycle event that has occurred</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lifecycleEvent</span><span class="params">(LifecycleEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">      <span class="comment">// Process the event that has occurred</span></div><div class="line">      <span class="keyword">if</span> (event.getType().equals(Lifecycle.CONFIGURE_START_EVENT)) &#123;</div><div class="line">          configureStart();</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType().equals(Lifecycle.BEFORE_START_EVENT)) &#123;</div><div class="line">          beforeStart();</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType().equals(Lifecycle.AFTER_START_EVENT)) &#123;</div><div class="line">          <span class="comment">// Restore docBase for management tools</span></div><div class="line">          <span class="keyword">if</span> (originalDocBase != <span class="keyword">null</span>) &#123;</div><div class="line">              context.setDocBase(originalDocBase);</div><div class="line">          &#125;</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType().equals(Lifecycle.CONFIGURE_STOP_EVENT)) &#123;</div><div class="line">          configureStop();</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType().equals(Lifecycle.AFTER_INIT_EVENT)) &#123;</div><div class="line">          init();</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType().equals(Lifecycle.AFTER_DESTROY_EVENT)) &#123;</div><div class="line">          destroy();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure><p><code>after_init</code>事件会触发init方法，用于准备解析web.xml。主要看一下<code>configure_start</code>事件触发的configureStart方法，解析web.xml，将Servlet包装为StandardWrapper实例，添加到StandardContext的子Container。其他会作为属性设置StandardContext的属性。</p><blockquote><p>org.apache.catalina.startup.ContextConfig#webConfig</p></blockquote><p>org.apache.catalina.core.StandardContext#loadOnStartup会按照loadOnStartup对StandardWrapper进行分组，然后分组调用load方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * Load and initialize an instance of this servlet, if there is not already</span></div><div class="line"><span class="comment">   * at least one initialized instance.  This can be used, for example, to</span></div><div class="line"><span class="comment">   * load servlets that are marked in the deployment descriptor to be loaded</span></div><div class="line"><span class="comment">   * at server startup time.</span></div><div class="line"><span class="comment">   * &lt;p&gt;</span></div><div class="line"><span class="comment">   * &lt;b&gt;IMPLEMENTATION NOTE&lt;/b&gt;:  Servlets whose classnames begin with</span></div><div class="line"><span class="comment">   * &lt;code&gt;org.apache.catalina.&lt;/code&gt; (so-called "container" servlets)</span></div><div class="line"><span class="comment">   * are loaded by the same classloader that loaded this class, rather than</span></div><div class="line"><span class="comment">   * the classloader for the current web application.</span></div><div class="line"><span class="comment">   * This gives such classes access to Catalina internals, which are</span></div><div class="line"><span class="comment">   * prevented for classes loaded for web applications.</span></div><div class="line"><span class="comment">   *</span></div><div class="line"><span class="comment">   * <span class="doctag">@exception</span> ServletException if the servlet init() method threw</span></div><div class="line"><span class="comment">   *  an exception</span></div><div class="line"><span class="comment">   * <span class="doctag">@exception</span> ServletException if some other loading problem occurs</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">      instance = loadServlet();</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (!instanceInitialized) &#123;</div><div class="line">          initServlet(instance);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">...</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>根据servletClass反射得到Servlet实例，触发监听器，调用其init方法</p><p>至此Container相关的组件启动完成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/blog/tomcat-start0&quot;&gt;Tomcat启动之从脚本说起&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/tomcat-start1&quot;&gt;Tomcat启动之initInternal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Tomcat" scheme="https://g.hijkl.mn/categories/Java/Tomcat/"/>
    
    
  </entry>
  
  <entry>
    <title>Tomcat启动之startInternal</title>
    <link href="https://g.hijkl.mn/blog/tomcat-start2/"/>
    <id>https://g.hijkl.mn/blog/tomcat-start2/</id>
    <published>2017-08-30T09:06:00.000Z</published>
    <updated>2017-09-20T11:40:55.670Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="/blog/tomcat-start0">Tomcat启动之从脚本说起</a></li><li><a href="/blog/tomcat-start1">Tomcat启动之initInternal</a></li><li>Tomcat启动之startInternal</li><li><a href="/blog/tomcat-start3">Tomcat启动之Context启动</a></li><li><a href="/blog/tomcat-start4">Tomcat启动之Connector启动</a></li></ul><p>首先看一下StandardServer中startInternal的实现，和initInternal类似，启动其包含的Service，StandardService中的startInternal启动其包含的Engine，Connector。下面是StandardEngine父类ContainerBase中startInternal的实现，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * Start this component and implement the requirements</span></div><div class="line"><span class="comment">   * of &#123;<span class="doctag">@link</span> org.apache.catalina.util.LifecycleBase#startInternal()&#125;.</span></div><div class="line"><span class="comment">   *</span></div><div class="line"><span class="comment">   * <span class="doctag">@exception</span> LifecycleException if this component detects a fatal error</span></div><div class="line"><span class="comment">   *  that prevents this component from being used</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</div><div class="line">...</div><div class="line">      <span class="comment">// Start our child containers, if any</span></div><div class="line">      Container children[] = findChildren();</div><div class="line">      List&lt;Future&lt;Void&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</div><div class="line">          results.add(startStopExecutor.submit(<span class="keyword">new</span> StartChild(children[i])));</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">boolean</span> fail = <span class="keyword">false</span>;</div><div class="line">      <span class="keyword">for</span> (Future&lt;Void&gt; result : results) &#123;</div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">              result.get();</div><div class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">              log.error(sm.getString(<span class="string">"containerBase.threadedStartFailed"</span>), e);</div><div class="line">              fail = <span class="keyword">true</span>;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (fail) &#123;</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(</div><div class="line">                  sm.getString(<span class="string">"containerBase.threadedStartFailed"</span>));</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// Start the Valves in our pipeline (including the basic), if any</span></div><div class="line">      <span class="keyword">if</span> (pipeline <span class="keyword">instanceof</span> Lifecycle)</div><div class="line">          ((Lifecycle) pipeline).start();</div><div class="line"></div><div class="line"></div><div class="line">      setState(LifecycleState.STARTING);</div><div class="line"></div><div class="line">      <span class="comment">// Start our thread</span></div><div class="line">      threadStart();</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>这里启动子Container，Engine的子Container是解析xml时调用addChild添加的StandardHost实例。除此之外，还启动了一个ContainerBackgroundProcessor线程，循环处理子Container，触发<code>periodic</code>事件（StandardEngine实例化时将backgroundProcessorDelay设为10，其他Container默认为0）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">/**</span></div><div class="line"><span class="comment">    * Private thread class to invoke the backgroundProcess method</span></div><div class="line"><span class="comment">    * of this container and its children after a fixed delay.</span></div><div class="line"><span class="comment">    */</span></div><div class="line">   <span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerBackgroundProcessor</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">           ...</div><div class="line">               <span class="keyword">while</span> (!threadDone) &#123;</div><div class="line">                   <span class="keyword">try</span> &#123;</div><div class="line">                       Thread.sleep(backgroundProcessorDelay * <span class="number">1000L</span>);</div><div class="line">                   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                       <span class="comment">// Ignore</span></div><div class="line">                   &#125;</div><div class="line">                   <span class="keyword">if</span> (!threadDone) &#123;</div><div class="line">                       processChildren(ContainerBase.<span class="keyword">this</span>);</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">...</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processChildren</span><span class="params">(Container container)</span> </span>&#123;</div><div class="line">           ...</div><div class="line">               container.backgroundProcess();</div><div class="line">               Container[] children = container.findChildren();</div><div class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</div><div class="line">                   <span class="keyword">if</span> (children[i].getBackgroundProcessorDelay() &lt;= <span class="number">0</span>) &#123;</div><div class="line">                       processChildren(children[i]);</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           ...</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">    * Execute a periodic task, such as reloading, etc. This method will be</span></div><div class="line"><span class="comment">    * invoked inside the classloading context of this container. Unexpected</span></div><div class="line"><span class="comment">    * throwables will be caught and logged.</span></div><div class="line"><span class="comment">    */</span></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backgroundProcess</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (!getState().isAvailable())</div><div class="line">           <span class="keyword">return</span>;</div><div class="line"></div><div class="line">...</div><div class="line">       fireLifecycleEvent(Lifecycle.PERIODIC_EVENT, <span class="keyword">null</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>StandardHost与StandardEngine类似，他的子Container是解析xml时调用addChild添加的StandardContext实例。继续跟读StandardContext的启动之前，先等一下，还记不记得，解析xml时为StandardHost绑定了HostConfig监听器，我们先看一下HostConfig监听器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Process the START event for an associated Host.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> event The lifecycle event that has occurred</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lifecycleEvent</span><span class="params">(LifecycleEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// Identify the host we are associated with</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        host = (Host) event.getLifecycle();</div><div class="line">        <span class="keyword">if</span> (host <span class="keyword">instanceof</span> StandardHost) &#123;</div><div class="line">            setCopyXML(((StandardHost) host).isCopyXML());</div><div class="line">            setDeployXML(((StandardHost) host).isDeployXML());</div><div class="line">            setUnpackWARs(((StandardHost) host).isUnpackWARs());</div><div class="line">            setContextClass(((StandardHost) host).getContextClass());</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</div><div class="line">        log.error(sm.getString(<span class="string">"hostConfig.cce"</span>, event.getLifecycle()), e);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Process the event that has occurred</span></div><div class="line">    <span class="keyword">if</span> (event.getType().equals(Lifecycle.PERIODIC_EVENT)) &#123;</div><div class="line">        check();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType().equals(Lifecycle.BEFORE_START_EVENT)) &#123;</div><div class="line">        beforeStart();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType().equals(Lifecycle.START_EVENT)) &#123;</div><div class="line">        start();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType().equals(Lifecycle.STOP_EVENT)) &#123;</div><div class="line">        stop();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>HostConfig会监听<code>periodic</code>，<code>before_start</code>，<code>start</code>等事件，我们来逐一看一下，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeStart</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (host.getCreateDirs()) &#123;</div><div class="line">           File[] dirs = <span class="keyword">new</span> File[] &#123;host.getAppBaseFile(),host.getConfigBaseFile()&#125;;</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;dirs.length; i++) &#123;</div><div class="line">               <span class="keyword">if</span> (!dirs[i].mkdirs() &amp;&amp; !dirs[i].isDirectory()) &#123;</div><div class="line">                   log.error(sm.getString(<span class="string">"hostConfig.createDirs"</span>,dirs[i]));</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line"><span class="comment">    * Process a "start" event for this Host.</span></div><div class="line"><span class="comment">    */</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line">...</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (!host.getAppBaseFile().isDirectory()) &#123;</div><div class="line">           log.error(sm.getString(<span class="string">"hostConfig.appBase"</span>, host.getName(),</div><div class="line">                   host.getAppBaseFile().getPath()));</div><div class="line">           host.setDeployOnStartup(<span class="keyword">false</span>);</div><div class="line">           host.setAutoDeploy(<span class="keyword">false</span>);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (host.getDeployOnStartup())</div><div class="line">           deployApps();</div><div class="line"></div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">    * Check status of all webapps.</span></div><div class="line"><span class="comment">    */</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (host.getAutoDeploy()) &#123;</div><div class="line">           <span class="comment">// Check for resources modification to trigger redeployment</span></div><div class="line">           DeployedApplication[] apps =</div><div class="line">               deployed.values().toArray(<span class="keyword">new</span> DeployedApplication[<span class="number">0</span>]);</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; apps.length; i++) &#123;</div><div class="line">               <span class="keyword">if</span> (!isServiced(apps[i].name))</div><div class="line"><span class="comment">// Check resources for redeployment and reloading.</span></div><div class="line">                   checkResources(apps[i], <span class="keyword">false</span>);</div><div class="line">           &#125;</div><div class="line">...</div><div class="line"></div><div class="line">           <span class="comment">// Hotdeploy applications</span></div><div class="line">           deployApps();</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">    * Deploy applications for any directories or WAR files that are found</span></div><div class="line"><span class="comment">    * in our "application root" directory.</span></div><div class="line"><span class="comment">    */</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deployApps</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">       File appBase = host.getAppBaseFile();</div><div class="line">       File configBase = host.getConfigBaseFile();</div><div class="line">       String[] filteredAppPaths = filterAppPaths(appBase.list());</div><div class="line">       <span class="comment">// Deploy XML descriptors from configBase</span></div><div class="line">       deployDescriptors(configBase, configBase.list());</div><div class="line">       <span class="comment">// Deploy WARs</span></div><div class="line">       deployWARs(appBase, filteredAppPaths);</div><div class="line">       <span class="comment">// Deploy expanded folders</span></div><div class="line">       deployDirectories(appBase, filteredAppPaths);</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>StandardHost没有再实现startInternal，这里的start方法相当于startInternal，遍历webapps目录下的工程，这里和server.xml类似会尝试解析context.xml或者直接实例化org.apache.catalina.core.StandardContext，将实例化的Context添加为子Container。</p><p>而ContainerBackgroundProcessor线程触发的periodic事件对应的check方法则完成热部署。</p><p>到这里，server.xml中Context节点配置的，遍历webapps目录下工程得到的Context实例都被添加到StandardHost的子Container。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/blog/tomcat-start0&quot;&gt;Tomcat启动之从脚本说起&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/tomcat-start1&quot;&gt;Tomcat启动之initInternal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tomcat启动
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Tomcat" scheme="https://g.hijkl.mn/categories/Java/Tomcat/"/>
    
    
  </entry>
  
  <entry>
    <title>Tomcat启动之initInternal</title>
    <link href="https://g.hijkl.mn/blog/tomcat-start1/"/>
    <id>https://g.hijkl.mn/blog/tomcat-start1/</id>
    <published>2017-08-30T07:11:00.000Z</published>
    <updated>2017-09-20T11:40:37.791Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="/blog/tomcat-start0">Tomcat启动之从脚本说起</a></li><li>Tomcat启动之initInternal</li><li><a href="/blog/tomcat-start2">Tomcat启动之startInternal</a></li><li><a href="/blog/tomcat-start3">Tomcat启动之Context启动</a></li><li><a href="/blog/tomcat-start4">Tomcat启动之Connector启动</a></li></ul><p>Bootstrap类在静态块中初始化<code>catalina.home</code>，<code>catalina.base</code>。start方法首先初始化类加载器，common类加载器会搜索<code>conf/catalina.properties</code>中<code>common.loader</code>属性定义的路径下的类，默认配置下，server类加载器、shared类加载器与common类加载器一致。通过反射设置Catalina类的父加载器为shared类加载器。这里先给出如下的<a href="https://tomcat.apache.org/tomcat-8.0-doc/class-loader-howto.html" target="_blank" rel="external">类加载器关系图</a>，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    Bootstrap</div><div class="line">        |</div><div class="line">     System</div><div class="line">        |</div><div class="line">     Common</div><div class="line">     /     \</div><div class="line">Webapp1   Webapp2 ...</div></pre></td></tr></table></figure><p>接着通过反射调用Catalina类的start方法。首先加载<code>conf/server.xml</code>，使用<a href="https://commons.apache.org/proper/commons-digester/" target="_blank" rel="external">Digester</a>解析xml，创建<code>Server</code>实例。<code>server.xml</code>对于理解Tomcat结构至关重要。</p><p>下面的示例server.xml去除了注释并做了简化，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version='1.0' encoding='utf-8'?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">"8005"</span> <span class="attr">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.startup.VersionLoggerListener"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.JreMemoryLeakPreventionListener"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.ThreadLocalLeakPreventionListener"</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">"Catalina"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></div><div class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></div><div class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8009"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">"Catalina"</span> <span class="attr">defaultHost</span>=<span class="string">"localhost"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></div><div class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></div><div class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">"localhost_access_log"</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></span></div><div class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/api-server"</span> <span class="attr">debug</span>=<span class="string">"1"</span> <span class="attr">docBase</span>=<span class="string">"/data/webapp/api-server"</span>/&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></div></pre></td></tr></table></figure><p>下面是对org.apache.catalina.startup.Catalina#createStartDigester的注释，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">/**</span></div><div class="line"><span class="comment">    * Create and configure the Digester we will be using for startup.</span></div><div class="line"><span class="comment">    */</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> Digester <span class="title">createStartDigester</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">long</span> t1=System.currentTimeMillis();</div><div class="line">       <span class="comment">// Initialize the digester</span></div><div class="line">       Digester digester = <span class="keyword">new</span> Digester();</div><div class="line">       digester.setValidating(<span class="keyword">false</span>);</div><div class="line">       digester.setRulesValidation(<span class="keyword">true</span>);</div><div class="line">       HashMap&lt;Class&lt;?&gt;, List&lt;String&gt;&gt; fakeAttributes = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">       ArrayList&lt;String&gt; attrs = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">       attrs.add(<span class="string">"className"</span>);</div><div class="line">       fakeAttributes.put(Object.class, attrs);</div><div class="line">       digester.setFakeAttributes(fakeAttributes);</div><div class="line">       digester.setUseContextClassLoader(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">       <span class="comment">// Configure the actions we will be using</span></div><div class="line"><span class="comment">// 匹配到Server节点时新建StandardServer实例</span></div><div class="line"><span class="comment">// 如果存在className属性则使用其指定的类名</span></div><div class="line">       digester.addObjectCreate(<span class="string">"Server"</span>,</div><div class="line">                                <span class="string">"org.apache.catalina.core.StandardServer"</span>,</div><div class="line">                                <span class="string">"className"</span>);</div><div class="line"><span class="comment">// 将Server节点的属性设置为Server实例对应的属性</span></div><div class="line">       digester.addSetProperties(<span class="string">"Server"</span>);</div><div class="line"><span class="comment">// 调用Catalina#setServer</span></div><div class="line">       digester.addSetNext(<span class="string">"Server"</span>,</div><div class="line">                           <span class="string">"setServer"</span>,</div><div class="line">                           <span class="string">"org.apache.catalina.Server"</span>);</div><div class="line">...</div><div class="line">digester.addObjectCreate(<span class="string">"Server/Listener"</span>,</div><div class="line">                                <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></div><div class="line">                                <span class="string">"className"</span>);</div><div class="line">       digester.addSetProperties(<span class="string">"Server/Listener"</span>);</div><div class="line"><span class="comment">// 调用StandardServer#addLifecycleListener</span></div><div class="line">       digester.addSetNext(<span class="string">"Server/Listener"</span>,</div><div class="line">                           <span class="string">"addLifecycleListener"</span>,</div><div class="line">                           <span class="string">"org.apache.catalina.LifecycleListener"</span>);</div><div class="line"></div><div class="line">       digester.addObjectCreate(<span class="string">"Server/Service"</span>,</div><div class="line">                                <span class="string">"org.apache.catalina.core.StandardService"</span>,</div><div class="line">                                <span class="string">"className"</span>);</div><div class="line">       digester.addSetProperties(<span class="string">"Server/Service"</span>);</div><div class="line"><span class="comment">// 调用StandardServer#addService</span></div><div class="line">       digester.addSetNext(<span class="string">"Server/Service"</span>,</div><div class="line">                           <span class="string">"addService"</span>,</div><div class="line">                           <span class="string">"org.apache.catalina.Service"</span>);</div><div class="line">...</div><div class="line"><span class="comment">// see ConnectorCreateRule</span></div><div class="line"><span class="comment">// Connector con = new Connector(attributes.getValue("protocol")); </span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// 匹配到Server/Service/Connector节点时新建Connector实例</span></div><div class="line"><span class="comment">// protocol属性作为构造方法的参数</span></div><div class="line">digester.addRule(<span class="string">"Server/Service/Connector"</span>,</div><div class="line">                        <span class="keyword">new</span> ConnectorCreateRule());</div><div class="line">       digester.addRule(<span class="string">"Server/Service/Connector"</span>,</div><div class="line">                        <span class="keyword">new</span> SetAllPropertiesRule(<span class="keyword">new</span> String[]&#123;<span class="string">"executor"</span>&#125;));</div><div class="line"><span class="comment">// 调用StandardService#addConnector</span></div><div class="line">       digester.addSetNext(<span class="string">"Server/Service/Connector"</span>,</div><div class="line">                           <span class="string">"addConnector"</span>,</div><div class="line">                           <span class="string">"org.apache.catalina.connector.Connector"</span>);</div><div class="line">...</div><div class="line">digester.addRuleSet(<span class="keyword">new</span> EngineRuleSet(<span class="string">"Server/Service/"</span>));</div><div class="line">       digester.addRuleSet(<span class="keyword">new</span> HostRuleSet(<span class="string">"Server/Service/Engine/"</span>));</div><div class="line">       digester.addRuleSet(<span class="keyword">new</span> ContextRuleSet(<span class="string">"Server/Service/Engine/Host/"</span>));</div><div class="line">...</div><div class="line"><span class="comment">// When the 'engine' is found, set the parentClassLoader.</span></div><div class="line">       digester.addRule(<span class="string">"Server/Service/Engine"</span>,</div><div class="line">                        <span class="keyword">new</span> SetParentClassLoaderRule(parentClassLoader));</div><div class="line">...</div><div class="line"><span class="keyword">long</span> t2=System.currentTimeMillis();</div><div class="line">       <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</div><div class="line">           log.debug(<span class="string">"Digester for server.xml created "</span> + ( t2-t1 ));</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> (digester);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// EngineRuleSet</span></div><div class="line"><span class="comment">// prefix=Server/Service/</span></div><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRuleInstances</span><span class="params">(Digester digester)</span> </span>&#123;</div><div class="line"></div><div class="line">       digester.addObjectCreate(prefix + <span class="string">"Engine"</span>,</div><div class="line">                                <span class="string">"org.apache.catalina.core.StandardEngine"</span>,</div><div class="line">                                <span class="string">"className"</span>);</div><div class="line">       digester.addSetProperties(prefix + <span class="string">"Engine"</span>);</div><div class="line"><span class="comment">// 匹配到Server/Service/Engine节点时新建EngineConfig实例</span></div><div class="line"><span class="comment">// 如果存在engineConfigClass属性则使用其指定的类名</span></div><div class="line"><span class="comment">// Add this LifecycleListener to our associated component</span></div><div class="line">       <span class="comment">// c.addLifecycleListener(listener);</span></div><div class="line"><span class="comment">// 调用StandardEngine#addLifecycleListener绑定监听器</span></div><div class="line">       digester.addRule(prefix + <span class="string">"Engine"</span>,</div><div class="line">                        <span class="keyword">new</span> LifecycleListenerRule</div><div class="line">                        (<span class="string">"org.apache.catalina.startup.EngineConfig"</span>,</div><div class="line">                         <span class="string">"engineConfigClass"</span>));</div><div class="line"><span class="comment">// 调用StandardService#setContainer(Engine)</span></div><div class="line">       digester.addSetNext(prefix + <span class="string">"Engine"</span>,</div><div class="line">                           <span class="string">"setContainer"</span>,</div><div class="line">                           <span class="string">"org.apache.catalina.Container"</span>);</div><div class="line">...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// HostRuleSet</span></div><div class="line"><span class="comment">// prefix=Server/Service/Engine</span></div><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRuleInstances</span><span class="params">(Digester digester)</span> </span>&#123;</div><div class="line"></div><div class="line">       digester.addObjectCreate(prefix + <span class="string">"Host"</span>,</div><div class="line">                                <span class="string">"org.apache.catalina.core.StandardHost"</span>,</div><div class="line">                                <span class="string">"className"</span>);</div><div class="line">       digester.addSetProperties(prefix + <span class="string">"Host"</span>);</div><div class="line">       digester.addRule(prefix + <span class="string">"Host"</span>,</div><div class="line">                        <span class="keyword">new</span> CopyParentClassLoaderRule());</div><div class="line"><span class="comment">// 调用StandardHost#addLifecycleListener绑定监听器HostConfig</span></div><div class="line">       digester.addRule(prefix + <span class="string">"Host"</span>,</div><div class="line">                        <span class="keyword">new</span> LifecycleListenerRule</div><div class="line">                        (<span class="string">"org.apache.catalina.startup.HostConfig"</span>,</div><div class="line">                         <span class="string">"hostConfigClass"</span>));</div><div class="line"><span class="comment">// 调用StandardEngine#addChild</span></div><div class="line">       digester.addSetNext(prefix + <span class="string">"Host"</span>,</div><div class="line">                           <span class="string">"addChild"</span>,</div><div class="line">                           <span class="string">"org.apache.catalina.Container"</span>);</div><div class="line">...</div><div class="line">digester.addObjectCreate(prefix + <span class="string">"Host/Valve"</span>,</div><div class="line">                                <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></div><div class="line">                                <span class="string">"className"</span>);</div><div class="line">       digester.addSetProperties(prefix + <span class="string">"Host/Valve"</span>);</div><div class="line"><span class="comment">// 调用StandardHost#addValve</span></div><div class="line">       digester.addSetNext(prefix + <span class="string">"Host/Valve"</span>,</div><div class="line">                           <span class="string">"addValve"</span>,</div><div class="line">                           <span class="string">"org.apache.catalina.Valve"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ContextRuleSet</span></div><div class="line"><span class="comment">// prefix=Server/Service/Engine/Host</span></div><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRuleInstances</span><span class="params">(Digester digester)</span> </span>&#123;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (create) &#123;</div><div class="line">           digester.addObjectCreate(prefix + <span class="string">"Context"</span>,</div><div class="line">                   <span class="string">"org.apache.catalina.core.StandardContext"</span>, <span class="string">"className"</span>);</div><div class="line">           digester.addSetProperties(prefix + <span class="string">"Context"</span>);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           digester.addRule(prefix + <span class="string">"Context"</span>, <span class="keyword">new</span> SetContextPropertiesRule());</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (create) &#123;</div><div class="line"><span class="comment">// 调用StandardContext#addLifecycleListener绑定监听器ContextConfig</span></div><div class="line">           digester.addRule(prefix + <span class="string">"Context"</span>,</div><div class="line">                            <span class="keyword">new</span> LifecycleListenerRule</div><div class="line">                                (<span class="string">"org.apache.catalina.startup.ContextConfig"</span>,</div><div class="line">                                 <span class="string">"configClass"</span>));</div><div class="line"><span class="comment">// 调用StandardHost#addChild</span></div><div class="line">           digester.addSetNext(prefix + <span class="string">"Context"</span>,</div><div class="line">                               <span class="string">"addChild"</span>,</div><div class="line">                               <span class="string">"org.apache.catalina.Container"</span>);</div><div class="line">       &#125;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面的注释可以方便跟读源码，后文会进一步补充说明。下面是Tomcat各组件之间的关系，可以看到所有组件都实现了LifeCycle，LifeCycleBase中定义了init，start，stop，destory方法用于生命周期的管理，相应的留下了initInternal，startInternal，stopInternal，destoryInternal方法由组件去实现。</p><p><img src="https://moetu.fastmirror.org/images/2017/09/20/tomcat_uml4ebe2ac9c474a906.jpg" alt=""></p><p>首先看一下StandardServer中initInternal方法的实现，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">// Populate the extension validator with JARs from common and shared</span></div><div class="line">    <span class="comment">// class loaders</span></div><div class="line">    <span class="keyword">if</span> (getCatalina() != <span class="keyword">null</span>) &#123;</div><div class="line">        ClassLoader cl = getCatalina().getParentClassLoader();</div><div class="line">        <span class="comment">// Walk the class loader hierarchy. Stop at the system class loader.</span></div><div class="line">        <span class="comment">// This will add the shared (if present) and common class loaders</span></div><div class="line">        <span class="keyword">while</span> (cl != <span class="keyword">null</span> &amp;&amp; cl != ClassLoader.getSystemClassLoader()) &#123;</div><div class="line">            <span class="keyword">if</span> (cl <span class="keyword">instanceof</span> URLClassLoader) &#123;</div><div class="line">...</div><div class="line">            &#125;</div><div class="line">            cl = cl.getParent();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Initialize our defined Services</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; services.length; i++) &#123;</div><div class="line">        services[i].init();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>如果是从<code>org.apache.catalina.startup.Bootstrap</code>启动，由解析server.xml生成的Server实例，会调用<code>getServer().setCatalina(this);</code>。相反，Spring Boot中从<code>org.apache.catalina.startup.Tomcat</code>启动，则getCatalina为null。</p><p>接着是初始化Service，从这里以及解析xml时调用StandardServer#addService可以看出，一个Server可以包含多个Service。继续看一下StandardService中initInternal方法的实现，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">      <span class="keyword">if</span> (container != <span class="keyword">null</span>) &#123;</div><div class="line">          container.init();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">      <span class="comment">// Initialize our defined Connectors</span></div><div class="line">      <span class="keyword">synchronized</span> (connectorsLock) &#123;</div><div class="line">          <span class="keyword">for</span> (Connector connector : connectors) &#123;</div><div class="line">              <span class="keyword">try</span> &#123;</div><div class="line">                  connector.init();</div><div class="line">...</div><div class="line">          &#125;</div><div class="line">      &#125;</div></pre></td></tr></table></figure><p>Service会接着初始化Engine，Connector，从这里以及解析xml时调用StandardService#addConnector，StandardService#setContainer(Engine)可以看出一个Service可以包含一个Engine以及多个Connector。</p><p>实例化StandardEngine时，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * Create a new StandardEngine component with the default basic Valve.</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">StandardEngine</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">      <span class="keyword">super</span>();</div><div class="line">      pipeline.setBasic(<span class="keyword">new</span> StandardEngineValve());</div><div class="line">...</div><div class="line">      <span class="comment">// By default, the engine will hold the reloading thread</span></div><div class="line">      backgroundProcessorDelay = <span class="number">10</span>;</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>StandardEngine的父类ContainerBase中，initInternal初始化了一个startStopExecutor线程池。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * Set the Coyote protocol which will be used by the connector.</span></div><div class="line"><span class="comment">   *</span></div><div class="line"><span class="comment">   * <span class="doctag">@param</span> protocol The Coyote protocol name</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProtocol</span><span class="params">(String protocol)</span> </span>&#123;</div><div class="line"></div><div class="line">...</div><div class="line">          <span class="keyword">if</span> (<span class="string">"HTTP/1.1"</span>.equals(protocol)) &#123;</div><div class="line">              setProtocolHandlerClassName</div><div class="line">                  (<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span>);</div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"AJP/1.3"</span>.equals(protocol)) &#123;</div><div class="line">              setProtocolHandlerClassName</div><div class="line">                  (<span class="string">"org.apache.coyote.ajp.AjpNioProtocol"</span>);</div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (protocol != <span class="keyword">null</span>) &#123;</div><div class="line">              setProtocolHandlerClassName(protocol);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>解析xml时通过Connector#Connector(String)实例化Connector，所以protocolHandlerClassName为<code>org.apache.coyote.http11.Http11NioProtocol</code>（仅以此为例）。在<code>Tomcat 8.0.0 (markt)</code>的<a href="http://tomcat.apache.org/tomcat-8.0-doc/changelog.html" target="_blank" rel="external">更新日志</a>中可以看到</p><blockquote><p>The default connector is now the Java NIO connector even when specifying HTTP/1.1 as protocol (fhanik)</p></blockquote><p>获取，设置Connector的部分属性时，会通过下面的方法获取、设置ProtocolHandler的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Return a configured property.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProperty</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">    String repl = name;</div><div class="line">    <span class="keyword">if</span> (replacements.get(name) != <span class="keyword">null</span>) &#123;</div><div class="line">        repl = replacements.get(name);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> IntrospectionUtils.getProperty(protocolHandler, repl);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Set a configured property.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setProperty</span><span class="params">(String name, String value)</span> </span>&#123;</div><div class="line">    String repl = name;</div><div class="line">    <span class="keyword">if</span> (replacements.get(name) != <span class="keyword">null</span>) &#123;</div><div class="line">        repl = replacements.get(name);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> IntrospectionUtils.setProperty(protocolHandler, repl, value);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Connector中的initInternal调用ProtocolHandler#init，这里NioEndpoint的名字设置为<code>http-nio-8080</code>，接着AbstractEndpoint#init会调用NioEndpoint#bind</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * Initialize the endpoint.</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">      serverSock = ServerSocketChannel.open();</div><div class="line">      socketProperties.setProperties(serverSock.socket());</div><div class="line">      InetSocketAddress addr = (getAddress()!=<span class="keyword">null</span>?<span class="keyword">new</span> InetSocketAddress(getAddress(),getPort()):<span class="keyword">new</span> InetSocketAddress(getPort()));</div><div class="line">      serverSock.socket().bind(addr,getBacklog());</div><div class="line">      serverSock.configureBlocking(<span class="keyword">true</span>); <span class="comment">//mimic APR behavior</span></div><div class="line">      serverSock.socket().setSoTimeout(getSocketProperties().getSoTimeout());</div><div class="line"></div><div class="line">      <span class="comment">// Initialize thread count defaults for acceptor, poller</span></div><div class="line">      <span class="keyword">if</span> (acceptorThreadCount == <span class="number">0</span>) &#123;</div><div class="line">          <span class="comment">// <span class="doctag">FIXME:</span> Doesn't seem to work that well with multiple accept threads</span></div><div class="line">          acceptorThreadCount = <span class="number">1</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (pollerThreadCount &lt;= <span class="number">0</span>) &#123;</div><div class="line">          <span class="comment">//minimum one poller thread</span></div><div class="line">          pollerThreadCount = <span class="number">1</span>;</div><div class="line">      &#125;</div><div class="line">      stopLatch = <span class="keyword">new</span> CountDownLatch(pollerThreadCount);</div><div class="line"></div><div class="line">      <span class="comment">// Initialize SSL if needed</span></div><div class="line">...</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (oomParachute&gt;<span class="number">0</span>) reclaimParachute(<span class="keyword">true</span>);</div><div class="line">      selectorPool.open();</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>实例化serverSocket、Acceptor线程数默认为1，Poller线程数不大于2，stopLatch用于Poller线程计数器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * The size of the OOM parachute.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> oomParachute = <span class="number">1024</span>*<span class="number">1024</span>;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * The oom parachute, when an OOM error happens,</span></div><div class="line"><span class="comment"> * will release the data, giving the JVM instantly</span></div><div class="line"><span class="comment"> * a chunk of data to be able to recover with.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">byte</span>[] oomParachuteData = <span class="keyword">null</span>;</div></pre></td></tr></table></figure><p>如果上面的过程一切顺利的话，所有组件完成初始化，进入<code>after_init</code>。</p><h4 id="进一步阅读"><a href="#进一步阅读" class="headerlink" title="进一步阅读"></a>进一步阅读</h4><p><a href="http://www.cnblogs.com/kismetv/p/7228274.html" target="_blank" rel="external">http://www.cnblogs.com/kismetv/p/7228274.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/blog/tomcat-start0&quot;&gt;Tomcat启动之从脚本说起&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tomcat启动之initInternal&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/tomcat-start2&quot;&gt;Tomcat启动之sta
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Tomcat" scheme="https://g.hijkl.mn/categories/Java/Tomcat/"/>
    
    
  </entry>
  
  <entry>
    <title>Tomcat启动之从脚本说起</title>
    <link href="https://g.hijkl.mn/blog/tomcat-start0/"/>
    <id>https://g.hijkl.mn/blog/tomcat-start0/</id>
    <published>2017-08-30T07:11:00.000Z</published>
    <updated>2017-09-20T11:40:06.479Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Tomcat启动之从脚本说起</li><li><a href="/blog/tomcat-start1">Tomcat启动之initInternal</a></li><li><a href="/blog/tomcat-start2">Tomcat启动之startInternal</a></li><li><a href="/blog/tomcat-start3">Tomcat启动之Context启动</a></li><li><a href="/blog/tomcat-start4">Tomcat启动之Connector启动</a></li></ul><p><a href="/blog/life-of-servlet/">Servlet的生命周期</a>已经介绍了前置的准备知识，现在一切都从<code>bin/startup.sh</code>开始了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># resolve links - $0 may be a softlink</div><div class="line">PRG=&quot;$0&quot;</div><div class="line"></div><div class="line">while [ -h &quot;$PRG&quot; ] ; do</div><div class="line">  ls=`ls -ld &quot;$PRG&quot;`</div><div class="line">  link=`expr &quot;$ls&quot; : &apos;.*-&gt; \(.*\)$&apos;`</div><div class="line">  if expr &quot;$link&quot; : &apos;/.*&apos; &gt; /dev/null; then</div><div class="line">    PRG=&quot;$link&quot;</div><div class="line">  else</div><div class="line">    PRG=`dirname &quot;$PRG&quot;`/&quot;$link&quot;</div><div class="line">  fi</div><div class="line">done</div><div class="line"></div><div class="line">PRGDIR=`dirname &quot;$PRG&quot;`</div><div class="line">EXECUTABLE=catalina.sh</div><div class="line"></div><div class="line">exec &quot;$PRGDIR&quot;/&quot;$EXECUTABLE&quot; start &quot;$@&quot;</div></pre></td></tr></table></figure><p>Shell脚本只有经常使用才能熟悉起来。如果启动脚本是软连接，那么</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls -ld startup.sh</div><div class="line">lrwxrwxrwx 1 work work 20 Apr 18 11:25 startup.sh -&gt; /data/tomcat/bin/startup.sh</div></pre></td></tr></table></figure><p>接着<code>expr</code>的作用</p><blockquote><p>Pattern matches return the string matched between ( and ) or null; if ( and ) are not used, they return the number of characters matched or 0.</p></blockquote><p>所以最终获得启动脚本的实际文件路径。</p><p><code>startup.sh</code>是<code>catalina.sh</code>的一个引导脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">eval $_NOHUP &quot;\&quot;$_RUNJAVA\&quot;&quot; &quot;\&quot;$LOGGING_CONFIG\&quot;&quot; $LOGGING_MANAGER $JAVA_OPTS $CATALINA_OPTS \</div><div class="line">  -Djava.endorsed.dirs=&quot;\&quot;$JAVA_ENDORSED_DIRS\&quot;&quot; -classpath &quot;\&quot;$CLASSPATH\&quot;&quot; \</div><div class="line">  -Dcatalina.base=&quot;\&quot;$CATALINA_BASE\&quot;&quot; \</div><div class="line">  -Dcatalina.home=&quot;\&quot;$CATALINA_HOME\&quot;&quot; \</div><div class="line">  -Djava.io.tmpdir=&quot;\&quot;$CATALINA_TMPDIR\&quot;&quot; \</div><div class="line">  org.apache.catalina.startup.Bootstrap &quot;$@&quot; start \</div><div class="line">  &gt;&gt; &quot;$CATALINA_OUT&quot; 2&gt;&amp;1 &quot;&amp;&quot;</div></pre></td></tr></table></figure><p><code>catalina.sh</code>中最终从<code>org.apache.catalina.startup.Bootstrap</code>开始启动Tomcat。</p><p>现在我们需要到Tomcat源码中看一下<code>Bootstrap</code>类，这里有两种方式，</p><ul><li>从Tomcat官网<a href="http://ftp.cuhk.edu.hk/pub/packages/apache.org/tomcat/tomcat-8/v8.0.46/src/" target="_blank" rel="external">Source Code Distributions</a>下载源码，解压后导入IDE，根据<code>build.properties.default</code>手动处理依赖；</li><li>使用Spring Boot的web工程依赖内嵌的Tomcat，<code>org.apache.tomcat.embed</code>，对于使用Spring Boot，基于Maven构建的工程，可以直接下载、查看源码（这种方式不方便debug）。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Tomcat启动之从脚本说起&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/tomcat-start1&quot;&gt;Tomcat启动之initInternal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/tomcat-start2&quot;&gt;Tomcat启动之sta
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Tomcat" scheme="https://g.hijkl.mn/categories/Java/Tomcat/"/>
    
    
  </entry>
  
  <entry>
    <title>The temporary upload location is not valid</title>
    <link href="https://g.hijkl.mn/blog/invalid-upload-location/"/>
    <id>https://g.hijkl.mn/blog/invalid-upload-location/</id>
    <published>2017-08-02T10:52:00.000Z</published>
    <updated>2017-09-20T10:54:42.835Z</updated>
    
    <content type="html"><![CDATA[<p>在使用基于Spring Boot的web服务上传文件时会遇到如下异常，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">2017-08-02 08:50:01.518 ERROR 14062 --- [http-nio-8090-exec-3] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.web.multipart.MultipartException: Could not parse multipart servlet request; nested exception is java.io.IOException: The temporary upload location [/tmp/tomcat.5135536038560092961.8080/work/Tomcat/localhost/ROOT] is not valid] with root cause</div><div class="line"></div><div class="line">java.io.IOException: The temporary upload location [/tmp/tomcat.5135536038560092961.8080/work/Tomcat/localhost/ROOT] is not valid</div><div class="line">at org.apache.catalina.connector.Request.parseParts(Request.java:2758) ~[tomcat-embed-core-8.0.36.jar!/:8.0.36]</div><div class="line">at org.apache.catalina.connector.Request.parseParameters(Request.java:3158) ~[tomcat-embed-core-8.0.36.jar!/:8.0.36]</div><div class="line">at org.apache.catalina.connector.Request.getParameter(Request.java:1108) ~[tomcat-embed-core-8.0.36.jar!/:8.0.36]</div><div class="line">at org.apache.catalina.connector.RequestFacade.getParameter(RequestFacade.java:380) ~[tomcat-embed-core-8.0.36.jar!/:8.0.36]</div><div class="line">at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:70) ~[spring-web-4.2.7.RELEASE.jar!/:4.2.7.RELEASE]</div><div class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.7.RELEASE.jar!/:4.2.7.RELEASE]</div><div class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) ~[tomcat-embed-core-8.0.36.jar!/:8.0.36]</div><div class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) ~[tomcat-embed-core-8.0.36.jar!/:8.0.36]</div><div class="line">at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121) ~[spring-web-4.2.7.RELEASE.jar!/:4.2.7.RELEASE]</div><div class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.7.RELEASE.jar!/:4.2.7.RELEASE]</div><div class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) ~[tomcat-embed-core-8.0.36.jar!/:8.0.36]</div><div class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) ~[tomcat-embed-core-8.0.36.jar!/:8.0.36]</div><div class="line">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:212) ~[tomcat-embed-core-8.0.36.jar!/:8.0.36]</div><div class="line">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) [tomcat-embed-core-8.0.36.jar!/:8.0.36]</div><div class="line">at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502) [tomcat-embed-core-8.0.36.jar!/:8.0.36]</div><div class="line">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141) [tomcat-embed-core-8.0.36.jar!/:8.0.36]</div><div class="line">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.0.36.jar!/:8.0.36]</div><div class="line">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) [tomcat-embed-core-8.0.36.jar!/:8.0.36]</div><div class="line">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:528) [tomcat-embed-core-8.0.36.jar!/:8.0.36]</div><div class="line">at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1099) [tomcat-embed-core-8.0.36.jar!/:8.0.36]</div><div class="line">at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:670) [tomcat-embed-core-8.0.36.jar!/:8.0.36]</div><div class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1520) [tomcat-embed-core-8.0.36.jar!/:8.0.36]</div><div class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1476) [tomcat-embed-core-8.0.36.jar!/:8.0.36]</div><div class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_131]</div><div class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_131]</div><div class="line">at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.0.36.jar!/:8.0.36]</div><div class="line">at java.lang.Thread.run(Thread.java:745) [na:1.7.0_131]</div></pre></td></tr></table></figure><p>三种解决方式，</p><ol><li>重启服务；</li><li>创建这个不存在的临时路径；</li><li>类似如下修改，<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function">MultipartConfigElement <span class="title">multipartConfigElement</span><span class="params">()</span> </span>&#123;</div><div class="line">    MultipartConfigFactory factory = <span class="keyword">new</span> MultipartConfigFactory();</div><div class="line">    factory.setLocation(<span class="string">"/tmp/file"</span>);</div><div class="line">    <span class="keyword">return</span> factory.createMultipartConfig();</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p><code>/tmp/tomcat.5135536038560092961.8080/work/Tomcat/localhost/ROOT</code>这个路径是怎么来的呢？为什么设置location也可以解决异常呢？</p><p>接下来就通过跟读源码解释这些疑问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">ServletContextInitializer... initializers)</span> </span>&#123;</div><div class="line">Tomcat tomcat = <span class="keyword">new</span> Tomcat();</div><div class="line">File baseDir = (<span class="keyword">this</span>.baseDirectory != <span class="keyword">null</span> ? <span class="keyword">this</span>.baseDirectory</div><div class="line">: createTempDir(<span class="string">"tomcat"</span>));</div><div class="line">tomcat.setBaseDir(baseDir.getAbsolutePath());</div><div class="line">Connector connector = <span class="keyword">new</span> Connector(<span class="keyword">this</span>.protocol);</div><div class="line">tomcat.getService().addConnector(connector);</div><div class="line">...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Returns the absolute temp dir for given servlet container.</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> prefix servlet container name</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> The temp dir for given servlet container.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">protected</span> File <span class="title">createTempDir</span><span class="params">(String prefix)</span> </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">File tempDir = File.createTempFile(prefix + <span class="string">"."</span>, <span class="string">"."</span> + getPort());</div><div class="line">tempDir.delete();</div><div class="line">tempDir.mkdir();</div><div class="line">tempDir.deleteOnExit();</div><div class="line"><span class="keyword">return</span> tempDir;</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> EmbeddedServletContainerException(</div><div class="line"><span class="string">"Unable to create tempDir. java.io.tmpdir is set to "</span></div><div class="line">+ System.getProperty(<span class="string">"java.io.tmpdir"</span>),</div><div class="line">ex);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>内嵌Tomcat启动，org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory#getEmbeddedServletContainer中，baseDirectory为null时，<code>tomcat.</code>为前缀，<code>.8080</code>为后缀，使用File#createTempFile创建临时路径（前后缀中间为一个Long型随机数），得到<code>/tmp/tomcat.5135536038560092961.8080</code>，并设置为baseDir。org.apache.catalina.startup.Tomcat#getService会触发org.apache.catalina.startup.Tomcat#initBaseDir。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">File baseFile = <span class="keyword">new</span> File(basedir);</div><div class="line">baseFile.mkdirs();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    baseFile = baseFile.getCanonicalFile();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    baseFile = baseFile.getAbsoluteFile();</div><div class="line">&#125;</div><div class="line">server.setCatalinaBase(baseFile);</div><div class="line">System.setProperty(Globals.CATALINA_BASE_PROP, baseFile.getPath());</div><div class="line">basedir = baseFile.getPath();</div><div class="line"></div><div class="line"><span class="keyword">if</span> (catalinaHome == <span class="keyword">null</span>) &#123;</div><div class="line">    server.setCatalinaHome(baseFile);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    File homeFile = <span class="keyword">new</span> File(catalinaHome);</div><div class="line">    homeFile.mkdirs();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        homeFile = homeFile.getCanonicalFile();</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        homeFile = homeFile.getAbsoluteFile();</div><div class="line">    &#125;</div><div class="line">    server.setCatalinaHome(homeFile);</div><div class="line">&#125;</div><div class="line">System.setProperty(Globals.CATALINA_HOME_PROP,</div><div class="line">        server.getCatalinaHome().getPath());</div></pre></td></tr></table></figure><p>initBaseDir中<code>catalina.home</code>，<code>catalina.base</code>被设置为上面创建的临时路径。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">               workDir = <span class="string">"work"</span> + File.separator + engineName +</div><div class="line">                   File.separator + hostName + File.separator + temp;</div><div class="line">           &#125;</div><div class="line">           setWorkDir(workDir);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="comment">// Create this directory if necessary</span></div><div class="line">       File dir = <span class="keyword">new</span> File(workDir);</div><div class="line">       <span class="keyword">if</span> (!dir.isAbsolute()) &#123;</div><div class="line">           String catalinaHomePath = <span class="keyword">null</span>;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               catalinaHomePath = getCatalinaBase().getCanonicalPath();</div><div class="line">               dir = <span class="keyword">new</span> File(catalinaHomePath, workDir);</div><div class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">               log.warn(sm.getString(<span class="string">"standardContext.workCreateException"</span>,</div><div class="line">                       workDir, catalinaHomePath, getName()), e);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (!dir.mkdirs() &amp;&amp; !dir.isDirectory()) &#123;</div><div class="line">           log.warn(sm.getString(<span class="string">"standardContext.workCreateFail"</span>, dir,</div><div class="line">                   getName()));</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="comment">// Set the appropriate servlet context attribute</span></div><div class="line">       <span class="keyword">if</span> (context == <span class="keyword">null</span>) &#123;</div><div class="line">           getServletContext();</div><div class="line">       &#125;</div><div class="line">       context.setAttribute(ServletContext.TEMPDIR, dir);</div><div class="line">       context.setAttributeReadOnly(ServletContext.TEMPDIR);</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>org.apache.catalina.core.StandardContext启动时，postWorkDirectory中得到工作路径<code>work/Tomcat/localhost/ROOT</code>，并将<code>javax.servlet.context.tempdir</code>设置为<code>/tmp/tomcat.5135536038560092961.8080/work/Tomcat/localhost/ROOT</code>。到这里我们解释了这个临时路径是怎么来的。重启服务会创建新的临时路径，和手动创建不存在的临时路径的效果是相同的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">File location;</div><div class="line">String locationStr = mce.getLocation();</div><div class="line"><span class="keyword">if</span> (locationStr == <span class="keyword">null</span> || locationStr.length() == <span class="number">0</span>) &#123;</div><div class="line">location = ((File) context.getServletContext().getAttribute(</div><div class="line">ServletContext.TEMPDIR));</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">// If relative, it is relative to TEMPDIR</span></div><div class="line">location = <span class="keyword">new</span> File(locationStr);</div><div class="line"><span class="keyword">if</span> (!location.isAbsolute()) &#123;</div><div class="line">location = <span class="keyword">new</span> File(</div><div class="line">(File) context.getServletContext().getAttribute(</div><div class="line">ServletContext.TEMPDIR),</div><div class="line">locationStr).getAbsoluteFile();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!location.isDirectory()) &#123;</div><div class="line">parameters.setParseFailedReason(FailReason.MULTIPART_CONFIG_INVALID);</div><div class="line">partsParseException = <span class="keyword">new</span> IOException(</div><div class="line">sm.getString(<span class="string">"coyoteRequest.uploadLocationInvalid"</span>,</div><div class="line">location));</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>org.apache.catalina.connector.Request#parseParts中，location无效时，使用<code>javax.servlet.context.tempdir</code>属性值。设置location相当于替换了临时路径，所以可以解决问题，但是这种解决方式并不完美，</p><blockquote><p>The definition of absolute pathname is system dependent. On UNIX systems, a pathname is absolute if its prefix is “/“. On Microsoft Windows systems, a pathname is absolute if its prefix is a drive specifier followed by “\“, or if its prefix is “\\“.</p></blockquote><p>如果在Windows上将location设置为<code>/tmp/file</code>，location实际为<code>/tmp/tomcat.5135536038560092961.8080/work/Tomcat/localhost/ROOT/tmp/file</code>，有可能出现相同的异常。</p><p>回到开始，baseDirectory为null时会创建临时路径，location无效时会使用临时路径，设置location又面临系统差异的问题，那如果设置baseDirectory而不是设置location可以更好的解决问题。</p><p>相关文章中都会提到<em>服务长时间未使用</em>，那服务又为什么长时间未使用呢？</p><p>参考文档：</p><p><a href="http://wuzhaoyang.me/2017/06/07/spring-multipartexception-location-not-valid.html" target="_blank" rel="external">http://wuzhaoyang.me/2017/06/07/spring-multipartexception-location-not-valid.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用基于Spring Boot的web服务上传文件时会遇到如下异常，&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div 
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Spring" scheme="https://g.hijkl.mn/categories/Java/Spring/"/>
    
      <category term="Web" scheme="https://g.hijkl.mn/categories/Java/Spring/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring学习之AOP</title>
    <link href="https://g.hijkl.mn/blog/aop/"/>
    <id>https://g.hijkl.mn/blog/aop/</id>
    <published>2017-02-21T16:00:00.000Z</published>
    <updated>2017-09-20T02:46:04.792Z</updated>
    
    <content type="html"><![CDATA[<p><code>AnnotationAwareAspectJAutoProxyCreator</code>帮助我们基于注解实现AOP，它实现了<code>BeanPostProcessor</code>接口，那就从其实现的postProcessAfterInitialization方法（AbstractAutoProxyCreator#postProcessAfterInitialization）跟踪AOP是如何实现的。</p><p>跟踪源码来到AbstractAutoProxyCreator#wrapIfNecessary中的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="comment">// Create proxy if we have advice.</span></div><div class="line">Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, <span class="keyword">null</span>);</div><div class="line"><span class="keyword">if</span> (specificInterceptors != DO_NOT_PROXY) &#123;</div><div class="line"><span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.TRUE);</div><div class="line">Object proxy = createProxy(</div><div class="line">bean.getClass(), beanName, specificInterceptors, <span class="keyword">new</span> SingletonTargetSource(bean));</div><div class="line"><span class="keyword">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</div><div class="line"><span class="keyword">return</span> proxy;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</div><div class="line"><span class="keyword">return</span> bean;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在看一下具体每一步做了什么。</p><ul><li><p>getAdvicesAndAdvisorsForBean</p><ul><li>findCandidateAdvisors</li></ul></li></ul><p>首先使用BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean)获取所有的<code>Advisor</code>并使用BeanFactory#getBean(String, Class)实例化。</p><p>接着遍历所有的<code>Object</code>，通过AbstractAspectJAdvisorFactory#isAspect获取具有<code>@Aspect</code>注解的bean；再遍历bean，获取bean中不具有<code>@Pointcut</code>注解的方法，先按具有<code>@Around</code>、<code>@Before</code>、<code>@After</code>、<code>@AfterReturning</code>、<code>@AfterThrowing</code>排序，再按方法名排序；获取注解中表达式对应的<code>AspectJExpressionPointcut</code>；最后得到该bean相关的<code>InstantiationModelAwarePointcutAdvisorImpl</code>列表。使用BeanFactoryAspectJAdvisorsBuilder#advisorsCache保存beanName与其Advisor列表的对应关系。</p><ul><li><ul><li>findAdvisorsThatCanApply</li></ul></li></ul><p>上一步是获取所有切面，这一步是获取应用于当前bean的切面（AopUtils#canApply(Pointcut, Class, boolean)）。</p><p><em>TODO</em></p><p>org.aspectj.util.PartialOrder#sort</p><ul><li>createProxy</li></ul><p>DefaultAdvisorAdapterRegistry#wrap将获取的切面都包装为<code>Advisor</code>实例，实例化<code>ProxyFactory</code>，由ProxyFactory#getProxy(ClassLoader)继续跟踪代码到JdkDynamicAopProxy#getProxy(ClassLoader)，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> Proxy.newProxyInstance(classLoader, proxiedInterfaces, <span class="keyword">this</span>);</div></pre></td></tr></table></figure><p>返回代理之前会将<code>Advised</code>接口添加到proxiedInterfaces末尾。</p><p><code>JdkDynamicAopProxy</code>实现了<code>InvocationHandler</code>，那下面就看一下它是如何实现invoke方法的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Get the interception chain for this method.</span></div><div class="line">List&lt;Object&gt; chain = <span class="keyword">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</div><div class="line"></div><div class="line"><span class="comment">// Check whether we have any advice. If we don't, we can fallback on direct</span></div><div class="line"><span class="comment">// reflective invocation of the target, and avoid creating a MethodInvocation.</span></div><div class="line"><span class="keyword">if</span> (chain.isEmpty()) &#123;</div><div class="line"><span class="comment">// We can skip creating a MethodInvocation: just invoke the target directly</span></div><div class="line"><span class="comment">// Note that the final invoker must be an InvokerInterceptor so we know it does</span></div><div class="line"><span class="comment">// nothing but a reflective operation on the target, and no hot swapping or fancy proxying.</span></div><div class="line">Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);</div><div class="line">retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">// We need to create a method invocation...</span></div><div class="line">invocation = <span class="keyword">new</span> ReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain);</div><div class="line"><span class="comment">// Proceed to the joinpoint through the interceptor chain.</span></div><div class="line">retVal = invocation.proceed();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Massage return value if necessary.</span></div><div class="line">Class&lt;?&gt; returnType = method.getReturnType();</div><div class="line"><span class="keyword">if</span> (retVal != <span class="keyword">null</span> &amp;&amp; retVal == target &amp;&amp; returnType.isInstance(proxy) &amp;&amp;</div><div class="line">!RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) &#123;</div><div class="line"><span class="comment">// Special case: it returned "this" and the return type of the method</span></div><div class="line"><span class="comment">// is type-compatible. Note that we can't help if the target sets</span></div><div class="line"><span class="comment">// a reference to itself in another returned object.</span></div><div class="line">retVal = proxy;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (retVal == <span class="keyword">null</span> &amp;&amp; returnType != Void.TYPE &amp;&amp; returnType.isPrimitive()) &#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AopInvocationException(</div><div class="line"><span class="string">"Null return value from advice does not match primitive return type for: "</span> + method);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> retVal;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;AnnotationAwareAspectJAutoProxyCreator&lt;/code&gt;帮助我们基于注解实现AOP，它实现了&lt;code&gt;BeanPostProcessor&lt;/code&gt;接口，那就从其实现的postProcessAfterInitializati
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Spring" scheme="https://g.hijkl.mn/categories/Java/Spring/"/>
    
      <category term="Note" scheme="https://g.hijkl.mn/categories/Java/Spring/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring学习之从getBean接着说</title>
    <link href="https://g.hijkl.mn/blog/preinstantiatesingletons/"/>
    <id>https://g.hijkl.mn/blog/preinstantiatesingletons/</id>
    <published>2017-02-21T16:00:00.000Z</published>
    <updated>2017-09-20T04:35:38.765Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇留了一个<a href="/blog/abstractapplicationcontext-refresh/#todo">TODO</a>，这里从DefaultListableBeanFactory#preInstantiateSingletons开始继续跟踪源码。</p><p><code>loadBeanDefinitions</code>结束之后，DefaultListableBeanFactory#beanDefinitionNames中保存了beanName。这里通过预调用AbstractBeanFactory#getBean(String)实例化所有的bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Create bean instance.</span></div><div class="line"><span class="keyword">if</span> (mbd.isSingleton()) &#123;</div><div class="line">sharedInstance = getSingleton(beanName, <span class="keyword">new</span> ObjectFactory&lt;Object&gt;() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="keyword">return</span> createBean(beanName, mbd, args);</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> (BeansException ex) &#123;</div><div class="line">destroySingleton(beanName);</div><div class="line"><span class="keyword">throw</span> ex;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>继续跟踪源码来到AbstractAutowireCapableBeanFactory#createBean(String, RootBeanDefinition, Object[])中的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span></div><div class="line">Object bean = resolveBeforeInstantiation(beanName, mbdToUse);</div><div class="line"><span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="keyword">return</span> bean;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbdToUse.getResourceDescription(), beanName,</div><div class="line"><span class="string">"BeanPostProcessor before instantiation of bean failed"</span>, ex);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Object beanInstance = doCreateBean(beanName, mbdToUse, args);</div><div class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">logger.debug(<span class="string">"Finished creating instance of bean '"</span> + beanName + <span class="string">"'"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> beanInstance;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上一篇提到<a href="#registerBeanPostProcessors">注册BeanPostProcessor</a>，这里的resolveBeforeInstantiation即检查注册的<code>BeanPostProcessor</code>是否实现了<code>InstantiationAwareBeanPostProcessor</code>接口，如果是，这里会调用实现的postProcessBeforeInstantiation方法。</p><p><img src="https://moetu.fastmirror.org/images/2017/09/20/instantiationaware_uml89f7b1a4df59dfaa.jpg" alt=""></p><p>接着AbstractAutowireCapableBeanFactory#createBeanInstance实例化bean并包装为<code>BeanWrapper</code>；AbstractAutowireCapableBeanFactory#populateBean会检查注册的<code>BeanPostProcessor</code>是否实现了<code>InstantiationAwareBeanPostProcessor</code>接口，如果是，这里会调用实现的postProcessAfterInstantiation、postProcessPropertyValues方法。AbstractAutowireCapableBeanFactory#applyPropertyValues会尝试使用<code>BeanWrapper</code>注册的<code>PropertyEditor</code>修改property。</p><p>后面的过程和<code>BeanFactory</code> javadoc中的描述一致，会依次调用</p><ol><li>postProcessBeforeInitialization methods of BeanPostProcessors </li><li>InitializingBean’s afterPropertiesSet </li><li>a custom init-method definition </li><li>postProcessAfterInitialization methods of BeanPostProcessors</li></ol><p><code>createBean</code>占了大半篇幅，这里重新回到开头，createBean方法调用结束后得到sharedInstance，接着检查sharedInstance是否为<code>FactoryBean</code>实例，如果是，会调用FactoryBean#getObject方法，方法的返回值作为最后的返回结果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一篇留了一个&lt;a href=&quot;/blog/abstractapplicationcontext-refresh/#todo&quot;&gt;TODO&lt;/a&gt;，这里从DefaultListableBeanFactory#preInstantiateSingletons开始继续跟踪源码。&lt;
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Spring" scheme="https://g.hijkl.mn/categories/Java/Spring/"/>
    
      <category term="Note" scheme="https://g.hijkl.mn/categories/Java/Spring/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring学习之从refresh说起</title>
    <link href="https://g.hijkl.mn/blog/abstractapplicationcontext-refresh/"/>
    <id>https://g.hijkl.mn/blog/abstractapplicationcontext-refresh/</id>
    <published>2017-02-21T16:00:00.000Z</published>
    <updated>2017-09-20T09:28:19.312Z</updated>
    
    <content type="html"><![CDATA[<p>这里我们以<code>ClassPathXmlApplicationContext</code>为例，跟踪Spring的启动过程，其实主要是跟踪AbstractApplicationContext.refresh。</p><h5 id="1"><a href="#1" class="headerlink" title="1"></a>1</h5><p>跟踪源码来到AbstractApplicationContext#prepareRefresh中的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Validate that all properties marked as required are resolvable</span></div><div class="line"><span class="comment">// see ConfigurablePropertyResolver#setRequiredProperties</span></div><div class="line">getEnvironment().validateRequiredProperties();</div></pre></td></tr></table></figure><p>那我们就先来看一下<code>Environment</code>相关的内容。</p><p><code>AbstractApplicationContext</code>内置了<code>environment</code>变量，getEnvironment通过createEnvironment方法，将<code>environment</code>实例化为<code>StandardEnvironment</code>。下面的代码算是一个概括性描述，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ConfigurableEnvironment environment = <span class="keyword">new</span> StandardEnvironment();</div></pre></td></tr></table></figure><p><code>StandardEnvironment</code>重写了customizePropertySources方法，目的是在实例化时将System.getProperties()获取的系统属性以及System.getenv()获取的系统环境变量添加到<code>propertySources</code>中。<code>propertySources</code>是基于<code>CopyOnWriteArrayList&lt;PropertySource&lt;?&gt;&gt;</code>实现的<code>MutablePropertySources</code>实例。</p><p><img src="https://moetu.fastmirror.org/images/2017/09/20/standardenvironment_umlfb0c0742875b9d39.jpg" alt=""></p><p>除了重写customizePropertySources方法，其他的方法仍由<code>AbstractEnvironment</code>来实现，<code>propertySources</code>即内置于<code>AbstractEnvironment</code>。从上图可以看出<code>AbstractEnvironment</code>同时实现了<code>Environment</code>和<code>ConfigurablePropertyResolver</code>接口，<code>AbstractEnvironment</code>基于<code>LinkedHashSet</code>实现了<code>Environment</code>（profile）相关的方法，而<code>ConfigurablePropertyResolver</code>相关的方法则由其内置的一个<code>PropertySourcesPropertyResolver</code>实例来实现。比如，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validateRequiredProperties</span><span class="params">()</span> <span class="keyword">throws</span> MissingRequiredPropertiesException </span>&#123;</div><div class="line"><span class="keyword">this</span>.propertyResolver.validateRequiredProperties();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="2"><a href="#2" class="headerlink" title="2"></a>2</h5><p>接着来到AbstractApplicationContext#obtainFreshBeanFactory中的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">refreshBeanFactory();</div></pre></td></tr></table></figure><p>上述方法由AbstractRefreshableApplicationContext#refreshBeanFactory实现，销毁相关的bean（清理bean相关的对象），关闭BeanFactory，重新实例化BeanFactory。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DefaultListableBeanFactory beanFactory = <span class="keyword">new</span> DefaultListableBeanFactory(<span class="keyword">null</span>);</div></pre></td></tr></table></figure><p>beanFactory通过内置的<code>serializableFactories</code>保存<code>serializationId</code>与其自身弱引用的对应关系。在下面提到的<code>loadBeanDefinitions</code>结束之后，将beanFactory赋给<code>AbstractApplicationContext</code>内置的<code>beanFactory</code>。</p><p><code>loadBeanDefinitions</code>方法被多次重载，最终到AbstractBeanDefinitionReader#loadBeanDefinitions(String, Set)可以分为两部分，第一部分是获取资源文件，第二部分是从资源文件中获取BeanDefinition。</p><ul><li>getResources</li></ul><p>beanFactory自身作为<code>XmlBeanDefinitionReader</code>内置的<code>resourceLoader</code>，得到<code>XmlBeanDefinitionReader</code>实例，同时将其<code>environment</code>赋值给<code>XmlBeanDefinitionReader</code>内置的<code>environment</code>。</p><p>reader将getResources的任务交给其实例化时的<code>resourceLoader</code>，即beanFactory；beanFactory又将getResources的任务交给其内置的<code>resourcePatternResolver</code>（<code>PathMatchingResourcePatternResolver</code>实例）。</p><ul><li>loadBeanDefinitions</li></ul><p>继续跟踪源码来到DefaultBeanDefinitionDocumentReader#doRegisterBeanDefinitions中的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.delegate.isDefaultNamespace(root)) &#123;</div><div class="line">String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);</div><div class="line"><span class="keyword">if</span> (StringUtils.hasText(profileSpec)) &#123;</div><div class="line">String[] specifiedProfiles = StringUtils.tokenizeToStringArray(</div><div class="line">profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</div><div class="line"><span class="keyword">if</span> (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里如果元素配置了profile属性，则会通过前面的<code>environment</code>检查配置的profile是否符合，如果不符合则跳过当前资源文件。</p><p>接着来到DefaultBeanDefinitionDocumentReader#processBeanDefinition中的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);</div><div class="line">...</div><div class="line"><span class="comment">// Register the final decorated instance.</span></div><div class="line">BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</div></pre></td></tr></table></figure><p>BeanDefinitionReaderUtils#createBeanDefinition返回<code>GenericBeanDefinition</code>实例，设置其相应的属性，包装成<code>BeanDefinitionHolder</code>实例。</p><p>这里getRegistry返回的是实例化<code>XmlBeanDefinitionReader</code>时传入的beanFactory，所以回到DefaultListableBeanFactory#registerBeanDefinition。</p><p>关于设置<code>GenericBeanDefinition</code>实例的属性，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanClassName</span><span class="params">(String beanClassName)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.beanClass = beanClassName;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBeanClassName</span><span class="params">()</span> </span>&#123;</div><div class="line">Object beanClassObject = <span class="keyword">this</span>.beanClass;</div><div class="line"><span class="keyword">if</span> (beanClassObject <span class="keyword">instanceof</span> Class) &#123;</div><div class="line"><span class="keyword">return</span> ((Class&lt;?&gt;) beanClassObject).getName();</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span> (String) beanClassObject;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="3"><a href="#3" class="headerlink" title="3"></a>3</h5><p>接着跟踪源码来到AbstractApplicationContext#prepareBeanFactory中的，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Configure the bean factory with context callbacks.</span></div><div class="line">beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationContextAwareProcessor(<span class="keyword">this</span>));</div></pre></td></tr></table></figure><p>看一下<code>ApplicationContextAwareProcessor</code>重写的postProcessBeforeInitialization方法，该方法会调用ApplicationContextAwareProcessor#invokeAwareInterfaces</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeAwareInterfaces</span><span class="params">(Object bean)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> Aware) &#123;</div><div class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> EnvironmentAware) &#123;</div><div class="line">((EnvironmentAware) bean).setEnvironment(<span class="keyword">this</span>.applicationContext.getEnvironment());</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> EmbeddedValueResolverAware) &#123;</div><div class="line">((EmbeddedValueResolverAware) bean).setEmbeddedValueResolver(</div><div class="line"><span class="keyword">new</span> EmbeddedValueResolver(<span class="keyword">this</span>.applicationContext.getBeanFactory()));</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ResourceLoaderAware) &#123;</div><div class="line">((ResourceLoaderAware) bean).setResourceLoader(<span class="keyword">this</span>.applicationContext);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ApplicationEventPublisherAware) &#123;</div><div class="line">((ApplicationEventPublisherAware) bean).setApplicationEventPublisher(<span class="keyword">this</span>.applicationContext);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> MessageSourceAware) &#123;</div><div class="line">((MessageSourceAware) bean).setMessageSource(<span class="keyword">this</span>.applicationContext);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ApplicationContextAware) &#123;</div><div class="line">((ApplicationContextAware) bean).setApplicationContext(<span class="keyword">this</span>.applicationContext);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果bean实现了以下接口，包括<code>EnvironmentAware</code>、<code>EmbeddedValueResolverAware</code>、<code>ResourceLoaderAware</code>、<code>ApplicationEventPublisherAware</code>、<code>MessageSourceAware</code>、<code>ApplicationContextAware</code>，则bean在初始化之前，相应的实现方法将被调用。</p><h5 id="4"><a href="#4" class="headerlink" title="4"></a>4</h5><p>跟踪源码来到AbstractApplicationContext#invokeBeanFactoryPostProcessors，获取beanFactory中已经注册的<code>BeanFactoryPostProcessor</code>，调用其中的postProcessBeanFactory方法。调用之前会判断处理器是否实现了<code>BeanDefinitionRegistryPostProcessor</code>接口，如果实现了，则先调用其中的postProcessBeanDefinitionRegistry方法，不再调用postProcessBeanFactory方法。</p><p><img src="https://moetu.fastmirror.org/images/2017/09/20/beanfactorypostprocessor_umle966b2defa9d4585.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String[] postProcessorNames =</div><div class="line">beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</div></pre></td></tr></table></figure><p>再使用DefaultListableBeanFactory#getBeanNamesForType获取未注册的<code>BeanFactoryPostProcessor</code>，重复上述过程。</p><h5 id="5"><a href="#5" class="headerlink" title="5"></a><a href="#registerBeanPostProcessors">5</a></h5><p>接着跟踪源码来到AbstractApplicationContext#registerBeanPostProcessors，注册尚未注册的<code>BeanPostProcessor</code>，最后会重新注册实现了<code>MergedBeanDefinitionPostProcessor</code>接口的处理器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// First, register the BeanPostProcessors that implement PriorityOrdered.</span></div><div class="line">sortPostProcessors(beanFactory, priorityOrderedPostProcessors);</div><div class="line">registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);</div><div class="line"></div><div class="line"><span class="comment">// Next, register the BeanPostProcessors that implement Ordered.</span></div><div class="line">...</div><div class="line">sortPostProcessors(beanFactory, orderedPostProcessors);</div><div class="line">registerBeanPostProcessors(beanFactory, orderedPostProcessors);</div><div class="line"></div><div class="line"><span class="comment">// Now, register all regular BeanPostProcessors.</span></div><div class="line">...</div><div class="line">registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);</div><div class="line"></div><div class="line"><span class="comment">// Finally, re-register all internal BeanPostProcessors.</span></div><div class="line">sortPostProcessors(beanFactory, internalPostProcessors);</div><div class="line">registerBeanPostProcessors(beanFactory, internalPostProcessors);</div></pre></td></tr></table></figure><p><img src="https://moetu.fastmirror.org/images/2017/09/20/beanpostprocessor_uml046fb3f461390697.jpg" alt=""></p><h5 id="6"><a href="#6" class="headerlink" title="6"></a>6</h5><p>接着初始化<code>MessageSource</code>、<code>ApplicationEventMulticaster</code>，注册监听者并广播早期的<code>ApplicationEvents</code>。</p><p><a href="#todo"><em>TODO</em></a></p><ul><li>DefaultListableBeanFactory#preInstantiateSingletons</li><li>AbstractBeanFactory#doGetBean</li></ul><p>最后初始化<code>LifecycleProcessor</code>。</p><h5 id="7"><a href="#7" class="headerlink" title="7"></a>7</h5><p><a href="http://blog.163.com/axuandebin@126/blog/static/118777042009410248557/" target="_blank" rel="external">Spring容器-ApplicationContext的启动过程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里我们以&lt;code&gt;ClassPathXmlApplicationContext&lt;/code&gt;为例，跟踪Spring的启动过程，其实主要是跟踪AbstractApplicationContext.refresh。&lt;/p&gt;
&lt;h5 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; c
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Spring" scheme="https://g.hijkl.mn/categories/Java/Spring/"/>
    
      <category term="Note" scheme="https://g.hijkl.mn/categories/Java/Spring/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>反序列化时的readResolve</title>
    <link href="https://g.hijkl.mn/blog/class-defined-readresolve/"/>
    <id>https://g.hijkl.mn/blog/class-defined-readresolve/</id>
    <published>2017-01-22T16:00:00.000Z</published>
    <updated>2017-09-20T02:46:04.786Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.aop;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Canonical Pointcut instance that always matches.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Rod Johnson</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TruePointcut</span> <span class="keyword">implements</span> <span class="title">Pointcut</span>, <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> TruePointcut INSTANCE = <span class="keyword">new</span> TruePointcut();</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Enforce Singleton pattern.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">TruePointcut</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> ClassFilter <span class="title">getClassFilter</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> ClassFilter.TRUE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> MethodMatcher <span class="title">getMethodMatcher</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> MethodMatcher.TRUE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Required to support serialization. Replaces with canonical</span></div><div class="line"><span class="comment"> * instance on deserialization, protecting Singleton pattern.</span></div><div class="line"><span class="comment"> * Alternative to overriding &#123;<span class="doctag">@code</span> equals()&#125;.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> INSTANCE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="string">"Pointcut.TRUE"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里直接给出<code>TruePointcut</code>的源码，可以看出其使用了单例模式。但是这里定义了一个<code>private Object readResolve()</code>，javadoc中还写着<code>在反序列化时保护单例模式</code>，那它是如何起到保护作用的呢？</p><p>联想到我们可以在序列化、反序列化时自定义<code>writeObject</code>、<code>readObject</code>方法，那<code>readResolve</code>是不是与其类似呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></div><div class="line"><span class="function"><span class="keyword">throws</span> IOException</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></div><div class="line"><span class="function"><span class="keyword">throws</span> IOException, ClassNotFoundException</span>;</div></pre></td></tr></table></figure><p>ObjectInputStream#readOrdinaryObject中的部分源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">      <span class="keyword">if</span> (desc.isExternalizable()) &#123;</div><div class="line">          readExternalData((Externalizable) obj, desc);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">          readSerialData(obj, desc);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      handles.finish(passHandle);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (obj != <span class="keyword">null</span> &amp;&amp;</div><div class="line">          handles.lookupException(passHandle) == <span class="keyword">null</span> &amp;&amp;</div><div class="line">          desc.hasReadResolveMethod())</div><div class="line">      &#123;</div><div class="line">          Object rep = desc.invokeReadResolve(obj);</div><div class="line">          <span class="keyword">if</span> (unshared &amp;&amp; rep.getClass().isArray()) &#123;</div><div class="line">              rep = cloneArray(rep);</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">if</span> (rep != obj) &#123;</div><div class="line">              handles.setObject(passHandle, obj = rep);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> obj;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>从源码可以看出，如果自定义了<code>readResolve</code>方法，反序列化的最终结果将取决于该方法的返回值。所以这里可以<code>在反序列时保护单例模式</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>关于IntegerCache</title>
    <link href="https://g.hijkl.mn/blog/about-integercache/"/>
    <id>https://g.hijkl.mn/blog/about-integercache/</id>
    <published>2017-01-09T16:00:00.000Z</published>
    <updated>2017-09-20T04:33:42.277Z</updated>
    
    <content type="html"><![CDATA[<p>很久没有写文章了，今天以一段代码重新开始，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Integer a = <span class="number">127</span>;</div><div class="line">Integer b = <span class="number">127</span>;</div><div class="line"><span class="keyword">int</span> c = <span class="number">127</span>;</div><div class="line">System.out.println(a == b);</div><div class="line">System.out.println(a == c);</div><div class="line"></div><div class="line">a = <span class="number">128</span>;</div><div class="line">b = <span class="number">128</span>;</div><div class="line">c = <span class="number">128</span>;</div><div class="line">System.out.println(a == b);</div><div class="line">System.out.println(a == c);</div><div class="line"></div><div class="line">a = <span class="keyword">new</span> Integer(<span class="number">127</span>);</div><div class="line">b = <span class="keyword">new</span> Integer(<span class="number">127</span>);</div><div class="line">System.out.println(a == b);</div></pre></td></tr></table></figure></p><p><img src="https://moetu.fastmirror.org/images/2017/09/20/about_Integerb0879f6e12659e70.jpg" alt=""></p><p>这里还给出了代码截图，可以看到这段代码在IDE中有多处warning提示，包括</p><blockquote><p>Condition ‘a == c’ is always ‘true’<br><br>Unnecessary boxing ‘new Integer(127)’<br><br>Number objects are compared using ‘==’, not ‘equals()’</p></blockquote><p>实际编码时应该按照提示修改warning。这里直接给出执行结果</p><blockquote><p>true<br><br>true<br><br>false<br><br>true<br><br>false</p></blockquote><p>了解自动拆箱的知识后，<code>a == c</code>的结果很好理解，包装类型a与原始类型c进行比较时，自动拆箱，相当于<code>127 == 127</code>以及<code>128 == 128</code>，所以c相关的结果都是true。再看一下最后一个<code>a == b</code>，了解equals与==的区别后，结果是false也好理解，这里还提示我们应该使用equals来比较包装类型a和b。本文主要关注前两个<code>a == b</code>，127时结果是true，128时结果是false。</p><p>了解自动装箱的知识后，明白这里<code>Integer a = 127</code>等价于<code>Integer a = Integer.valueOf(127)</code>。那现在就看一下<code>valueOf</code>这个方法做了什么。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</div><div class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</div><div class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>原来<code>valueOf</code>与<code>IntegerCache</code>这个类相关，那再看一下<code>IntegerCache</code>这个类做了什么。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        <span class="comment">// high value may be configured by property</span></div><div class="line">        <span class="keyword">int</span> h = <span class="number">127</span>;</div><div class="line">        String integerCacheHighPropValue =</div><div class="line">            sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</div><div class="line">        <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</div><div class="line">            i = Math.max(i, <span class="number">127</span>);</div><div class="line">            <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></div><div class="line">            h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        high = h;</div><div class="line"></div><div class="line">        cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</div><div class="line">        <span class="keyword">int</span> j = low;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</div><div class="line">            cache[k] = <span class="keyword">new</span> Integer(j++);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>IntegerCache</code>中定义了一个Integer数组，初始化时，这个数组预先保存了<code>[-128, high]</code>之间的Integer实例。<code>valueOf</code>方法在自动装箱时会判断需要装箱的数是否在这个区间内，如果在则返回预先保存的实例，不在则新实例化。默认的区间范围是<code>[-128, 127]</code>，第一次装箱127时，返回的是预先保存的同一个实例，所以结果为true；第二次装箱128时，返回的是新实例化的对象，所以结果为false。</p><p>除了Integer内建了IntegerCache，Byte、Short、Long也内建了相应的类。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很久没有写文章了，今天以一段代码重新开始，&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Could not get the value for parameter compilerId for plugin execution</title>
    <link href="https://g.hijkl.mn/blog/update-maven-project/"/>
    <id>https://g.hijkl.mn/blog/update-maven-project/</id>
    <published>2016-04-15T16:00:00.000Z</published>
    <updated>2017-09-20T04:33:11.069Z</updated>
    
    <content type="html"><![CDATA[<p>最近Eclipse下的很多Maven工程报错，导入其他的Maven工程时也同样报错，报错的日志类似如下，</p><blockquote><p>CoreException: Could not get the value for parameter compilerId for plugin execution default-compile: PluginResolutionException: Plugin org.apache.maven.plugins:maven-compiler-plugin:3.1 or one of its dependencies could not be resolved: The following artifacts could not be resolved: org.apache.maven:maven-core:jar:2.0.9, org.apache.maven:maven-settings:jar:2.0.9, org.apache.maven:maven-plugin-parameter-documenter:jar:2.0.9, org.apache.maven:maven-profile:jar:2.0.9, org.apache.maven:maven-model:jar:2.0.9, org.apache.maven:maven-repository-metadata:jar:2.0.9, org.apache.maven:maven-error-diagnostics:jar:2.0.9, org.apache.maven:maven-project:jar:2.0.9, org.apache.maven:maven-plugin-registry:jar:2.0.9, org.apache.maven:maven-plugin-descriptor:jar:2.0.9, org.apache.maven:maven-artifact-manager:jar:2.0.9, org.apache.maven:maven-monitor:jar:2.0.9, org.apache.maven:maven-toolchain:jar:1.0, org.apache.maven.shared:maven-shared-utils:jar:0.1, com.google.code.findbugs:jsr305:jar:2.0.1, org.apache.maven.shared:maven-shared-incremental:jar:1.1, org.codehaus.plexus:plexus-component-annotations:jar:1.5.5, org.codehaus.plexus:plexus-compiler-api:jar:2.2, org.codehaus.plexus:plexus-compiler-manager:jar:2.2, org.codehaus.plexus:plexus-compiler-javac:jar:2.2, org.codehaus.plexus:plexus-container-default:jar:1.5.5, org.codehaus.plexus:plexus-classworlds:jar:2.2.2, org.apache.xbean:xbean-reflect:jar:3.4, log4j:log4j:jar:1.2.12, commons-logging:commons-logging-api:jar:1.1, com.google.collections:google-collections:jar:1.0: Failure to transfer org.apache.maven:maven-core:jar:2.0.9 from <a href="https://repo.maven.apache.org/maven2" target="_blank" rel="external">https://repo.maven.apache.org/maven2</a> was cached in the local repository, resolution will not be reattempted until the update interval of central has elapsed or updates are forced. Original error: Could not transfer artifact org.apache.maven:maven-core:jar:2.0.9 from/to central (<a href="https://repo.maven.apache.org/maven2" target="_blank" rel="external">https://repo.maven.apache.org/maven2</a>): The operation was cancelled.</p></blockquote><p>开始认为是<code>org.apache.maven.plugins:maven-compiler-plugin:3.1</code>插件下载失败，检查本地仓库时，发现该插件已下载成功。今天参考 <a href="http://blog.csdn.net/testcs_dn/article/details/38818581" target="_blank" rel="external">CoreException: Could not get the value for parameter compilerId for plugin execution default-compile</a> 继续向下看日志，关键的错误日志应该是，</p><blockquote><p>Failure to transfer org.apache.maven:maven-core:jar:2.0.9 from <a href="https://repo.maven.apache.org/maven2" target="_blank" rel="external">https://repo.maven.apache.org/maven2</a> was cached in the local repository, resolution will not be reattempted until the update interval of central has elapsed or updates are forced.</p></blockquote><p>确认本地仓库中的<code>org.apache.maven:maven-core:jar:2.0.9</code>已下载成功，仍然报错的原因是，</p><blockquote><p>resolution will not be reattempted until the update interval of central has elapsed or updates are forced.</p></blockquote><p>参考 <a href="http://stackoverflow.com/questions/21721357/error-in-pom-xml-maven-build" target="_blank" rel="external">Error in pom.xml Maven build</a>，在Eclipse中使用<code>Alt+F5</code>快捷键，在弹出的Update Maven Project对话框中选择报错的Maven工程，勾选下图中的<code>Force Update of Snapshots/Releases</code>，更新结束后，问题解决。</p><p><img src="https://moetu.fastmirror.org/images/2017/09/20/alt_f55a5571a2d9a8ed9b.png" alt="alt + F5"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近Eclipse下的很多Maven工程报错，导入其他的Maven工程时也同样报错，报错的日志类似如下，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CoreException: Could not get the value for parameter compilerId 
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Maven" scheme="https://g.hijkl.mn/categories/Java/Maven/"/>
    
    
  </entry>
  
  <entry>
    <title>利用后缀数组解决问题</title>
    <link href="https://g.hijkl.mn/blog/about-suffix-array-and-else/"/>
    <id>https://g.hijkl.mn/blog/about-suffix-array-and-else/</id>
    <published>2016-04-02T16:00:00.000Z</published>
    <updated>2017-09-20T09:28:19.287Z</updated>
    
    <content type="html"><![CDATA[<p>在介绍后缀数组之前，以字符串<code>&quot;aabaaaab&quot;</code>为例建立两个字符串数组，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String[] before = <span class="keyword">new</span> String[s.length()];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; before.length; i++) &#123;</div><div class="line">before[i] = s.substring(i);</div><div class="line">&#125;</div><div class="line">java.util.Arrays.sort(before);</div><div class="line">String[] after = before;</div></pre></td></tr></table></figure><p>before数组的内容为，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="string">"aabaaaab"</span>, <span class="string">"abaaaab"</span>, <span class="string">"baaaab"</span>, <span class="string">"aaaab"</span>, <span class="string">"aaab"</span>, <span class="string">"aab"</span>, <span class="string">"ab"</span>, <span class="string">"b"</span> &#125;</div></pre></td></tr></table></figure><p>对before数组元素按字典序进行排序，得到after数组，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="string">"aaaab"</span>, <span class="string">"aaab"</span>, <span class="string">"aab"</span>, <span class="string">"aabaaaab"</span>, <span class="string">"ab"</span>, <span class="string">"abaaaab"</span>, <span class="string">"b"</span>, <span class="string">"baaaab"</span> &#125;</div></pre></td></tr></table></figure><p>后缀数组suffix的定义为，<code>after[i]=before[suffix[i]-1]</code>，即排第几的元素是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">3</span> &#125;</div></pre></td></tr></table></figure><p>名次数组rank的定义为，<code>before[i]=after[rank[i]-1]</code>，即该元素排第几？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span> &#125;</div></pre></td></tr></table></figure><p>height数组保存after数组中相邻元素之间的最长前缀，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">String[] height = <span class="keyword">new</span> String[after.length];</div><div class="line">height[<span class="number">0</span>] = <span class="string">""</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; height.length; i++) &#123;</div><div class="line"><span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(; x &lt; after[i - <span class="number">1</span>].length() &amp;&amp; y &lt; after[i].length(); x++, y++) &#123;</div><div class="line">    <span class="keyword">if</span>(after[i - <span class="number">1</span>].charAt(x) != after[i].charAt(y)) &#123;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">height[i] = after[i - <span class="number">1</span>].substring(<span class="number">0</span>, x);</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="string">""</span>, <span class="string">"aaa"</span>, <span class="string">"aa"</span>, <span class="string">"aab"</span>, <span class="string">"a"</span>, <span class="string">"ab"</span>, <span class="string">""</span>, <span class="string">"b"</span> &#125;</div></pre></td></tr></table></figure><h5 id="可重叠最长重复子串"><a href="#可重叠最长重复子串" class="headerlink" title="可重叠最长重复子串"></a>可重叠最长重复子串</h5><p>即为height数组中length最大的元素，<code>&quot;aaa&quot;</code>、<code>&quot;aab&quot;</code></p><h5 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a>最长回文子串</h5><p>将原字符串翻转后拼接到原字符串末尾，中间用特殊字符（如<code>$</code>）隔开，得到新的字符串<code>&quot;aabaaaab$baaaabaa&quot;</code>，新字符串的height数组为，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="string">""</span>, <span class="string">""</span>, <span class="string">"a"</span>, <span class="string">"aa"</span>, <span class="string">"aaaab"</span>, <span class="string">"aaa"</span>, <span class="string">"aaab"</span>, <span class="string">"aa"</span>, <span class="string">"aab"</span>, <span class="string">"aabaa"</span>, <span class="string">"a"</span>, <span class="string">"ab"</span>, <span class="string">"abaa"</span>, <span class="string">""</span>, <span class="string">"b"</span>, <span class="string">"baa"</span>, <span class="string">"baaaab"</span> &#125;</div></pre></td></tr></table></figure><p>最长回文子串即为height数组中length最大的元素，<code>&quot;baaaab&quot;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在介绍后缀数组之前，以字符串&lt;code&gt;&amp;quot;aabaaaab&amp;quot;&lt;/code&gt;为例建立两个字符串数组，&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div cl
      
    
    </summary>
    
      <category term="Coding Interview" scheme="https://g.hijkl.mn/categories/Coding-Interview/"/>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Coding-Interview/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>最近公共祖先问题</title>
    <link href="https://g.hijkl.mn/blog/least-common-ancestor/"/>
    <id>https://g.hijkl.mn/blog/least-common-ancestor/</id>
    <published>2016-03-27T16:00:00.000Z</published>
    <updated>2017-09-20T09:28:19.276Z</updated>
    
    <content type="html"><![CDATA[<h5 id="从git-merge说起"><a href="#从git-merge说起" class="headerlink" title="从git merge说起"></a>从git merge说起</h5><p>接着 <a href="http://jemoii.github.io/blog/working-with-git/" target="_blank" rel="external">使用Git协同工作</a> 中的内容，使用伪代码描述<code>git merge</code>的原理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">找到目标分支current和被合并分支merge的共同祖先分支ancestor；</div><div class="line">// 在fix_bug分支上执行git merge master</div><div class="line">// master为目标分支，fix_bug为被合并分支</div><div class="line">if(ancestor == merge) &#123;</div><div class="line">return;</div><div class="line">&#125; else if(ancestor == current) &#123;</div><div class="line">fast forward merge，分支current指向merge</div><div class="line">&#125; else &#123;</div><div class="line">确定ancestor与merge的差异</div><div class="line">try &#123;</div><div class="line">    将差异合并到current</div><div class="line">    &#125; catch(合并出现矛盾) &#123;</div><div class="line">    添加矛盾标记，通知用户解决矛盾</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    根据current、merge创建新的子分支</div><div class="line">    分支current指向新的子分支</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Git的分支结构为树形结构，这里找到两个分支的共同祖先分支，即<code>求树中两个节点的最近公共祖先</code>。</p><p>如果每个分支可以确定其父分支，即树中节点具有指向其父亲的parent指针，那问题可以转化为<code>求两个链表的公共节点</code>。两个节点分别使用parent指针遍历到根节点root，遍历步数之差即两节点到公共节点的步数之差，由步数较大的节点先遍历步数之差对应的步数，接着两节点同时使用parent指针遍历，当parent指针的指向一致时，其指向即所求的公共节点。可以进一步参考 <a href="http://zhedahht.blog.163.com/blog/static/254111742008053169567/" target="_blank" rel="external">两链表的第一个公共结点</a> 。</p><p>如果树为平衡二叉树，根据BST的性质，从根节点root开始遍历，如果当前节点的值同时大于两节点的值，说明两节点都位于当前节点的左子树，接下来向左子树遍历；如果当前节点的值同时小于两节点的值，说明两节点都位于当前节点的右子树，接下来向右子树遍历；如果当前节点的值位于两节点的值之间，那当前节点即所求的公共节点。</p><p>下面介绍使用<code>Tarjan离线算法</code>解决上述问题，Tarjan算法基于深度遍历和<code>并查集</code>，先介绍并查集相关的内容。</p><h5 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h5><p><a href="http://blog.csdn.net/dellaserss/article/details/7724401" target="_blank" rel="external">并查集详解 (转)</a> 非常生动地介绍了并查集相关的内容，这里给出并查集的Java实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFindSet</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] set;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INIT_SET_SIZE = <span class="number">8</span>;</div><div class="line"><span class="comment">/** 参数超出并查集下标范围，返回ERROR_INDEX */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ERROR_INDEX = -<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">UnionFindSet</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>(INIT_SET_SIZE);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">UnionFindSet</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">set = <span class="keyword">new</span> <span class="keyword">int</span>[size];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; set.length; i++) &#123;</div><div class="line">set[i] = i;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 等价于find(x, true)</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (outOfLength(x)) &#123;</div><div class="line"><span class="keyword">return</span> ERROR_INDEX;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (set[x] != x) &#123;</div><div class="line">set[x] = find(set[x]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> set[x];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> compress</span></div><div class="line"><span class="comment"> *            是否压缩路径</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> x超出并查集下标范围，返回ERROR_INDEX；否则返回x的根元素</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">boolean</span> compress)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (outOfLength(x)) &#123;</div><div class="line"><span class="keyword">return</span> ERROR_INDEX;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (compress) &#123;</div><div class="line"><span class="keyword">return</span> find(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> temp = x;</div><div class="line"><span class="keyword">while</span> (set[temp] != temp) &#123;</div><div class="line">temp = set[temp];</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> y</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> x、y的根元素是否相等</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (outOfLength(x) || outOfLength(y)) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> find(x) == find(y);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 将x、y合并到同一根元素下</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> y</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> prex = find(x);</div><div class="line"><span class="keyword">int</span> prey = find(y);</div><div class="line"><span class="keyword">if</span> (prex != ERROR_INDEX &amp;&amp; prey != ERROR_INDEX &amp;&amp; prex != prey) &#123;</div><div class="line">set[prex] = prey;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">outOfLength</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> index &lt; <span class="number">0</span> || index &gt;= set.length;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="Tanjar离线算法"><a href="#Tanjar离线算法" class="headerlink" title="Tanjar离线算法"></a>Tanjar离线算法</h5><p>理解并查集之后，Tanjar算法即将并查集与深度遍历有效结合，伪代码描述原理为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Tarjan(u) &#123;</div><div class="line">begin</div><div class="line">设置u号节点的祖先为u</div><div class="line">        深度遍历u的子树</div><div class="line">        访问每一条与u相关的询问u和v</div><div class="line">        -若v已经被访问过，则输出v当前的祖先t</div><div class="line">        标记u为已被访问，将所有u的子节点包括u本身的祖先改为u的父节点</div><div class="line">    end</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>具体的Java实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> node</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> queryList</span></div><div class="line"><span class="comment"> *            LCA查询条件列表，Query类的u、v属性为查询条件，即已知的两节点；ancestor属性保存查询结果，即公共节点</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(TreeNode node, ArrayList&lt;Query&gt; queryList)</span> </span>&#123;</div><div class="line">node.ancestor = node;<span class="comment">// 初始标记node的祖先为自己</span></div><div class="line"><span class="keyword">for</span> (TreeNode child : node.children) &#123;</div><div class="line">tarjan(child, queryList);<span class="comment">// 深度遍历</span></div><div class="line">join(child, node);<span class="comment">// 将子节点的祖先修改为node</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">node.searched = <span class="keyword">true</span>;<span class="comment">// 标记node已被访问</span></div><div class="line"><span class="comment">// 遍历查询条件，如果查询条件与node相关且两节点已被访问，基于并查集查找公共节点</span></div><div class="line"><span class="keyword">for</span> (Query query : queryList) &#123;</div><div class="line"><span class="keyword">if</span> (query.u == node) &#123;</div><div class="line"><span class="keyword">if</span> (query.v.searched) &#123;</div><div class="line">query.ancestor = find(query.v);</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (query.v == node) &#123;</div><div class="line"><span class="keyword">if</span> (query.u.searched) &#123;</div><div class="line">query.ancestor = find(query.u);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;从git-merge说起&quot;&gt;&lt;a href=&quot;#从git-merge说起&quot; class=&quot;headerlink&quot; title=&quot;从git merge说起&quot;&gt;&lt;/a&gt;从git merge说起&lt;/h5&gt;&lt;p&gt;接着 &lt;a href=&quot;http://jemoii.gith
      
    
    </summary>
    
      <category term="Coding Interview" scheme="https://g.hijkl.mn/categories/Coding-Interview/"/>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Coding-Interview/Java/"/>
    
      <category term="Note" scheme="https://g.hijkl.mn/categories/Coding-Interview/Java/Note/"/>
    
      <category term="Web" scheme="https://g.hijkl.mn/categories/Coding-Interview/Java/Note/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>对ConcurrentHashMap的解释</title>
    <link href="https://g.hijkl.mn/blog/explanation-for-concurrenthashmap/"/>
    <id>https://g.hijkl.mn/blog/explanation-for-concurrenthashmap/</id>
    <published>2016-02-26T16:00:00.000Z</published>
    <updated>2017-09-20T02:46:04.773Z</updated>
    
    <content type="html"><![CDATA[<p><code>java.util.concurrent.ConcurrentHashMap</code>整体为Segment数组，<code>concurrentLevel</code>为初始化参数，2^(sshift-1)^ &lt; concurrentLevel &lt;= 2^sshift^，Segment数组的大小ssize = 2^sshift^，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> sshift = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> ssize = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span> (ssize &lt; concurrencyLevel) &#123;</div><div class="line">++sshift;</div><div class="line">ssize &lt;&lt;= <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>ssize * (c - 1) &lt; initialCapacity &lt;= ssize * c</code>，每个数组元素Segment的容量cap与c的大小关系，和ssize与concurrentLevel的大小关系一致，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> c = initialCapacity / ssize;</div><div class="line"><span class="keyword">if</span> (c * ssize &lt; initialCapacity)</div><div class="line">++c;</div><div class="line"><span class="keyword">int</span> cap = MIN_SEGMENT_TABLE_CAPACITY;</div><div class="line"><span class="keyword">while</span> (cap &lt; c)</div><div class="line">cap &lt;&lt;= <span class="number">1</span>;</div></pre></td></tr></table></figure><p>初始化时，使用<code>UNsafe.putOrderedObject</code>将新建Segment存入数组的<code>0</code>下标处，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Class sc = Segment[].class;</div><div class="line">SBASE = UNSAFE.arrayBaseOffset(sc);</div><div class="line">ss = UNSAFE.arrayIndexScale(sc);</div><div class="line">SSHIFT = <span class="number">31</span> - Integer.numberOfLeadingZeros(ss);</div><div class="line"><span class="comment">// create segments and segments[0]</span></div><div class="line">Segment&lt;K,V&gt; s0 =</div><div class="line"><span class="keyword">new</span> Segment&lt;K,V&gt;(loadFactor, (<span class="keyword">int</span>)(cap * loadFactor),</div><div class="line">(HashEntry&lt;K,V&gt;[])<span class="keyword">new</span> HashEntry[cap]);</div><div class="line">Segment&lt;K,V&gt;[] ss = (Segment&lt;K,V&gt;[])<span class="keyword">new</span> Segment[ssize];</div><div class="line">UNSAFE.putOrderedObject(ss, SBASE, s0); <span class="comment">// ordered write of segments[0]</span></div></pre></td></tr></table></figure><p>使用<code>put</code>方法添加新的键值对时，仍然先计算key的哈希值，<code>hash</code>方法与<code>HashMap</code>中的<code>hash</code>方法类似，添加了<strong>再哈希</strong>步骤，其目的是为了减少哈希冲突，使元素能够均匀的分布在不同的Segment上，从而提高容器的存取效率，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> h = hashSeed;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((<span class="number">0</span> != h) &amp;&amp; (k <span class="keyword">instanceof</span> String)) &#123;</div><div class="line">    <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    h ^= k.hashCode();</div><div class="line"></div><div class="line">    <span class="comment">// Spread bits to regularize both segment and index locations,</span></div><div class="line">    <span class="comment">// using variant of single-word Wang/Jenkins hash.</span></div><div class="line">    h += (h &lt;&lt;  <span class="number">15</span>) ^ <span class="number">0xffffcd7d</span>;</div><div class="line">    h ^= (h &gt;&gt;&gt; <span class="number">10</span>);</div><div class="line">    h += (h &lt;&lt;   <span class="number">3</span>);</div><div class="line">    h ^= (h &gt;&gt;&gt;  <span class="number">6</span>);</div><div class="line">    h += (h &lt;&lt;   <span class="number">2</span>) + (h &lt;&lt; <span class="number">14</span>);</div><div class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>接着根据哈希值确定数组下标，这里的<code>segmentShift</code>和<code>segmentMask</code>是初始化时根据<code>sshift</code>和<code>ssize</code>确定的，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.segmentShift = <span class="number">32</span> - sshift;</div><div class="line"><span class="keyword">this</span>.segmentMask = ssize - <span class="number">1</span>;</div><div class="line"><span class="keyword">int</span> j = (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;</div></pre></td></tr></table></figure><p>反复确认<code>j</code>下标处的Segment是否为空，为空则依照<code>0</code>下标处的Segment新建Segment，使用<code>UNSAFE.compareAndSwapObject</code>更新<code>null</code>为新建Segment，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u))</div><div class="line">== <span class="keyword">null</span>) &#123;</div><div class="line"><span class="keyword">if</span> (UNSAFE.compareAndSwapObject(ss, u, <span class="keyword">null</span>, seg = s))</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>接下来的操作之前会尝试对该Segment加锁，Segment整体为HashEntry数组，每个数组元素为HashEntry链表，继续根据哈希值确定数组下标，遍历<code>index</code>下标处的HashEntry链表，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">HashEntry&lt;K,V&gt;[] tab = table;</div><div class="line"><span class="keyword">int</span> index = (tab.length - <span class="number">1</span>) &amp; hash;</div><div class="line">HashEntry&lt;K,V&gt; first = entryAt(tab, index);</div></pre></td></tr></table></figure><p>与HashMap中的比较逻辑一致，确定key是否存在，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ((k = e.key) == key || (e.hash == hash &amp;&amp; key.equals(k))) &#123;</div><div class="line"><span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>如果已存在，更新其对应的value；如果未存在，根据键值对新建HashEntry对象，使用<code>UNsafe.putOrderedObject</code>将新建HashEntry存入数组的<code>index</code>下标处。使用<code>get</code>方法获取键对应的值时，不需要对当前Segment加锁，类似地先确定Segment数组下标，再确定HashEntry数组下标，遍历链表，比较确定key是否存在，如果存在返回对应的value；不存在返回<code>null</code>。</p><p>文章中表述不清的地方可以进一步参考<a href="http://www.infoq.com/cn/articles/ConcurrentHashMap" target="_blank" rel="external">聊聊并发（四）——深入分析ConcurrentHashMap</a>，对于UNsafe类中的方法，可以参考<a href="http://www.cnblogs.com/mickole/articles/3757278.html" target="_blank" rel="external">Java中Unsafe类详解</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;java.util.concurrent.ConcurrentHashMap&lt;/code&gt;整体为Segment数组，&lt;code&gt;concurrentLevel&lt;/code&gt;为初始化参数，2^(sshift-1)^ &amp;lt; concurrentLevel &amp;lt
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Note" scheme="https://g.hijkl.mn/categories/Java/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>对Hashtable和HashMap的补充解释</title>
    <link href="https://g.hijkl.mn/blog/explanation-for-hashtable-and-hashmap/"/>
    <id>https://g.hijkl.mn/blog/explanation-for-hashtable-and-hashmap/</id>
    <published>2016-02-25T16:00:00.000Z</published>
    <updated>2017-09-20T02:46:04.770Z</updated>
    
    <content type="html"><![CDATA[<p><code>java.util.Hashtable</code>使用<code>synchronized</code>关键字实现线程安全，value不可以为空，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>key也不可为空，计算key的哈希值时会调用它的<code>hashCode</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</div><div class="line"><span class="comment">// hashSeed will be zero if alternative hashing is disabled.</span></div><div class="line">    <span class="keyword">return</span> hashSeed ^ k.hashCode();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>默认情况下<code>hashSeed</code>为0，即不使用<code>alternative hashing</code>，可以设置容量达到特定阀值时开始使用<code>alternative hashing</code>，这时，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hashSeed = sun.misc.Hashing.randomHashSeed(<span class="keyword">this</span>);</div></pre></td></tr></table></figure><p><code>Hashtable</code>整体为数组<code>tab</code>，每个数组元素为Entry链表，使用<code>put</code>方法添加新的键值对时，首先计算key的哈希值，根据哈希值确定数组下标，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</div></pre></td></tr></table></figure><p>接着遍历<code>index</code>处的Entry链表，通过下面的比较逻辑确定key是否存在，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</div><div class="line"><span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果已存在，更新其对应的value；如果未存在，根据键值对新建Entry对象，插入到当前Entry链表的首位。使用<code>get</code>方法获取键对应的值时，类似地确定数组下标，遍历链表，比较确定key是否存在，如果存在返回对应的value；不存在返回<code>null</code>。</p><p>容量大于设定的阀值时会调用<code>rehash</code>方法扩容，这时会重新计算每个键值对的数组下标及位置。</p><p><code>java.util.HashMap</code>与<code>Hashtable</code>类似，区别在于无<code>synchronized</code>关键字，<code>HashMap</code>中key、value可以为空，key为<code>null</code>的键值对保存在数组的<code>0</code>下标处。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> h = hashSeed;</div><div class="line"><span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;</div><div class="line"><span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</div><div class="line">&#125;</div><div class="line"></div><div class="line">h ^= k.hashCode();</div><div class="line"></div><div class="line"><span class="comment">// This function ensures that hashCodes that differ only by</span></div><div class="line"><span class="comment">// constant multiples at each bit position have a bounded</span></div><div class="line"><span class="comment">// number of collisions (approximately 8 at default load factor).</span></div><div class="line">h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</div><div class="line"><span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>HashMap</code>中确定key是否存在的比较逻辑，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (e.hash == hash &amp;&amp; </div><div class="line">((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</div><div class="line"><span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;java.util.Hashtable&lt;/code&gt;使用&lt;code&gt;synchronized&lt;/code&gt;关键字实现线程安全，value不可以为空，&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Note" scheme="https://g.hijkl.mn/categories/Java/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Git协同工作</title>
    <link href="https://g.hijkl.mn/blog/working-with-git/"/>
    <id>https://g.hijkl.mn/blog/working-with-git/</id>
    <published>2016-02-17T16:00:00.000Z</published>
    <updated>2017-09-20T09:28:19.258Z</updated>
    
    <content type="html"><![CDATA[<p>本文没有深层次的分析<strong>Git</strong>的工作原理，而是从实用角度，关注常用命令，简单分析了执行命令时发生的具体动作。</p><h4 id="建立本地仓库"><a href="#建立本地仓库" class="headerlink" title="建立本地仓库"></a>建立本地仓库</h4><p>从远端仓库克隆数据到本地仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/jemoii/Koenigspress.git Koenigspress</div></pre></td></tr></table></figure><p>执行<code>git clone</code>命令，默认将远端仓库命名为<code>origin</code>，</p><ul><li>拉取远端仓库的所有数据；</li><li>创建一个指向远端仓库<code>master</code>分支的指针，并在本地将其命名为<code>origin/master</code>；</li><li>创建一个跟踪<code>origin/master</code>的本地<code>master</code>分支。</li></ul><p>添加<code>-o away</code>选项，即执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone -o away https://github.com/jemoii/Koenigspress.git Koenigspress</div></pre></td></tr></table></figure><p>远端仓库被命名为<code>away</code>，相应的本地指向远端仓库<code>master</code>分支的指针被命名为<code>away/master</code></p><p>回到上一步，可以通过<code>git remote show origin</code>查看远端仓库的相关信息，这里的<code>origin</code>即远端仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ git remote</div><div class="line">origin</div><div class="line"></div><div class="line">$ git remote show origin</div><div class="line">* remote origin</div><div class="line">  Fetch URL: https://github.com/jemoii/Koenigspress.git</div><div class="line">  Push  URL: https://github.com/jemoii/Koenigspress.git</div><div class="line">  HEAD branch: master</div><div class="line">  Remote branch:</div><div class="line">    master tracked</div><div class="line">  Local branch configured for &apos;git pull&apos;:</div><div class="line">    master merges with remote master</div><div class="line">  Local ref configured for &apos;git push&apos;:</div><div class="line">    master pushes to master (up to date)</div></pre></td></tr></table></figure><h4 id="管理本地分支"><a href="#管理本地分支" class="headerlink" title="管理本地分支"></a>管理本地分支</h4><p>现在执行<code>git branch optimize_theme</code>在<code>master</code>上新建<code>optimize_theme</code>分支，执行<code>git checkout optimize_theme</code>切换到<code>optimize_theme</code>分支上。</p><p>可以使用<code>git checkout -b optimize_theme</code>合并上述两步操作，执行<code>git branch</code>显示本地仓库分支列表，<code>*</code>标识当前位于<code>optimize_theme</code>分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b optimize_theme</div><div class="line">Switched to a new branch &apos;optimize_theme&apos;</div><div class="line"></div><div class="line">$ git branch</div><div class="line">  master</div><div class="line">* optimize_theme</div></pre></td></tr></table></figure><h4 id="提交更新"><a href="#提交更新" class="headerlink" title="提交更新"></a>提交更新</h4><p>修改文件后，执行<code>git add .</code>将修改内容添加到<code>暂存区</code>，接着执行<code>git commit -m &#39;提交主题优化&#39;</code>将修改内容提交到<code>本地仓库</code>。</p><p>可以使用<code>git commit -a -m &#39;提交主题优化&#39;</code>合并上述两步操作。</p><p>现在使用<code>git push origin optimize_theme</code>将修改内容推送到远端仓库，远端仓库新建分支<code>optimize</code>保存修改内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git push origin optimize_theme</div><div class="line">Username for &apos;https://github.com&apos;: jemoii</div><div class="line">Password for &apos;https://jemoii@github.com&apos;:</div><div class="line">Total 0 (delta 0), reused 0 (delta 0)</div><div class="line">To https://github.com/jemoii/Koenigspress.git</div><div class="line"> * [new branch]      optimize_theme -&gt; optimize_theme</div></pre></td></tr></table></figure><p>现在执行<code>git remote show origin</code>查看远端仓库信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ git remote show origin</div><div class="line">* remote origin</div><div class="line">  Fetch URL: https://github.com/jemoii/Koenigspress.git</div><div class="line">  Push  URL: https://github.com/jemoii/Koenigspress.git</div><div class="line">  HEAD branch: master</div><div class="line">  Remote branches:</div><div class="line">    master         tracked</div><div class="line">    optimize_theme tracked</div><div class="line">  Local branch configured for &apos;git pull&apos;:</div><div class="line">    master merges with remote master</div><div class="line">  Local refs configured for &apos;git push&apos;:</div><div class="line">    master         pushes to master         (up to date)</div><div class="line">    optimize_theme pushes to optimize_theme (up to date)</div></pre></td></tr></table></figure><p>可以看到除了<code>master</code>分支，现在本地分支<code>optimize_theme</code>跟踪<code>origin/optimize_theme</code>。</p><h4 id="更新本地仓库"><a href="#更新本地仓库" class="headerlink" title="更新本地仓库"></a>更新本地仓库</h4><p>如果有另外一个<code>协同者</code>与我们一样克隆了远端仓库的数据到他的本地仓库，新建<code>fix_bug</code>分支，类似的将修改内容推送到远端仓库，且在我们执行<code>git push</code>前将修改内容合并到远端仓库的<code>master</code>分支，现在远端仓库<code>master</code>分支上的内容与我们执行<code>git clone</code>时相比发生了变化，我们再执行<code>git push</code>时会提示需要先将<code>协同者</code>的修改内容合并到我们的分支上。</p><p>首先执行<code>git checkout master</code>切换到<code>master</code>分支，执行<code>git fetch origin</code>，</p><ul><li>从远端仓库获取本地仓库没有的数据，移动<code>origin/master</code>指针指向更新后的位置；</li><li>创建一个指向远端仓库<code>fix_bug</code>分支的指针，并在本地将其命名为<code>origin/fix_bug</code>，本地不会新建<code>fix_bug</code>分支，只创建不可编辑的<code>origin/fix_bug</code>指针；</li></ul><p>现在执行<code>git merge origin/master</code>将更新的数据合并到本地仓库的<code>master</code>分支，接着执行<code>git checkout optimize_theme</code>重新切换到<code>optimize_theme</code>分支，执行<code>git merge master</code>将更新的数据合并到本地仓库的<code>optimize_theme</code>分支。</p><p>现在执行<code>git push origin optimize_theme</code>可以将我们的修改内容推送到远端仓库。</p><p>回到上一步，在<code>master</code>分支上使用<code>git pull</code>可以合并<code>git fetch origin</code>、<code>git merge origin/master</code>两步操作。</p><p><em>关于<code>git merge</code></em></p><h4 id="附"><a href="#附" class="headerlink" title="附"></a>附</h4><p>协同开发中创建工作分支的两种方式，第一种是前面提到的在本地仓库新建工作分支，执行<code>git push</code>时在远端仓库创建对应的工作分支；另一种是在远端仓库新建工作分支，执行<code>新建/更新</code>时在本地仓库创建指向远端仓库工作分支的指针，接着执行类似如下的命令，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b fix_bug origin/fix_bug</div></pre></td></tr></table></figure><p>在本地仓库创建<code>fix_bug</code>分支，跟踪<code>origin/fix_bug</code>，执行结束后切换到<code>fix_bug</code>分支。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文没有深层次的分析&lt;strong&gt;Git&lt;/strong&gt;的工作原理，而是从实用角度，关注常用命令，简单分析了执行命令时发生的具体动作。&lt;/p&gt;
&lt;h4 id=&quot;建立本地仓库&quot;&gt;&lt;a href=&quot;#建立本地仓库&quot; class=&quot;headerlink&quot; title=&quot;建立本
      
    
    </summary>
    
      <category term="Web" scheme="https://g.hijkl.mn/categories/Web/"/>
    
      <category term="Note" scheme="https://g.hijkl.mn/categories/Web/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>让CAS服务端跑起来</title>
    <link href="https://g.hijkl.mn/blog/cas-server/"/>
    <id>https://g.hijkl.mn/blog/cas-server/</id>
    <published>2015-12-10T16:00:00.000Z</published>
    <updated>2017-09-20T09:28:19.247Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料：<a href="http://my.oschina.net/huangyong/blog/198109" target="_blank" rel="external">安装 CAS 服务器</a></p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><h5 id="1、下载方式"><a href="#1、下载方式" class="headerlink" title="1、下载方式"></a>1、下载方式</h5><p>在<a href="http://central.maven.org/maven2/org/jasig/cas/cas-server-webapp/" target="_blank" rel="external">http://central.maven.org/maven2/org/jasig/cas/cas-server-webapp/</a>页面选择合适的版本，下载对应目录下的cas-server-webapp-version.war。</p><h5 id="2、初始登录"><a href="#2、初始登录" class="headerlink" title="2、初始登录"></a>2、初始登录</h5><p>在/WEB-INF/deployerConfigContext.xml中的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"primaryAuthenticationHandler"</span> <span class="attr">class</span>=<span class="string">"org.jasig.cas.authentication.AcceptUsersAuthenticationHandler"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"users"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"casuser"</span> <span class="attr">value</span>=<span class="string">"Mellon"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p><p>配置了初始认证方式，这里的username/password即casuser/Mellon。</p><h5 id="修改认证方式"><a href="#修改认证方式" class="headerlink" title="修改认证方式"></a>修改认证方式</h5><h6 id="配置CAS服务端通过查询数据库的方式认证用户。"><a href="#配置CAS服务端通过查询数据库的方式认证用户。" class="headerlink" title="配置CAS服务端通过查询数据库的方式认证用户。"></a>配置CAS服务端通过查询数据库的方式认证用户。</h6><p>首先与Spring应用一样配置数据库，这里使用的是PostgreSQL数据库。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"casDataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"org.postgresql.Driver"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:postgresql://localhost:5432/jemoii"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"postgres"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"-1"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure><h6 id="建立新的认证方式jdbcAuthenticationHandler，"><a href="#建立新的认证方式jdbcAuthenticationHandler，" class="headerlink" title="建立新的认证方式jdbcAuthenticationHandler，"></a>建立新的认证方式jdbcAuthenticationHandler，</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcAuthenticationHandler"</span> <span class="attr">class</span>=<span class="string">"org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"casDataSource"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sql"</span> <span class="attr">value</span>=<span class="string">"select password from user_info where email = ?"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"passwordEncoder"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"me.voler.cas.AddSaltPasswordEncoder"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>dataSource属性即前面配置的数据库；</li><li>sql属性是一条SQL语句，功能即根据登录使用的username查询password，根据实际的table做相应的修改；</li><li>passwordEncoder属性是实现了org.jasig.cas.authentication.handler.PasswordEncoder接口的Bean。</li></ul><p>CAS本身提供了org.jasig.cas.authentication.handler.DefaultPasswordEncoder、org.jasig.cas.authentication.handler.PlainTextPasswordEncoder两种实现，这里根据实际的加密方式新建了me.voler.cas.AddSaltPasswordEncoder，即在rawPassword后面拼接自定义PASSWORD_SALT后再使用MD5加密。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> me.voler.cas;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.jasig.cas.authentication.handler.DefaultPasswordEncoder;</div><div class="line"><span class="keyword">import</span> org.jasig.cas.authentication.handler.PasswordEncoder;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddSaltPasswordEncoder</span> <span class="keyword">implements</span> <span class="title">PasswordEncoder</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD_SALT = <span class="string">"xx"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        DefaultPasswordEncoder encoder = <span class="keyword">new</span> DefaultPasswordEncoder(<span class="string">"MD5"</span>);</div><div class="line">        <span class="keyword">return</span> encoder.encode(password + PASSWORD_SALT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h6 id="应用新的认证方式jdbcAuthenticationHandler"><a href="#应用新的认证方式jdbcAuthenticationHandler" class="headerlink" title="应用新的认证方式jdbcAuthenticationHandler"></a>应用新的认证方式jdbcAuthenticationHandler</h6><p>将deployerConfigContext.xml中id为authenticationManager的Bean的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key-ref</span>=<span class="string">"proxyAuthenticationHandler"</span> <span class="attr">value-ref</span>=<span class="string">"proxyPrincipalResolver"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key-ref</span>=<span class="string">"primaryAuthenticationHandler"</span> <span class="attr">value-ref</span>=<span class="string">"primaryPrincipalResolver"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div></pre></td></tr></table></figure></p><p>修改为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key-ref</span>=<span class="string">"proxyAuthenticationHandler"</span> <span class="attr">value-ref</span>=<span class="string">"proxyPrincipalResolver"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key-ref</span>=<span class="string">"jdbcAuthenticationHandler"</span> <span class="attr">value-ref</span>=<span class="string">"primaryPrincipalResolver"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div></pre></td></tr></table></figure><p>添加修改认证方式依赖的jar，在/WEB-INF/lib目录下添加</p><ul><li>commons-pool-version.jar</li><li>commons-dbcp-version.jar</li><li>cas-server-support-jdbc-version.jar</li></ul><p>现在可以使用数据库中的username/password登录CAS服务端。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考资料：&lt;a href=&quot;http://my.oschina.net/huangyong/blog/198109&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;安装 CAS 服务器&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; cl
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Web" scheme="https://g.hijkl.mn/categories/Java/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>Apache POI使用示例</title>
    <link href="https://g.hijkl.mn/blog/apache-poi-examples/"/>
    <id>https://g.hijkl.mn/blog/apache-poi-examples/</id>
    <published>2015-12-04T16:00:00.000Z</published>
    <updated>2017-09-20T02:46:04.761Z</updated>
    
    <content type="html"><![CDATA[<p>读取记事本（txt）中的内容时，一直出现乱码，原因在于记事本的默认编码是<code>GBK</code>，不是<code>UTF-8</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> me.voler.jechat.core;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.HSSFWorkbook;</div><div class="line"><span class="keyword">import</span> org.apache.poi.hwpf.extractor.WordExtractor;</div><div class="line"><span class="keyword">import</span> org.apache.poi.openxml4j.exceptions.InvalidFormatException;</div><div class="line"><span class="keyword">import</span> org.apache.poi.openxml4j.exceptions.OpenXML4JException;</div><div class="line"><span class="keyword">import</span> org.apache.poi.openxml4j.opc.OPCPackage;</div><div class="line"><span class="keyword">import</span> org.apache.poi.poifs.filesystem.POIFSFileSystem;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.extractor.ExcelExtractor;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.extractor.XSSFExcelExtractor;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xwpf.extractor.XWPFWordExtractor;</div><div class="line"><span class="keyword">import</span> org.apache.xmlbeans.XmlException;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 支持取.txt、.doc、.docx、.xls、.xlsx，5种格式文档的内容，以字符串的形式返回。</span></div><div class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> http://poi.apache.org&#125;</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocumentExtraction</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 取微软记事本中的内容，以字符串的形式返回。记事本中内容的编码为GBK</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">txt2String</span><span class="params">(File file)</span> </span>&#123;</div><div class="line">        StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            InputStreamReader input = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(file), <span class="string">"GBK"</span>);</div><div class="line">            BufferedReader reader = <span class="keyword">new</span> BufferedReader(input);</div><div class="line"></div><div class="line">            String line = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">                buffer.append(line).append(<span class="string">'\n'</span>);</div><div class="line">            &#125;</div><div class="line">            reader.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> buffer.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 取Excel xlsx中的内容，以字符串的形式返回。&#123;<span class="doctag">@link</span> http://poi.apache.org&#125;</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"resource"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">xlsx2String</span><span class="params">(File file)</span> </span>&#123;</div><div class="line"></div><div class="line">        XSSFWorkbook xlsxwb = <span class="keyword">new</span> XSSFWorkbook();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            OPCPackage pkg = OPCPackage.open(<span class="keyword">new</span> FileInputStream(file));</div><div class="line">            xlsxwb = <span class="keyword">new</span> XSSFWorkbook(pkg);</div><div class="line">        &#125; <span class="keyword">catch</span> (InvalidFormatException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ExcelExtractor extractor = <span class="keyword">new</span> XSSFExcelExtractor(xlsxwb);</div><div class="line">        extractor.setFormulasNotResults(<span class="keyword">true</span>);</div><div class="line">        extractor.setIncludeSheetNames(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> extractor.getText();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 取Excel xls中的内容，以字符串的形式返回。&#123;<span class="doctag">@link</span> http://poi.apache.org&#125;</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"resource"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">xls2String</span><span class="params">(File file)</span> </span>&#123;</div><div class="line"></div><div class="line">        HSSFWorkbook xlswb = <span class="keyword">new</span> HSSFWorkbook();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            POIFSFileSystem fileSystem = <span class="keyword">new</span> POIFSFileSystem(<span class="keyword">new</span> FileInputStream(file));</div><div class="line">            xlswb = <span class="keyword">new</span> HSSFWorkbook(fileSystem);</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ExcelExtractor extractor = <span class="keyword">new</span> org.apache.poi.hssf.extractor.ExcelExtractor(xlswb);</div><div class="line">        extractor.setFormulasNotResults(<span class="keyword">true</span>);</div><div class="line">        extractor.setIncludeSheetNames(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> extractor.getText();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 取Word doc中的内容，以字符串的形式返回。&#123;<span class="doctag">@link</span> http://poi.apache.org&#125;</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">doc2String</span><span class="params">(File file)</span> </span>&#123;</div><div class="line">        StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</div><div class="line"></div><div class="line">        WordExtractor extractor = <span class="keyword">null</span>;</div><div class="line">        POIFSFileSystem fileSystem;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            fileSystem = <span class="keyword">new</span> POIFSFileSystem(<span class="keyword">new</span> FileInputStream(file));</div><div class="line">            extractor = <span class="keyword">new</span> WordExtractor(fileSystem);</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        String[] paragraphText = extractor.getParagraphText();</div><div class="line">        <span class="keyword">for</span> (String paragraph : paragraphText) &#123;</div><div class="line">            buffer.append(paragraph);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> buffer.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 取Word docx中的内容，以字符串的形式返回。&#123;<span class="doctag">@link</span> http://poi.apache.org&#125;</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">docx2String</span><span class="params">(File file)</span> </span>&#123;</div><div class="line"></div><div class="line">        XWPFWordExtractor extractor = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            OPCPackage pkg = OPCPackage.open(<span class="keyword">new</span> FileInputStream(file));</div><div class="line">            extractor = <span class="keyword">new</span> XWPFWordExtractor(pkg);</div><div class="line">        &#125; <span class="keyword">catch</span> (InvalidFormatException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (XmlException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (OpenXML4JException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> extractor.getText();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>pom.xml中的依赖包配置，<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="comment">&lt;!-- xls --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- doc --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-scratchpad<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- xlsx docx --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;读取记事本（txt）中的内容时，一直出现乱码，原因在于记事本的默认编码是&lt;code&gt;GBK&lt;/code&gt;，不是&lt;code&gt;UTF-8&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="POI" scheme="https://g.hijkl.mn/categories/Java/POI/"/>
    
      <category term="Note" scheme="https://g.hijkl.mn/categories/Java/POI/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Commons Email发送邮件以及与Spring的结合</title>
    <link href="https://g.hijkl.mn/blog/commons-email-and-spring/"/>
    <id>https://g.hijkl.mn/blog/commons-email-and-spring/</id>
    <published>2015-12-03T16:00:00.000Z</published>
    <updated>2017-09-20T02:46:04.758Z</updated>
    
    <content type="html"><![CDATA[<p>使用Maven构建项目，在pom.xml中添加依赖包，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-email<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure><p>参考<a href="http://commons.apache.org/proper/commons-email/userguide.html" target="_blank" rel="external">User guide</a>，基于QQ邮箱发送文本邮件，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    Email email = <span class="keyword">new</span> SimpleEmail();</div><div class="line">    <span class="comment">// 连接参数配置</span></div><div class="line">    email.setHostName(<span class="string">"smtp.qq.com"</span>);</div><div class="line">    email.setSmtpPort(<span class="number">465</span>);</div><div class="line">    email.setAuthenticator(<span class="keyword">new</span> DefaultAuthenticator(<span class="string">"QQ No"</span>, <span class="string">"QQ Password"</span>);</div><div class="line">    email.setSSLOnConnect(<span class="keyword">true</span>);</div><div class="line">    <span class="comment">// 邮件相关内容</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        email.setFrom(<span class="string">"from@qq.com"</span>);</div><div class="line">        email.setMsg(<span class="string">"Hello, world!"</span>);</div><div class="line">        email.addTo(<span class="string">"to@example.com"</span>);</div><div class="line">        email.send();</div><div class="line">    &#125; <span class="keyword">catch</span> (EmailException e) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>与使用JDBC连接数据库一样，前面的代码包含大量的模板操作，所以结合Spring，与JdbcTemplate类似，构建MailTemplate。在applicationContext-mail.xml中声明Bean，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans...</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span></span></div><div class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:mail.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"simpleMail"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.mail.SimpleEmail"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hostName"</span> <span class="attr">value</span>=<span class="string">"$&#123;me.mail.hostName&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"smtpPort"</span> <span class="attr">value</span>=<span class="string">"$&#123;me.mail.smtpPort&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"from"</span> <span class="attr">value</span>=<span class="string">"$&#123;me.mail.from&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticator"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.mail.DefaultAuthenticator"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"$&#123;me.mail.authenticator.userName&#125;"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"$&#123;me.mail.authenticator.password&#125;"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mailTemplate"</span> <span class="attr">class</span>=<span class="string">"me.voler.jechat.core.MailTemplate"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"simpleMail"</span> <span class="attr">ref</span>=<span class="string">"simpleMail"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure><p>将连接参数添加到mail.properties，me.voler.jechat.core.MailTemplate即构建的MailTemplate，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> me.voler.jechat.core;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.mail.EmailException;</div><div class="line"><span class="keyword">import</span> org.apache.commons.mail.SimpleEmail;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailTemplate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> SimpleEmail simpleMail;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg, String to)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.send(<span class="string">"【邮件】"</span>, msg, to);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> subject 邮件主题</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> msg 邮件正文</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> toList 收件人列表</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String subject, String msg, String... toList)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            simpleMail.setSubject(subject);</div><div class="line">            simpleMail.setMsg(msg);</div><div class="line">            simpleMail.addTo(toList);</div><div class="line"></div><div class="line">            simpleMail.setSSLOnConnect(<span class="keyword">true</span>);</div><div class="line">            simpleMail.send();</div><div class="line">        &#125; <span class="keyword">catch</span> (EmailException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> SimpleEmail <span class="title">getSimpleMail</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> simpleMail;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSimpleMail</span><span class="params">(SimpleEmail simpleMail)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.simpleMail = simpleMail;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用构建的MailTemplate发送文本邮件，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="meta">@Qualifier</span>(<span class="string">"mailTemplate"</span>)</div><div class="line"><span class="keyword">private</span> MailTemplate mailTemplate;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendEmptyMail</span><span class="params">()</span> </span>&#123;</div><div class="line">    mailTemplate.send(<span class="string">"中文测试，English Test."</span>, <span class="string">"to@example.com"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>SimpleEmail的父类的属性sslOnConnect的set方法名为setSSLOnConnect，如果直接在applicationContext-mail.xml的<code>simpleMail</code>Bean下配置<code>&lt;property name=&quot;sslOnConnect&quot; value=&quot;${me.mail.sslOnConnect}&quot; /&gt;</code>会提示</p><blockquote><p>   Bean property is not writable or has an invalid setter method</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用Maven构建项目，在pom.xml中添加依赖包，&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;lin
      
    
    </summary>
    
      <category term="Java" scheme="https://g.hijkl.mn/categories/Java/"/>
    
      <category term="Spring" scheme="https://g.hijkl.mn/categories/Java/Spring/"/>
    
    
  </entry>
  
</feed>
